(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{228:function(n){n.exports={data:{tag:{title:"array",belongsTo:{edges:[{node:{title:"Cool As A Queuecumber",path:"/cool-as-a-queuecumber",date:"26. June 2019",timeToRead:2,description:"Queues can be useful when you have a lot of requests or tasks that need to be done and you want to make sure they are done in a specific order.",coverImage:{type:"image",mimeType:"image/jpeg",src:"/assets/static/cool-as-a-queuecumber.07cc2b7.d29d73b.jpg",size:{width:860,height:570},sizes:"(max-width: 860px) 100vw, 860px",srcset:["/assets/static/cool-as-a-queuecumber.a67b0b2.d29d73b.jpg 480w","/assets/static/cool-as-a-queuecumber.07cc2b7.d29d73b.jpg 860w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 570' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-26'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-26)' width='860' height='570' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAqAEADASIAAhEBAxEB/8QAGgAAAwEBAQEAAAAAAAAAAAAABAUGBwIDAP/EADQQAAEDAwMCAggEBwAAAAAAAAECAwQFESEAEjEGE0FRBxQVImFxgZEkMlKhIzOCscHR4f/EABgBAQEBAQEAAAAAAAAAAAAAAAIDAQAE/8QAHhEAAgICAwEBAAAAAAAAAAAAAAECEQMhEhMxQWH/2gAMAwEAAhEDEQA/AJ%2boUVur7RIkyEsJz2mlBIJ8yeToqi0Sn05XbYiNIeAuHCm5UPO%2bk1A6upsmU4taXk0thQS9ITYuC/BS3yRi1/O3nrmKur1SpyGJtYh0wMbnfV2lJLqEAZuRfbi188nXhjjnVGtorKpFhyqe%2bzPLfqq/cXvIABx4%2bB41h/UNGVS5W3cHI7hUWXQR76Qoi/wNxraqaaT7JZlwEIljcStxStykL2i5UpfiQBnSyvwItVAYqziFFod1EeIN7tvmOAcZ08cnB18DJWYWplRWO2FFd8beb/DV5ROpqtIZTAktvNhFiuQhG5Sbc3uQBf4nnOmKkVeJJXEoHTopy04Jeb3P281KVhOl1T6cmMwi71JW24zAupMVslRP9KcfWx1WUlLTClaGEBmK%2b1Kkmox1LQU7ktKMqQvcbACwCRmwskH56TVSsv0ta2hCMYcNJWQt5RNxuwfcOfI5xpU1GkFpEyAyIEK6iJYJUcY5F1C5IF8c%2bGlceOlSWXz3G5O9xXddVtbJSAQL2vuuD9xxrevdscfwNmRVRVBqZUGgm9i1FAWqw8TawHyJ0XS62mhkin09vuque/KstzPFhwkeNs31Z0f0cwUKQqbKdf8ANCAEJP8AnRdT6SqDYeXRUxYMZsEBDKdzzg8yo5v8LjR5wejHy9JWp19yVGipUHSspUZC5awQ5e1tiBbaB73kTi%2bgZXVkiLDbiw40FwMvqdbdcYAXY4CTbBAGPHR0Tomuz3ARDcQlR/mPnZ9c51U0z0WM7b1SYtav0R02H3P%2btNvHD6BOT9RPU3rat1FZiQnHZE18KLba2wVBQFgEkDIsL2znGlU6lSVyZT8%2bqONPLWkBLpK3XkK5skZxYC1h9Na9B6VptMbCaYwY6yRvd3neQPjz/YaOh0SFDbV6m0hp5V7v2CnCT4lR8dR7Ip3FFLfhkvsOouw20MsmFBSSoPT1pZSQbX9wZIwOb6Cap8X2gXWTI6gm5C0tt7GBfGTa/wBra1l7paluyPWJbCpb/wCuS4XCfvj9tdrYajNduO02034JQkJH7a55jFGj6C5%2bXTmOqyb6mIRPb5PGn8UnYnOoIYxBzfXpe5GNDp17D8ukYcuKShKlLISkZJUbAfPU1J6ogJfLcWSiW4b7Wo38RX1tgfMnUn6VpD4koYDznYUU3b3HaefDjS3qT8F05DEP8OHFq3hr3N3ztzqqxpxsDlui/RX2VutNyu3FfdUlpuOpYUta1Hxt%2bUAX/wCa6lqSUkg6k%2bgUpHT7iwkBZdUCq2TxqikE251KcadDvR//2Q==' /%3e%3c/svg%3e"},content:'<h2 id="but-i-hate-queues"><a href="#but-i-hate-queues" aria-hidden="true"><span class="icon icon-link"></span></a>But I Hate Queues</h2>\n<p>Yes, when it comes to amusement parks queues are terrible but that\'s only because they\'re all FIFO (first in first out) queues. This means that whoever gets in life first gets to go before whoever gets in line behind them and so on. But imagine if they were LIFO (last in first out) queues, you would be rewarded for being last in line, although that might bring different problems of nobody wanting to get in line. Anyways, in this tutorial I\'ll show you very simple ways to implement both of these types of queues because if you haven\'t had to use a queue yet, you will have to at some point. Queues can be useful when you have a lot of requests or tasks that need to be done and you want to make sure they are done in a specific order.</p>\n<h2 id="first-in-first-out"><a href="#first-in-first-out" aria-hidden="true"><span class="icon icon-link"></span></a>First In, First Out</h2>\n<p>So this implementation of a queue is very easy and natural, the first item that goes into it is the first to get processed and so on down the line. As with any array queue, we start by creating an array with some basic data. You can add any data to your arrays but to keep it simple for this tutorial we\'ll use numbers.</p>\n<pre class="language-js"><span class="token keyword">const</span> fifo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre>\n<p>Now it might not always be easy to visualize what was first in but if you think about it this way, it\'s must more clear:</p>\n<pre class="language-js"><span class="token keyword">const</span> fifo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nfifo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfifo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfifo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfifo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfifo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>In this example, you can clearly see that 1 was added first and so on, which means that 1 will get processed first followed by 2, 3, etc.</p>\n<p>Now to process this queue, you can do:</p>\n<pre class="language-js"><span class="token keyword">const</span> fifo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Contains the number 1.</span>\n<span class="token keyword">const</span> number1 <span class="token operator">=</span> fifo<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>The <code class="language-text">shift</code> method will return the first item from the queue and also remove it so that the next item can be shifted.</p>\n<h2 id="first-in-last-out"><a href="#first-in-last-out" aria-hidden="true"><span class="icon icon-link"></span></a>First In, Last Out</h2>\n<p>This type of queue is easiest to see with an array that contains data at initialization like above:</p>\n<pre class="language-js"><span class="token keyword">const</span> filo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre>\n<p>With a FILO queue, not to be confused with the delicious dough, and with the queue items being added in the same order as above, the items at the end would be the first to be processed. This means that 5 would be first, then 4, 3, and so on.</p>\n<p>Now to process this type of queue, you can do:</p>\n<pre class="language-js"><span class="token keyword">const</span> filo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Contains the number 5.</span>\n<span class="token keyword">const</span> number5 <span class="token operator">=</span> filo<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>The <code class="language-text">pop</code> method will return the last item from the queue and also remove it so that the next item can be popped.</p>\n<h2 id="whats-the-use-case"><a href="#whats-the-use-case" aria-hidden="true"><span class="icon icon-link"></span></a>What\'s The Use Case?</h2>\n<p>Of course our examples here are very primitive because it probably doesn\'t make much sense to have a queue with just numbers. Normally in a real application a queue would contain function calls such as API requests that have to go off in border and with a queue that is a trivial implementation. I am currently working on an tiny queue library that I will post a link to here once finished.</p>\n'}}]}}}}}}]);