(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{233:function(n){n.exports={data:{tag:{title:"callbacks",belongsTo:{edges:[{node:{title:"Async Is Best Sync",path:"/async-is-best-sync",date:"25. June 2019",timeToRead:6,description:"I've learned that there are two kinds of people in this world, people that love async and people that don't understand async enough to realize they love it.",coverImage:{type:"image",mimeType:"image/jpeg",src:"/assets/static/async-is-best-sync.07cc2b7.827d625.jpg",size:{width:860,height:644},sizes:"(max-width: 860px) 100vw, 860px",srcset:["/assets/static/async-is-best-sync.a67b0b2.827d625.jpg 480w","/assets/static/async-is-best-sync.07cc2b7.827d625.jpg 860w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 644' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-30'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-30)' width='860' height='644' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAwAEADASIAAhEBAxEB/8QAGgABAAMBAQEAAAAAAAAAAAAABQIDBAEGB//EACwQAAICAQQBBAEEAgMBAAAAAAECAwQRAAUSITETIkFRYQYUIyQVMjNSkfD/xAAZAQADAQEBAAAAAAAAAAAAAAABAwQAAgX/xAAsEQABAgMFBgcBAAAAAAAAAAABAhEAAzESIUFRYQRxkaHB8BMUgbHR4fEi/9oADAMBAAIRAxEAPwD4YNuvfqB2k2utL/ACV9EFgDn3M874/wDvGkhtMk0clRGieD0Dh4uVxoWB9qF/aiksBkA/OjWWO7HC1%2b4FqxPhYmYzu/qEMQqRgKvZyewcn50xuN6CalLTia087RoWF6wV5SfiCLrGAB7s47OstLgEYQZCwlQCyxOeGrDKDZILcslarTzemZOJiLmwyMDjtVwoH5PXnOmau2y%2bvRffRRqSWFYpLbl9UumD/rBDk4wMd4GSPvWipVkp7ZOksy1q1gGSQ3J1owmMgBP4k/kZiADjsEYx96vRLK7LDW2fc1ah6v7WaeGOKjXfiM4M8mJCQWXIIwez851rRUaxmCEmylzneSeJ%2bII3Sl6qw2DC8teMOsa2Y0pkOrYYKF95C5z2Rkg6ha2azDVqXtn/AHVaRCZJLUkP7WFSA3uWRvczY76GfdqypDAk8bQ35bT4aOYbZEwbkpyv9iU4K5HkfHwdS/UTQ2hFLSgE9tnJ5Oz3p2yoJLOfZ1n4HWfoA6JE25KKZt%2bQoTETFOWtAUJDDU4DfBE0MEm4f8psWFEVhp9uPNuWcNmSTHeQDkDGSfrUtyr0EyZrMELh%2baqsrXZ%2byfacARDySRrDDYlFqGzKkNkTxCPlOfVEXvK5KrgLg56P3qW8pudfb7P75I0WWXiYnCq5dOjhF9yjA7JxnSpiXILk95CKpcoJe0Rndf0flDi2JYfQi3CtNFTsqgirt/Si9pIZuK5Z1ABPeM4%2bTjVznfo6EtrY0SrtjwP60lFBUiIDnKpLIecgK4JI77x8aC2%2bpvcl2W3tFSyj8VQyAc%2bHIYGZW6%2b/n4/GkjTSfd19MvO1aAssKf2wsy4CgkngoLAswBwo%2bW8awYMFKD6dco6YJVaDdN2PONeybPs920BZ3ia7uL85TFtdfmzqAxOZ5iAG6%2bj%2bMk60ULFS/Tr0P09%2bn4obVmwsJsI7XbEkmCVIZmEcbEr2MDIX5Gu24Y6sU12eltUu5WsSqp3IXGlVjyPGGLCDo593t6AAGdduWa%2b5vLQ/yciwLXDbbbt4oQ1xzMcxMMSsWYkYwTkgnOpvNAEFAxr38g3FoM9ZnJMtRccqNSnd8ZZ60T2aa3bEUsk65jS0xssoHZBhh6T8Ie/Ot94vTrU13OO3E1qRhEb7CGHHFiGFaMFiGIx7uux14xq3KS1RomOhJapQzy%2blG9Oou305F5AuGkP8rZGAPkZGfrRG7X6IilryVYIkryoTLtkbSGQ%2b1kZ7Uhy2S3XgDv4610qbtG0qeg73H3iVGyS9mS4DA0fG/DDhHd2nqQR1kdbaARErBTrLt8CFgRksxZ3xjJJ7GD40NDYFdlaOys08r8GlpwAM3yAZpABk/YGevzqG5zxw2CkyU4PSaQSIHNuVJAx5dZ4jJ%2bfHZI86r3Att0MovVVks%2bkGjF2bmRyHLKxp7c4%2b/vTk7KAi5Zf079t8JmTJniWSGGcX1dvewrT7nvlWnBc/sgmR5ZDkdH0Iuge/nHWnbe5RGKaGzPYlrzyqwa7IalcFRkkV4znyeix7%2bs683VgaWAQJL7gkb4iRK0Z8huTnDHHt7HnvUYGsSbiae0pHIJZEj5QpzBZvAaRz/wCk%2bMfjQVJDOVF8qffP0ilM2bOmAEBs3H17E6x6unJuO607g2eCGrtwZFsJVjjoV0UjK85ZDybxno4PnREwXaLdlYrUEDTQ8T%2bwh/cksrdH1pCMc8kll%2bh1rJZpS0YIIrW40muwvyjWKY25VK4AT/oB4%2bSBg6lvDKm4GLdCzy%2bI5tyk/wBBxyB6UZIxnwcnyNdJQgiwwA3fpgp2ewfE/qYz0LNrgLt3GL4r7TlGgSUSJIYSsoe7KPbyUqRhBkgjA%2bjnVUu4PYrTtuDwyB1eAf5GwGKyIB0I0HRw3RP1gHrGktzu1odqeNm3hrPpqZPVK0a0TnixwmDJIOzjx0R1orNtqx/ZcljEMcTvDV9KIRvgjnI4yAcMeWPOfvVBJKXbpwidEqUJtyiwoLyQcyW1%2bBBWaaGNZ0nnQhc8yIEz%2bFHZ68ePOmLlSzfjaFKyV6qzFgYoPQgKgYzzf3YXz8nB8axjZq8FiNIN1gfci%2bYkpKZSjKQQxkbAx0cYOfnU7O6zRT2P6otzK5ZHvk2ZYsHscekHxnrSSqPQUi04QSrUk8qAcI//2Q==' /%3e%3c/svg%3e"},content:'<h2 id="dont-fear-async-is-here"><a href="#dont-fear-async-is-here" aria-hidden="true"><span class="icon icon-link"></span></a>Don\'t Fear, Async Is Here!</h2>\n<p>I\'ve learned that there are two kinds of people in this world, people that love async and people that don\'t understand async enough to realize they love it. Asynchronous JavaScript lets you avoid callback hell and it can increase code readability drastically, that is unless you have a very wide monitor and prefer things being indented 200 times. If you don\'t know what callback hell is, there is a great <a href="http://callbackhell.com/" target="_blank" rel="nofollow noopener noreferrer">website dedicated to it here</a>.</p>\n<h2 id="what-exactly-are-promises-and-async-functions"><a href="#what-exactly-are-promises-and-async-functions" aria-hidden="true"><span class="icon icon-link"></span></a>What exactly are Promises and Async Functions?</h2>\n<p>So to understand why promises are needed we need to understand why callback are needed. While computers are incredibly fast these days and some things may seem instant, they are not. Thing like loading files and making http requests can take time and we don\'t want to try to work with data that may or may not exist yet. So in this essence, a callback lets you define a function to run once the operation has completed which ensures that your function will run. An example of this that we\'ll use is a typical request to read a file in Node.</p>\n<pre class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">\'/path/to/file.txt\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n\n  <span class="token comment">// Now we can work with the file data.</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>You\'ll see that you have to use the contents of the data variable inside of the callback to ensure that it is available. If you did something like this to try to access the data outside of the function, it will be undefined.</p>\n<pre class="language-js"><span class="token keyword">let</span> fileData<span class="token punctuation">;</span>\n\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">\'/path/to/file.txt\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n\n  fileData <span class="token operator">=</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This will be undefined because it probably hasn\'t happened yet.</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>As you can see above, it won\'t work because the console.log statement will be called before readFile can finish. If you do an asynchronous action like this in the browser it can be misleading because you\'ll see the data but it won\'t actually be there. What you\'re seeing is a reference to the data and so it eventually gets populated before you see it but you can\'t actually work with it programmatically outside of the asynchronous operation.</p>\n<p>Promises essentially do the same things as callbacks but they enable you to chain the results of callbacks so that you don\'t end up with crazy indentations and async makes Promises even more pretty by flattening even more.</p>\n<h2 id="that-doesnt-look-so-bad-why-bother-with-promises"><a href="#that-doesnt-look-so-bad-why-bother-with-promises" aria-hidden="true"><span class="icon icon-link"></span></a>That Doesn\'t Look So Bad, Why Bother With Promises?</h2>\n<p>You\'re right, in that simple case above it\'s not terrible, just one indent after all. How about when you have many?</p>\n<pre class="language-js"><span class="token function">asyncFunction1</span><span class="token punctuation">(</span><span class="token string">\'one\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">asyncFunction2</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">moreData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">asyncFunction3</span><span class="token punctuation">(</span>moreData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">dataOverload</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Finally done!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>In this example you can clearly see how it can get out on control. If you\'re thinking this won\'t happen to you because this is not a real example then just think of making XHR requests and creating images in the browser. You can end up with callback chains very quickly and it only makes it harder to refactor the longer you wait. Now promises work by \'resolving\' the data retrieved from the callback so it can be used in a flatter sense. To see how this works, we\'ll take the previous example with <code class="language-text">fs.readFile</code> and make it return a Promise.</p>\n<pre class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">promisfyReadFile</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">promisfyReadFile</span><span class="token punctuation">(</span><span class="token string">\'/path/to/file.txt\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// We can use data here.</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// If there was an error.</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>Now let\'s break this down, at first from looking at it you probably realize that it is lengthier than the original. While that is true, you only have to write <code class="language-text">promiseReadFile</code> once and then you can use it as a promise forever. With the callback method, you would have to create and use that callback every single time which is a huge inconvenience. To make the <code class="language-text">fs.readFile</code> method into a Promise, we have to wrap it in a call that would return the result of the Promise. The call is always the same, you\'re going to have <code class="language-text">resolve</code> to return the data that you want to work with and <code class="language-text">reject</code> which is used to catch errors.</p>\n<p>Now when we use the Promise, we\'ll always have a <code class="language-text">then</code> which has the data from the promise <code class="language-text">resolve</code> and then the <code class="language-text">catch</code> which contains the <code class="language-text">reject</code> error if there was one. This setup is pretty similar across all Promises and you can use it as a template for building your own.</p>\n<p>Back to our fake chained callback, let\'s see how it would look as Promises so you can see how chained Promises work.</p>\n<pre class="language-js"><span class="token function">asyncFunction1</span><span class="token punctuation">(</span><span class="token string">\'one\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">asyncFunction2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">moreData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">asyncFunction3</span><span class="token punctuation">(</span>moreData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dataOverload</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Finally done!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>Well now, isn\'t that much better looking! It\'s all very flat, just one level of identation and it\'s super easy to read. Each <code class="language-text">then</code> will contain the result of calling the previous function and if you compare this example with the callback one you should be able to follow it fairly easily.</p>\n<h2 id="ok-you-convinced-me-to-use-promises-now-what-about-async"><a href="#ok-you-convinced-me-to-use-promises-now-what-about-async" aria-hidden="true"><span class="icon icon-link"></span></a>Ok You Convinced Me To Use Promises, Now What About Async?</h2>\n<p>If you understand how Promises work, then you\'re already 90% of the way there because async is really just syntatic sugar for promises. To demonstrate lets take our promise from above:</p>\n<pre class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">promisfyReadFile</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promisfyReadFile</span><span class="token punctuation">(</span><span class="token string">\'/path/to/file.txt\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>The first thing I\'m sure you\'ll notice is that <code class="language-text">promisfyReadFile</code> did not change one bit. This is because, like I said before, async is really just a prettier way to consume a Promise. What you have to do differently with async is wrap it in a function that signifies that it is using async/await and then wrap the function call in a <code class="language-text">try/catch</code> block so that you can catch errors. The other keyword here besides async is await which just means it waits for <code class="language-text">promisfyReadFile</code> function to return its value before proceeding.</p>\n<p>To end this article, lets show that Promise chain as using async/await:</p>\n<pre class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncFunction1</span><span class="token punctuation">(</span><span class="token string">\'one\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> moreData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncFunction2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> dataOverload <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncFunction3</span><span class="token punctuation">(</span>moreData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></pre>\n<p>Look at how clean that is, everything is on the same indent and super easy to read.</p>\n<h2 id="conclusion"><a href="#conclusion" aria-hidden="true"><span class="icon icon-link"></span></a>Conclusion</h2>\n<p>I have no doubt you probably still have questions at this point but don\'t worry, it\'s not the easiest concept because there is a lot to it and you can get overloaded with information about it. What I recommend you do is find a function in any code that you\'ve written (preferably one that\'s tested so you can make sure the functionality is still the same) and change it to use a Promise. Then after ensuring that it still works as expected, try to spice it up and make it use async/await and test again. I\'m always a firm believer that practice makes perfect so just keep at it until it clicks and makes sense and it becomes second nature for you.</p>\n'}}]}}}}}}]);