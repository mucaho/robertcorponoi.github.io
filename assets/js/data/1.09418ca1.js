(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{220:function(n){n.exports={data:{category:{title:"nmotw",belongsTo:{edges:[{node:{title:"Node Module Of The Week ~ fs-extra",path:"/node-module-of-the-week-fs-extra",date:"2. July 2019",timeToRead:3,description:"",coverImage:{type:"image",mimeType:"image/jpeg",src:"/assets/static/nmotw-fs-extra.07cc2b7.d040356.jpg",size:{width:860,height:573},sizes:"(max-width: 860px) 100vw, 860px",srcset:["/assets/static/nmotw-fs-extra.a67b0b2.d040356.jpg 480w","/assets/static/nmotw-fs-extra.07cc2b7.d040356.jpg 860w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 573' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-48'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-48)' width='860' height='573' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAArAEADASIAAhEBAxEB/8QAGgAAAwEBAQEAAAAAAAAAAAAABQYHCAQDAv/EADkQAAIBAwIEAgUKBgMAAAAAAAECAwQFEQAGBxIhMRNBIjJRcYEUFRYjJDM0YWJjNlKRkrGzwdLw/8QAGgEAAgMBAQAAAAAAAAAAAAAAAgQBAwUABv/EACERAAIBBQACAwEAAAAAAAAAAAECAAMEERIhEzFBUWGR/9oADAMBAAIRAxEAPwDgpdv3gBT9J7Wc9vs8Z/40P4jWi8U2xLjNVXq3VVMAhaOKmjV2%2bsUdCFyOupcIlz92uM%2bzXLdlC0uQoGcdca2HsdVLZHPyZNOtlwMmFto0E8227xWRSReFC8SSxMQGcN25fPodW%2bxbe3BUWm3FdxWSBZoFdIpIYiyDlBwxK9wPbrPu1cGebKhsKp6j8zpkXHofVJ0OD6OsK4uNG1xDr1StQiVbeO2b9TWKolqNxWSWJHjDJEkQYkuuOw%2bOiibV3RI0jQ7mshxkkiKMdP7dQS7LmnA8NQSyjIX9Q01xKE5FEa%2b3t/726XqXeig4%2b5dRbZc9/sNR2m6/P9%2bpTcaNaxKaRpqolRHMMD0FGMZOcdPZr52BZblLba4Ut%2boaJUmUNHIVJJ5Ac9R8NCmc59Rcd%2b2vHaw5qi65UfeAZx%2bkape/Ips2vrEaoJuwXM9odiySKrLeAwYcw5aJv%2b%2buTd2xHt%2b2ai4vdfFaFVfwRTFMgsB1JY47%2bzTQnEuppKTw6W02WNB2AMxPXz9fS7vziDc7zt6ajkitsVPUcqOIY25sZB6FmPmNehNauRgtyLLRUEEARf2Lt2S42e63OKsEBpJIoihi5%2bfmJ88jGMaptu4XT1ggzf1TxIVmx8k7ZUNj1/z1NeHe7BZoa21S0dNUQ10kcjNMW9ErkDABGe/mdVmPiDdYHaKCmtyx06LEMwk4AXt63bAxpR6Ic5IkvSDPsRBO7eFclpt0lQ988bwni9H5Ly55nA/nPbTLb%2bE01W85%2bkxDxA5RLaWJ931mp1u/i1eaxaikliomj51BKR8uMMGxj4adLRxOvsSPVUr0LRTcp/DgcwIz3zoDajGCBDVVX0OQT9Dqg32729rwQaCF5OY0eC3KB0I5%2bnfXpsPY1VcYbjMl28EidVINKGBPhqc%2bsMd9FLbuuGs3LWVEtqhp57pDJA8oqHbDsuR0PTB5ce/S3UcU63bl4uVFt2nt5t7uj/aIi7FgiqTnI6dNCbVGBTUdhKxTsnCikcdI61gR2AY%2bfu1z3iGAUErQwVilWGDIjBQPiNa82y7y1TiRiQD0GcaH8dUUcJ9wkAZ8FP8AYmjF1k64lgT5mO6KKUl5o6eeURgAmNCwBJ8yO2qFTXCrazu4t1xeplBc4pnIyQAOuNFeCIztTcufOoph/nWmNqLi3QHLfh4hjmOPVHlqHuzTfTEPxBl2mHpLXcwfEqLbXqoYFmanYDJPu01bf%2bcaO2zUz2m65VwYvsrn0c9fLWqN%2bfwlX9T0aHz/AHk02MT8lnIZgXR8kMQe%2bNSLn8gaTHlXXrJb4gsdQKyOR1aBYm8WNRgh2GOgz20lSUlwqamaRKGrlPMOZo4WIB/pq%2bUZJ4g7uJZiRQyHJOfJNGNgTSChvKh2CmpiJ6/sprvPz1ONOf/Z' /%3e%3c/svg%3e"},content:'<h2 id="extra-that-sounds-like-bloat"><a href="#extra-that-sounds-like-bloat" aria-hidden="true"><span class="icon icon-link"></span></a>Extra? That Sounds Like Bloat</h2>\n<p>Yes I agree that some node modules are just bloat and there\'s already a native fs module so what could <a href="https://github.com/jprichardson/node-fs-extra" target="_blank" rel="nofollow noopener noreferrer">fs-extra</a> have that the native package does not? In thise case, fs-extra has everything that the native fs package should have. In fact, fs-extra can be used as a complete substitute for fs because it contains all of the same methods in addition to some more very useful ones. If that doesn\'t sell you, every method is a promise and so that means you don\'t have to create promises for the fs methods you use and promises are always better than callbacks.</p>\n<h2 id="i-already-use-fs-so-how-do-i-switch-to-fs-extra"><a href="#i-already-use-fs-so-how-do-i-switch-to-fs-extra" aria-hidden="true"><span class="icon icon-link"></span></a>I Already Use fs So How Do I Switch To fs-extra?</h2>\n<p>So let\'s say you have a project and you\'re already using fs as so:</p>\n<pre class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>All you have to do to transition (other than installing the module itself) is this:</p>\n<pre class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs-extra\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre>\n<p>It\'s that simple! Like I metioned earlier, fs-extra contains all of the methods of fs but it has the upgrade of returning promises so you can get rid of those dirty callbacks in your application.</p>\n<h2 id="well-how-do-i-use-the-promises"><a href="#well-how-do-i-use-the-promises" aria-hidden="true"><span class="icon icon-link"></span></a>Well How Do I Use The Promises?</h2>\n<p>If you\'re not well versed in promises, this can seem like more work than it\'s worth but trust me its easy. Let\'s take a look at a use case of fs, getting the names of all of the files in a directory:</p>\n<pre class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">\'/path/to/directory\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Logs all of the files in the directory, if it exists.</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span></pre>\n<p>If this is still very foreign to you then you probably need to go through some Promises/async tutorials to get a more in depth look at the subject. I recommended reading through a few of them but I have a simple article on the matter <a href="https://robertcorponoi.com/async-is-best-sync" target="_blank" rel="nofollow noopener noreferrer">here</a>.</p>\n<h2 id="ok-but-what-else-does-it-add"><a href="#ok-but-what-else-does-it-add" aria-hidden="true"><span class="icon icon-link"></span></a>Ok But What Else Does It Add?</h2>\n<p>fs-extra adds quite a few async and sync methods so I won\'t list them all here but I\'ll go over my favorite and most used method from it here, copy. To see what problem this solves, think about any times that you\'ve wanted to copy the files in a directory to another directory. With the regular fs package, this is an overly complicated task because you have to first read a directory and then go through every single file in that directory and call the <code class="language-text">copyFile</code> method.</p>\n<p>fa-extra makes this problem go away with a method named <code class="language-text">copy</code>. The copy method takes the original directory where the first are located and the target directory where the files should be copied too. It of course can take some options but that\'s outside the scope of this article.</p>\n<p>Let\'s say we want to do this with the native fs module and let\'s assume that you probably don\'t know the exact files that are in the directory to copy because files are being added by an external application which is usually the case:</p>\n<pre class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">\'/path/to/original\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    fs<span class="token punctuation">.</span><span class="token function">copyFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">\'/path/to/target\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span></pre>\n<p>and actually <code class="language-text">fs.copyFile</code> is one of the methods that fs supports using Promises with so you could do it like this:</p>\n<pre class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promises<span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">copyFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">\'/path/to/original\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n      <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">copyFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">\'/path/to/target\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span></pre>\n<p>Copying files with the copy method from fs-extra is as simple as:</p>\n<pre class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs-extra\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">copyFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string">\'/path/to/original\'</span><span class="token punctuation">,</span> <span class="token string">\'/path/to/destination\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span></pre>\n<p>It really is that simple, there\'s no need to use multiple functions to read a directory or call a function recusively and while fs introducted the async versions of many methods it still is not as complete or easy to use as fs-extra.</p>\n<h2 id="conclusion"><a href="#conclusion" aria-hidden="true"><span class="icon icon-link"></span></a>Conclusion</h2>\n<p>There\'s of course a lot more to the module but there is too much to go over for this post and so I high recommend you head over <a href="https://github.com/jprichardson/node-fs-extra" target="_blank" rel="nofollow noopener noreferrer">here to the GitHub repository</a> and read all about it. If you need some reassurance about the stability and maintenance of this package you can look at the lovely stats on GitHub which shows that this module is used by over 2.1 million repositories and is updated pretty frequently.</p>\n'}},{node:{title:"Node Module Of The Week ~ find up",path:"/node-module-of-the-week-find-up",date:"24. June 2019",timeToRead:3,description:"I don't know about you guys and gals but one of the most frustrating things for me when I work on my Node projects is figuring out the right path to the file I want.",coverImage:{type:"image",mimeType:"image/jpeg",src:"/assets/static/nmotw-find-up.07cc2b7.c73c113.jpg",size:{width:860,height:573},sizes:"(max-width: 860px) 100vw, 860px",srcset:["/assets/static/nmotw-find-up.a67b0b2.c73c113.jpg 480w","/assets/static/nmotw-find-up.07cc2b7.c73c113.jpg 860w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 573' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-47'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-47)' width='860' height='573' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAArAEADASIAAhEBAxEB/8QAGgAAAwEBAQEAAAAAAAAAAAAABQYHBAIDCP/EADIQAAIBAgUBCAEDAwUAAAAAAAECAwQRAAUGEiExBxMUIkFRYYGhMnGxFSPwM2KRweH/xAAXAQADAQAAAAAAAAAAAAAAAAABAgME/8QAHhEAAgMAAgMBAAAAAAAAAAAAAAECESEDEhMiQTH/2gAMAwEAAhEDEQA/AJDRQ7ibrcMf%2bMGsspJnnbw6ox8tywJ9AbcY8cpp2L7yLAbbj7GGfT8IWrVRGxSW6EA%2bvr/GJPRII05LDF4yaWqDIJg6iNTY33fXrfjHdbltO015Q4Swsdtzz0ww5TA04kkkjVgpJNvbd1xirW3Vgj7m8RCr1tcj0xP6aevroIhokY0iLtsqMB3i347zn8YcOz7s1GdZjV1daXhy1bqChszym36fhTyfoYD0lTEKqEGEB13K3%2b0brcfjFA0jqWRtSZfDWGCloqSlnjjRfJGp2qdxJPLE4MEr0ElmEv1TpysyPVIpKtN/dsu2ULYSqQbMv7/g4UM1ik8VK0l0UNtjO2/Itf8AnFO1HmVRUZbllJKYpYYZC8DuD3ioVby77/p5HHpbEzabvakmdiysG2g%2bhuPT24wtK7X4JNVjNGUqkdO1wHfcpUHn19cVXQejJtTZO1fTstMsS/2ty3WSUHp8D0%2bxiR5ZOkMqh2Xa%2b1iVPTnm1/8AOmL9obVhzCizePL4vA0FBlh8NTRybihXq5Nv1Enri2XosLEwQz0lXLFLvgdGbfGetwxJB%2b8G9G6Rm1OZ5DI0FJFc94VuGkKiy2%2bOp%2bMBM61G2fmkrHpVWrijKTTI4JlNvK5U2swsb%2b%2bHbs%2b1Q1bmq5fSxeDy%2bioZVEW65dwqsZGNhcnnCxSss5YT7N8tqsqrXpqqEwzx7lkAPUl%2bo%2bD1vg/pfSE2rq2oEkrR0ESMskw9XIG1R78i5%2bBgVqDUL5vl1FDXQK%2bYwxFRWs7B3QG4DL0P74duz7URfPMsyymhShy2mpp90Ql3mZ9obvHNhf49sCKjYHdCdqinqcmjp6WsVVrKeYJb0YWPIHsffCVLlKNSUlSjFX8zNyOfNwMNuc59V5pPkdNmkUUstPJY1bE97IhBsrehAv164VM/q6ajlhpYNoaWYKSG5HnB/wAGJt06iF6rkT5ZzGWIIAFiB94p/Zzkua6gizCTLo3MMMN5CJGTvGK/6QtwSRzY8cD4wo9qVFTUWvc4hpIVihEgYIvQFlBP5Jx9BdnZ/p2jsrhogsMZyjxZCqOZSeXJPU41eLs6fwy8cqZLcqlgW1PIQrMeUYWbgkcj6xjzSvWndjHJtswuVPJBUc/jBTtXiSm7SA8CLG0tNDO9h1dgdzfeJ1nkjL35BsWlIP1a2IONTou5%2bo2JmkTSJIrh/LIBu9ef/cYpc1jjapicWVoCrkmxFyvT6wnQzSAKwc32t/1jvOZpGZdzk/2x/OD1%2bE/K/wBGl8/L57SKkoeFdoAtwLA9Me2mtP1OtdVGGkcRxREyzVRXcsag%2bXgdWJ4A/f2wqZd5aiAgC9x6e45xbuzhzl2n9HiitD/U62q8YVAvNtjk23PxtHTDcXGnMDk5LT//2Q==' /%3e%3c/svg%3e"},content:'<h2 id="pathing"><a href="#pathing" aria-hidden="true"><span class="icon icon-link"></span></a>Pathing</h2>\n<p>I don\'t know about you guys and gals but one of the most frustrating things for me when I work on my Node projects is figuring out the right path to the file I want. I end up mixing a smörgåsbord of strings together and sticking it into <code class="language-text">path.resolve</code> only to end up in the file system of a Linux server in Alaska. It\'s also just such a trivial part of your application, unless of course you\'re making a file system package but you brought it on yourself, that you don\'t want to spend hours on it. Well have I (probably) got the solution for you, <a href="https://github.com/sindresorhus/find-up" target="_blank" rel="nofollow noopener noreferrer">find-up</a>.</p>\n<h2 id="find-what"><a href="#find-what" aria-hidden="true"><span class="icon icon-link"></span></a>Find What?</h2>\n<p>In order to avoid wasting your time, as the name implies it will find files <strong>UP</strong> from your current directory so if you need to find files <strong>DOWN</strong> then make like PhantomJS and disappear. Anyways, this package is very simple but it does its job and it does it well. It takes the name of a file to find and crawls the directory tree upwards until it finds it (or not).</p>\n<h2 id="use-case"><a href="#use-case" aria-hidden="true"><span class="icon icon-link"></span></a>Use Case</h2>\n<p>Now of course I wouldn\'t recommend a package that I don\'t use and believe in (unless you slip me $50 then I can look the other way) so I\'ll explain how I\'ve used it recently. So recently I\'ve been working on a project and it involves crawling websites and other fun Puppeteer stuff and while developing it I realized that I needed to support quite a bit of options and as much as I would love to create a giant options object or even better have a 50 argument function call, I decided I would take the route of having a JSON config file. This is similar to how Webpack and Rollup have config files and it can be useful to just load a single configuration file instead of just defining options. To avoid troubling the user with specifying a path to the configuration file or having me set strict rules on where it had to be defined since it could be a monorepo and the file could be used for multiple packages, I used the find-up package to look for it.</p>\n<p>This is how I was originally searching for the configuration file:</p>\n<pre class="language-js"><span class="token keyword">const</span> configPath <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\'/project.config.js\'</span><span class="token punctuation">;</span></pre>\n<p>This is inefficient mostly because of my last point, the package I was working on could be used in a monorepo and it could apply to multiple packages so just like Typescript I wanted to keep looking up until I found it. So the above ended up turning into:</p>\n<pre class="language-js"><span class="token keyword">const</span> findUp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'find-up\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> configPath <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findUp</span><span class="token punctuation">(</span><span class="token string">\'project.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Configuration file could not be found\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></pre>\n<h2 id="but-its-async"><a href="#but-its-async" aria-hidden="true"><span class="icon icon-link"></span></a>But It\'s Async!</h2>\n<p>Yes it is, isn\'t that wonderful! If you\'re afraid of async methods I suggest you dedicate a day to really learning asynchronous JavaScript because once it clicks you\'ll love it. If you really want to avoid async you can use <code class="language-text">findUp.sync(&#39;path/to/file&#39;)</code> but you should avoid using synchronous actions unless speed/timing is really not a factor in your application.</p>\n<h2 id="and-it-gets-better"><a href="#and-it-gets-better" aria-hidden="true"><span class="icon icon-link"></span></a>And It Gets Better!</h2>\n<p>As if the package isn\'t great enough on its own, it\'s published and maintained by <a href="https://github.com/sindresorhus" target="_blank" rel="nofollow noopener noreferrer">Sindre Sorhus</a> who dedicates his time to being a full time open source author which means he writes great code and also maintains it.</p>\n'}}]}}}}}}]);