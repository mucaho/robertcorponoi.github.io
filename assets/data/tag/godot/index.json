{"hash":"60519dfcae29a887a3af75e5c420035f97c8fe29","data":{"tag":{"title":"godot","belongsTo":{"edges":[{"node":{"title":"Using Rust With Godot - Introducing Godot Rust Helper","path":"/using-rust-with-godot-introducing-godot-rust-helper/","date":"12. May 2020","timeToRead":7,"description":"Using Rust with Godot can seem intimidating at first but it's easier than you think, especially with the help of Godot Rust Helper","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/using-rust-with-godot.07cc2b7.740bb04257e00e8c54e37f95a566e89c.png","size":{"width":860,"height":463},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/using-rust-with-godot.a67b0b2.740bb04257e00e8c54e37f95a566e89c.png 480w","/assets/static/using-rust-with-godot.07cc2b7.740bb04257e00e8c54e37f95a566e89c.png 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 463' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-79d0f7e6bafdc50094db086b3b230426'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-79d0f7e6bafdc50094db086b3b230426)' width='860' height='463' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAiCAYAAADvVd%2bPAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADwUlEQVRo3u1Z6UtUURTvLygIs9Ry1xIqCFq/hVJZZpmjpqaluUxuJC7hUmJmppm5mxWlGeTeJ8dxyaAwNMxAQ53REVxA0DFTUFNH/XXvtTeM5accwfeaA4fDu3fe5Z7fnHPu7563xcLEFP%2bzbtEBoANAuwuaG5ts2GY3Yu0NA8DS1EyrygsAuA1Sa7RzFwx26MNQf%2bf6lKxhRKzm2ps6Asz2GGOvhSVeFRfjfVMT6mqlqK%2brg1RSi9oaCXuW1NRAWkueJZKVMamUWfasMUb1XWMjqioqcejAQZgY7d78KUABsLG2xsjICLQls7OzOHHkKPYYGKrTYXMDYGWNXnkv2/z8/DyzjQ0NSE9Nw9DgEJIS7%2bJTczPeVlcjPzcXU1NTyEhPR3VlFSrKy/EwNRVKpVINwOjoKI4dPgJjQyP%2bAKBQKNQOfB8fx8Xzjih%2b%2bRJREZG4FRmFQD9/eHtegZeHJ0ROl3A7Lp6NRZN5f9/rWF5eZkplnIBxnM8AzMzM4JqXN9xd3RARHo7rPj64GRYG36vX4HrJGXExMcz50OBglL0pRXpaGntvYWGB/wCoVCpmBwcGWVGj%2bUyL4I%2bJCQwPD6O7q4vN02Inl8lZOvT2rqTP0tIS/wGgTnCOaIpMJsPzp0/xrLAQjfUNf83T8BcMAJzlQvp1SQnLfVr4crNzECQWIzEh4S/HBQcAlX5FP/bvs4GD/VnciY9nRS%2bPnAQebpdRXlbGfrO4uCisCKDOcLUgJysbyUlJcHJ0hN3Jk3ATubAToqy0FKFBweooECwAKfeSkZ2ZCVdnEU7Z2pLq7wfHcw7IevyYpIWHcAGgYU3lc2sro7QOZ%2bzZ2d/T3Y0AAsL2rdvwJD9fmCnwZ3FLS3kAP8IFKDv80tZGyFEEC//p6ek164YgIkDTISrVVVUQ%2bwcwAkTDn3NekCnAhTVnfxIytNa5Txnj3NycekwQAKh%2bn/30H8/OzCJn/yNER0YiMyODsUB68REHBDCK/CS/ACE3glBcVLSKRfIaAI78FOTlwdPdHUGBYnYviI%2bNRWFBAcKCQ1D04gUbS0m%2bj9N2dgwcwQDAhT7l/ePkVthHeH5rSwu%2bdXbi44ePkPX0sPnOjg58bW9n12i5XL4qBZS8BKCvTw3AWncBTeH%2baU2h73DgKcfG%2bNcPGBwY0FpHaHJyciUC%2bNARok1LuknK7i4TmutC7vuuzv%2bo5F03kYjQ5gusz0jB5U1XmHZ0DfR2sM7wulRvpbPMm66w5ncBKzNzraglUd58GNF9G9QBoANABwCf9BfK%2bASnSZEhFwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"content":"<h2 id=\"welcome\"><a href=\"#welcome\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Welcome</h2>\n<p>to the first step of mastering Rust in Godot. Using Rust in Godot is great for performance critical code and can either be used on its own or to supplement existing gdscript. We're going to go over the process of setting it up manually and then how to do the same thing using <a href=\"https://github.com/robertcorponoi/godot_rust_helper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">godot_rust_helper</a>.</p>\n<h2 id=\"manual-setup\"><a href=\"#manual-setup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Manual Setup</h2>\n<p>During this section we'll go through the manual process of setting up a Rust development environment for your Godot project. If you would like to skip to the godot_rust_helper section, click <a href=\"#using-godot_rust_helper\">here</a>.</p>\n<h3 id=\"creating-the-project\"><a href=\"#creating-the-project\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating the Project</h3>\n<p>The first step is to use cargo to create a new package. This should be done outside of your Game's directory as there can be performance issues if you do it in the same directory. I like to create mine in a different directory and use the exact same name as the game.</p>\n<p>So let's say your game is at <code>~/Documents/Games/platformer</code>. I would create another directory in <code>Documents</code> to hold the library. In my case I have a <code>Projects</code> directory so I go in there and run <code>cargo new platformer --lib</code>.</p>\n<p>This leaves me with the following directory structure:</p>\n<p><code>~/Documents/Games/platformer</code>\n<code>~/Documents/Projects/platformer</code></p>\n<p>Now open up the newly created project in your favorite text editor and open up the <code>Cargo.toml</code> file created by cargo. You will need to add a couple lines including the gdnative dependency that is necessary to use the gdnative modules. Below is a sample Cargo.toml file that contains the necessary components needed:</p>\n<pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">package</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"platformer\"</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n<span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Bob &lt;robertcorponoi@gmail.com>\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">edition</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2018\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">lib</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">crate-type</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cdylib\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">gdnative</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token key property\">git</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"https://github.com/GodotNativeTools/godot-rust\"</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>Look closely at the parts under the package section, they are what are needed to create a basic working project.</p>\n<h3 id=\"create-the-scripts\"><a href=\"#create-the-scripts\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Create the Scripts</h3>\n<p>Before we can create our first script we have to set up the basics that let's Godot know how to handle our script. In your <code>src/lib.rs</code> file place the following boilerplate code:</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[macro_use]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> gdnative<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">:</span> gdnative<span class=\"token punctuation\">::</span>init<span class=\"token punctuation\">::</span>InitHandle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">godot_gdnative_init!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">godot_nativescript_init!</span><span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">godot_gdnative_terminate!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>This will let us create as many scripts as we want for the project and we can easily register as them as you'll see next. Now we're going to create a script called Player that will print \"hello, world.\" to the console. To do this, add a new file under <code>src/</code> and name it <code>player.rs</code>. In the newly created <code>player.rs</code> file, add the following:</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(gdnative::NativeClass)]</span>\n<span class=\"token attribute attr-name\">#[inherit(gdnative::Node)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> Player<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[gdnative::methods]</span>\n<span class=\"token keyword\">impl</span> Player <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">fn</span> <span class=\"token function\">_init</span><span class=\"token punctuation\">(</span>_owner<span class=\"token punctuation\">:</span> gdnative<span class=\"token punctuation\">::</span>Node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n\t\tPlayer\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token attribute attr-name\">#[export]</span>\n\t<span class=\"token keyword\">fn</span> <span class=\"token function\">_ready</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> _owner<span class=\"token punctuation\">:</span> gdnative<span class=\"token punctuation\">::</span>Node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">godot_print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Let's break this down a bit. Everything in this script except the <code>_ready</code> function is required in order for Godot to be able to use this script. The only thing we do in <code>_ready</code> is print the \"hello, world.\" line. This article isn't going to be an in-depth guide on gdnative but great documentation can be found <a href=\"https://docs.rs/gdnative/0.8.0/gdnative/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>Now that we have our Player set up, we need to go back to the <code>src/lib.rs</code> file and register it with Godot.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[macro_use]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> gdnative<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Pulls in the module file.</span>\n<span class=\"token keyword\">mod</span> player<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">:</span> gdnative<span class=\"token punctuation\">::</span>init<span class=\"token punctuation\">::</span>InitHandle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Registers it with Godot.</span>\n  handle<span class=\"token punctuation\">.</span>add_class<span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span>player<span class=\"token punctuation\">::</span>Player<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">godot_gdnative_init!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">godot_nativescript_init!</span><span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">godot_gdnative_terminate!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Any other scripts you create will follow the same procedure, you add the <code>mod script_name</code> line and then you register it with <code>handle.add_class::&#x3C;script_name::struct_name>();</code>. Before we move on make sure you run <code>cargo build</code> so that the dynamic library files get build and you can copy them into the Godot project for the next step.</p>\n<h3 id=\"create-the-resource-file\"><a href=\"#create-the-resource-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Create the Resource File</h3>\n<p>Now that we have our script set up, we need to create a resource file for our it. Each script you want to make will need its own resource file.</p>\n<p>Here is an example Player.gdns file:</p>\n<pre class=\"language-text\"><code class=\"language-text\">[gd_resource type=&quot;NativeScript&quot; load_steps=2 format=2]\n\n[ext_resource path=&quot;res://platformer.gdnlib&quot; type=&quot;GDNativeLibrary&quot; id=1]\n\n[resource]\n\nresource_name = &quot;Player&quot;\nclass_name = &quot;Player&quot;\nlibrary = ExtResource( 1 )</code></pre>\n<p>The three things that need to be changed in this example file are the <code>ext_resource_path</code>, <code>resource_name</code>, and <code>class_name</code>. The <code>ext_resource_path</code> needs to point to location of the gdnlib file we created in the step before. The name can be your class name either lowercase or capital but the most important part is the <code>class_name</code> which has to match the struct name in Rust.</p>\n<p><strong>Note:</strong> With this method everytime you change your scripts and run another build you will have to copy the dynamic libraries over the previous ones so that Godot can pick up on the changes.</p>\n<h3 id=\"set-the-build-targets\"><a href=\"#set-the-build-targets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Set the Build Targets</h3>\n<p>This next part will depend on what platforms you plan on building for but for simplicity sake we'll just say windows. For this part we will need to create a gdnlib file that will let Godot know what dynamic libraries should be loaded for each platform.</p>\n<p>Here is an example platformer.gdnlib file:</p>\n<pre class=\"language-text\"><code class=\"language-text\">[general]\n\nsingleton=false\nload_once=true\nsymbol_prefix=&quot;godot_&quot;\nreloadable=false\n\n[entry]\n\nLinux.64=&quot;res://libgdexample.so&quot;\nWindows.64=&quot;res://libgdexample.dll&quot;\nOSX.64=&quot;res://libgdexample.dylib&quot;\n\n[dependencies]\n\nLinux.64=[]\nWindows.64=[]\nOSX.64=[]</code></pre>\n<p>Now let's break it down. The items under the general section control how the module is loaded and we have no need to change any of these. The entry section tells Godot the location of the dynamic library in the project's filesystem. So basically wherever we decide to place out build files, we need the paths to them to match here in the gdnlib file. For this example we're just assuming the files you built in the last step were placed in the root of the game's directory.</p>\n<p>The dependencies section allows you to name additional dynamic libraries that should be included as well. This is useful if you need a third-party dynamic library to be used with your project but that's outside the scope of this tutorial.</p>\n<h2 id=\"using-godot_rust_helper\"><a href=\"#using-godot_rust_helper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Using godot_rust_helper</h2>\n<p>All of the steps above were for the previous method which can take up a lot of time especially if you have incremental changes. This long setup and the constant need to keep copying over the new dynamic libraries let me to create <a href=\"https://github.com/robertcorponoi/godot_rust_helper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">godot_rust_helper</a>. We're going to go through the same project setup as above but this time using the godot_rust_helper CLI.</p>\n<p>First things first, you have to install godot_rust_helper using <code>cargo install godot_rust_helper</code>.</p>\n<h3 id=\"create-the-project\"><a href=\"#create-the-project\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Create the Project</h3>\n<p>To create a new project you have to specify the directory you would like it to reside in and the path to the Godot project that you are creating scripts for, just like in the previous section. We're going to assume the same directory structure as above and use:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ godot_rust_helper new ~/Documents/Projects/platformer ~/Documents/Games/platformer</code></pre>\n<p>This will run <code>cargo new</code> and create the project while also automatically creating the gdnlib file in the Godot project. The <code>new</code> command also comes with several options to customize your usage:</p>\n<ul>\n<li><code>--targets</code> Native components in Godot can target multiple platforms and godot_rust_helper needs to know ahead of time what platforms you plan to target your components for with the available options currently being: windows, linux, and osx. For example if you are targeting Windows and OSX, you need to have have cargo set to build a dll and a dylib file and you would pass <code>--targets=windows,osx</code> as the targets. By default if no targets are passed then just <code>--targets=windows</code> will be set.</li>\n<li><code>--output-path</code> godot_rust_helper has to place a gdnlib file and the build files in the game's directory. By default these files are placed at the root of the game directory but you can specify a directory in the game (existing or not) where these files go instead using this option.</li>\n<li><code>--nativescript-path</code> The path in the Godot project where all of the resource files will be output. By default the resource files are placed at the root of the Godot project.</li>\n</ul>\n<p>So if you wanted the gdnlib and dynamic libraries to be placed in a directory called <code>gdr-output</code> and you wanted the resource files to be placed in <code>gdr-scripts</code> you would do:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ godot_rust_helper new ~/Documents/Projects/platformer ~/Documents/Games/platformer --output-path ~/Documents/Games/platformer/gdr-output --nativescript-path ~/Documents/Games/platformer/gdr-scripts</code></pre>\n<h3 id=\"create-the-scripts-1\"><a href=\"#create-the-scripts-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Create the Scripts</h3>\n<p>Creating a new script with godot_rust_helper is as simple as:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ godot_rust_helper create Player</code></pre>\n<p>This creates the <code>player.rs</code> script and adds the entry for it in the <code>lib.rs</code> file. This even sets up the <code>player.rs</code> script with the basic \"hello, world.\" example we showed above to get you started.</p>\n<p>From here you can build the project by using:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ godot_rust_helper build</code></pre>\n<p>or you can run a build that watches for changes with:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ godot_rust_helper build --watch</code></pre>\n<p>The great thing about building this way is that it automatically moves the dynamic library files to the Godot project so you can run the build then go right back in Godot and press play to see the changes.</p>\n<p>There are also a few other commands offered by godot_rust_helper so make sure to check out the full documentation including a detailed step-by-step guide on the GitHub <a href=\"https://github.com/robertcorponoi/godot_rust_helper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a>.</p>\n"}}]}}},"context":{}}