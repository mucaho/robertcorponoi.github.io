{"hash":"85a87da2caa6a3c8ae7647f17d7dfc4c0f704337","data":{"tag":{"title":"ai","belongsTo":{"edges":[{"node":{"title":"Unreal C++ Creating a Zombie AI","path":"/unreal-c-creating-a-zombie-ai/","date":"30. August 2020","timeToRead":43,"description":"Learn how to create an Zombie that roams, chases, and attacks the player","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/main.07cc2b7.7e8c19927233dfe4043889962a6d211b.png","size":{"width":860,"height":476},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/main.a67b0b2.7e8c19927233dfe4043889962a6d211b.png 480w","/assets/static/main.07cc2b7.7e8c19927233dfe4043889962a6d211b.png 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 476' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ec163d2e2f85e78eac8f5adcef7fdfc7'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ec163d2e2f85e78eac8f5adcef7fdfc7)' width='860' height='476' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAjCAYAAAAkCQwqAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAPkUlEQVRo3m2a2XNc1RHG579L8ZCkggvwIskarZY0kmY0Gs2MRjPaN8uyLdsYG0LAUEBYKoQlpAgxW1IEkgISINiWwZZ3eRc7eer0r8/pOyPBw6kr37n3nNNff/1197lOXbl6V65cuytXr20k49o64ysb69fr4/rNb%2bSGji%2b%2bvCwXLl6XW7e/k2dfeEP6h2ZlcHhO9vTXpKt3THoHJ6U3O2XXlraCNKeHJd1VlqHSXhkdPyS16QelWFmWrL5TGT8o83sfkUdPvCS/f/4v8sdX3pXXXn9PXv/r%2b/L39z6Rj/69KmfO6nqXbsnFSzfl0uVbtr8bN76W23e%2bk7sbP8j1Gxt6/6ZcvnJLzqyuyeenzuk%2bv412hOG2YSs2X756R5%2b/Iyn%2bMBCuAsLdLSDUgcDwK/rsmdULCsaGrF24KcsrJ9ToCRkqLuhYlM6eirR2jtjIKADl2kGpTByya%2b/AhHT2VqS7ryp9%2bltuZMGe6dH7XXovMzQjA/k5yRYWpDszLs0KXLqrJO3dozKiYE3MHpO5pUd1zScMsP2HTsixR56Tp555TQH7h7z1zkfy3vufyaefnZOzX1wyoNavf70FhGCj22sA%2bD%2bu/KzxG%2bZ5jF%2b7cN2Mv3P3e/XKWckV5uSBpgFp7RiRPZmaDJeXkoHnuzNqqF4xMluYNwC4BwgAUKweUHAOy9jkYenPTUu6syjte8rSoSOvTCnp78wFUMwHUMYsHW3dZQVoWHa05GSnjt7BaQMOJi4dOGGGAcK6ssTtMdu2gHBZR6pu/N3kocR4nQAAzirlvzx3RTa%2b%2btGQzhf3qufH1WMzZlBGDciNzOv9RdswhgBMS/uwhQTGjE6sGBsCQBMyXJpVQ0oJGwbzszYPBjJXYXSfjIztl6IO1tjdXpDdHQW7wjZYBTMYhF6bsoXnWjtLtkdCAqex/6uJfVsYcPVOIwANKOm4fuMbRfK2nDqzpg/fllt3vrd4B2k2x8bYPBtqacvbYAP58l7zICOrLOkZGFfPzKhGzNrGMbJvsCblclU3XbA5YIGNqSM2N2yw0VVURozaewx0hrl4J5Obsr9hF85oUUYA0AO7%2bmV67iFz4JnVixYG7ly39YqF/Z16CGyOfRU79fz5tXU5feaCCd1FFaCFfb%2bVpnQ%2bieMB9RiU7ugZNY8z2CTAlGoHQtyrp2GBeU4H75X1t5GxZX1u2ZjBMwwMYk6Gi6nPW1AvM1/JwuaQGbxrd9ZAb0oPmfdZGzACQNPy4cerJtSbWbARjQ/xnzDgahw8CHLED7SH8h7v9%2b3o07gbsgXZIFQ2murmhtXrDgQbBxgMIbaJfZ7v1N%2bHSouaBVbUkP1q0IqxJY1oKjgIJyDBGozEWMCESV19YU7mMR0w4RwzdsAU3oVhPMueENPfPfGy3Lz1jTmxEYCfimC8AVVQztOn1xS5G/LVV/%2bTt9/9yFBFdFi8XWOWhUGbxQABo7jfrMDgbbwCECOVfea1sqa5seqy5LLj0trUKzvubZHh4pwaGEKkf0hDIjsZvK5zuwC6bgAwwFiY6fw4ADAAh/V5nv3ALg8ZnJFRFvz31AVlwHpkwdcx021mQcporwidO38tQQvaP/%2bHkzG/zwdDVfigP4bu1o2AOguBfJ%2bp9HgSEhjmHuzqn5a21rx0d%2bSlY2eXLE0qMOV5ZYKyQcMBRowqSFwxljVgEYCg/ISGA8RvbdEJw6OBgc5CntvZMig7NTSaWnOybXuvPPr4i1orfK92rf1EDD39p0ABsVg9e8keJt4PP/SM5XfUGXShM%2biyAB4ABK7QkcWLUa3xOBsxRdaagE139IzJL3%2bzR%2b75VacypSLHH3xM8nlqgjHzsAGgV0SQtQCWtaA2nsdYNMUBZT2yBCwzsPocrHG75yG1S0EgVL48v656di3RAryfpEEYgMojeBtK%2bY//84WmsgW5b2cmKWhYIOTekhpWTGIVr/imgvAdNM%2bzAZ7jef4m9vl9d3dNtj3QL9mWPVLOK2MGgzag6KRTiinYBItYEwCZB8MAyUQwiiteZx8t7fkwNDyadeAodIWwZXRrffLyq%2b9axXjqdJ0FDkKoBDXV3d34Ud44%2bYF6qKxi16vezcmO5gGjEhu0tFbea2JHOLioocZ4nPSUVy2gIHLlhgWAwP2qprfa9BGrEwrdw1LIT1modMTCp8PVXg3jWYwENP4dlH3awAUkL7Ys51t2GbaQdHHmHdcnwnd28WFLfefOXTVHOwtcCFNUeU8%2b/arcvysj9%2b/s0xga1AprwAQHz7jIcIV%2bpBlbOKY3o6wOwiVsfDnZBO9z38OEWMdA7uNdQMTTXBExPO01QUVHVXsGjOZZhLYtDgADGMCFNTjBwkAdwn1ChHXZAyC8/bePVde%2bNRZ4SewgpI4ef1YnHQ3UI/cqC0CV3OwaUIiCg/Ge19MNNOc%2bqQsDuGIADQ%2be2xqr/brZEQNoMckCoViaVnDCewyAGp85GuK9u2QgBdaMJnk/pNS6PuB1wGJ/XHmeinROWeBNXCMLrA4gTrwAAT3Q9AKDiWxxNQAjTdQSigc9QGgwujIZh/5djRVdKJrG4qiaEXh/YvYhM65xEF6APmDV3ZyFC0ZZLPcF59ja3UHottYLzjIcyf53x5SMNjRpFqKzpC44dfp8woDLl29LitKUAQB4Yldr1sKA%2bAcE1BRDvcrz2AwxNmfNDr%2bR971SYzAXHuiK3scIgOAZDHZPM8Znj5pBzhSM9UIHIGAUxRPrhqwUQLI0WAllebEashB2NMeagfKYcN2uTdu%2bA49pI/eDFXmkfCpeQEj1m/EzhhyGu/Ge6hqNd5RRY4wMKS92cTGOicMQNvuMvswNSEb/oeD9ybljNia0Znc22DPKRp7zAQiEH7/DKh%2b1RBtKEeQAMKDDIv7mvrFUQwBASKtUtTdufm0sSJoho6kZnzXl92ICJnhpiuEJ0iZmK3aY4RswIeut2JW5AMcNC9cQ01av63uwB49WNP9jTKjva/Zu4wAA1q7p%2b4k4Ro0BmPYYEm1WN8SSuqMQGblsIogTArvG5PEnX7aMR83jLEgheKS6PjvBqffsTMq/vdKCYqVYuWFA6N3rxluM6t8sGigePGUxPhvinDXwjnk6E4oXNIQNV6zs3ZcUXrCL32meALFRHBk4wsreqEntsU5xe5ir8YyCeccUvNUvrlgm%2bPzU%2bVAHZGIIkE5AK%2bTa0IC4CPI3hQ9IMhkbIwN4zu%2bICg1gTtHEeB3QHY9bM8PBho9YDAHw9MLDSWgwxqPXEcHQ6NR1JhRGB5JiKd0%2bJOl0VlkQ0nJnT9kY4m15PqbxTG5GXnz57YQFX2ptkAp9dRBBRA0A8Cg6EBqQfJLzGWyGTRRiKjMhxFsa%2b2ywkfoW5/EKeKGbqwPQEweG%2brONA%2bbgTRdHv8JS3qdLzQ3WZGhgTLI92pvs7pdtu9QZ/Vq/jMxIsbJoV/YZaoI5mZo/JmsXb5oAwoKUHywAAHkfihL/rqRe7BBbbD40LyuW8sY0b3u%2bxosYA5hDsfih8AkxvmIAubjxtxvP%2bs6SrQDwLszrjuKYlMnoDQ1RYVYqxRk5ePAROao9xvz0Qbnn3qx0jr0iHaWXpGn0TRlafE071qWkXabBe%2bPkPy0jrJ69HEKgfrJSC8bT8DQAwOiINb21uLWDSdFjQKgHzVM9MY3FtOcehy2AAS0B2WOc3wk76D81f/wnIAAAfYhrhokj9UTvqPTkF1STtGxWo2oK8NTUAVlcfFCau%2bZk5%2bDT8uuup%2bUXe/4k6YmTktZCDzYj2i3tBZnS7JN0g1Z8xDRICWxpMALQWO76OVzd%2bJWk6PHa3A4torfQCfc0z0wtHDcj3VC8DnAhtS7bfDznIcNz6ABzOAMMBOoJvXZqez2s1K5MqiBq6OUHq5Lrr8iwNlqFUQ1NvWJsUyvda3Cq1TY6drRk5a13PrTqMLW9KWNCwqTtsbTF85z%2bNEcNgCHhSGp/csgR6vZY9Ogm/SSoDkI4H8DDdS2o1wDEIp63sMtUDSjo7o0PQgw4sMVPmRP66%2bhQwcuqweXKXinRfwwp03Ljmq6X7F2EjzPH5nTQsubYxvP3fdrzzO09bueeKTweFD40EAz%2bhhUh/oIRbMbToFd7eIxnSX%2bh0qtuYgGgAtjk/LFNBVBSCOk9QrAnZoQeOz4LWsFcrg%2bs4wcm6IuV5cqwgeyElAvTUlTjSyNzUlLjQzMWehcAc6MbGcB5Is794F%2bfewjEXkBVMqTCxSSNkO4QQNIdhpnIaabwytBKVoqhBoV2492AxriuM%2bC4hYAfijZmh94IBHva2jPUYlFFTh9WI/eoHmT6q0r5cKYQzgWXIntmYklfH65x27b3yOGjT2kpPDS9KQ3iUZ8Iw0DKDy299W1LjqsXLPUBGl4JVK3FYmrMvBBi%2behPFJ77gIihbnzIDOM2AJv9eN9QnQ4FUKgIg/DibWvMOAnqKiYdajicDZrUGUtiQtn7HLTuAQ19yuOYBTYDgPF4EcQ29f1xAdSU30MYHLbNsUk2BVUxLICzbPfI5%2bb5%2bTiiFsA0A6DBcB9snr00Nk4GwFQdAOoRmId2mX7Fkphq0A9Q/XuEnxswLwBhE783AOAfLxbswa2pMAEgnvQgNEELVpJU6FUgHkYvXNzCl6PAllAbHEniP4SMZ4zNAMCsrY1QOCw5lHxzJOy8DG7rLiZM9ZNktCR8pAk9AQNbg7hObAVgzn6wI6akEtwMAFeMajzN9QYlfN0JhxrM54cgHhb1s/0JW8tELdb%2bnCw3PksI4YwAwOFNzZAfvgAA76TjiVHYY2AAYYsTAQUgWQ8He8jbd0u1PdWXpXqbMhEBJTv91ThJGLClHuB38v7P1QTOAtKkFy1udH2MGzBsyDNBo9J7sYSewDL7rSHEPMwcANji8Z%2bOzVBr8h0hb%2bnczw/sE10Em2MA9pLqz01aZbUnw7e6EW2J%2b1Us6mcCjWHAldTYWBPAAgfAUyMGhKqwDkIYoZjpirT0ao%2bCx1W%2b8bQoADERPrzaB5P6WYSfH7IfP6Jzsa5/RAmq39NfS9jttYY3Y6k33/pAnnvhz7Jy%2bIQM5CZkd1vOiodQPREGCGHIpSH2l8KhCJupHrCuLPw/gJXknB9kt5bFXX2be33eazwVaoxx%2b3v6iG24sdu0Q5dMNfngCkAY5KHpxsMCL3x2KZsJC0AMxs8kBydcU3wO%2b%2bTT1dAenl%2bXp57WRqJrWNo6hhIkW9r4GpSTrp5iOBKLhyP%2bidoPJ0NqCn261wfdmVoEopocd7E4z%2bPtRvG0jKGeJ4QCADPhxEfftbZc303HE6h0PPwMn9MX4ofYvN3zb5iELoxujd8x7HQqnjPwb1Ll/wHPg3E0mZT6IgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"content":"<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Table of Contents</strong></h2>\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#bulletactor\">BulletActor</a></li>\n<li><a href=\"#playercharacter\">PlayerCharacter</a></li>\n<li><a href=\"#zombiecharacter-setup\">ZombieCharacter Setup</a></li>\n<li><a href=\"#adding-a-stimuli-source-to-the-playercharacter\">Adding a Stimuli Source to the PlayerCharacter</a></li>\n<li><a href=\"#zombieaicontroller-perception\">ZombieAIController Perception</a></li>\n<li><a href=\"#implementing-the-idle-and-roam-states\">Implementing the IDLE and ROAM states</a></li>\n<li><a href=\"#implementing-the-chase-and-attack-states\">Implementing the CHASE and ATTACK states</a></li>\n<li><a href=\"#implementing-the-dead-state\">Implementing the DEAD state</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n<h2 id=\"overview\"><a href=\"#overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Overview</strong></h2>\n<p>In this tutorial we'll be taking a look at how to make a Zombie AI that roams, chases, and attacks the player. Let's take a look at the classes we'll need to make this happen.</p>\n<ul>\n<li><strong>BulletActor</strong> - The BulletActor is the projectile that gets shot from the PlayerCharacter's gun and is used when we go over killing the zombie.</li>\n<li><strong>PlayerCharacter</strong> - The PlayerCharacter is going to be the Character from the Unreal FPS demo that we'll expand on.</li>\n<li><strong>ZombieCharacter</strong> - This is going to be the Character of each individual zombie.</li>\n<li><strong>ZombieAIController</strong> - This is going to be the AIController used to decide the movements and actions of the zombie.</li>\n</ul>\n<p>To start off let's get into the PlayerCharacter.</p>\n<h3 id=\"bulletactor\"><a href=\"#bulletactor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>BulletActor</strong></h3>\n<p>Before we get into the PlayerCharacter, since this will be a first person shooter character, we'll need to create the class for the bullet that gets shot out of the PlayerCharacter's gun. We need to create this first as the PlayerCharacter will have a reference to the BulletActor.</p>\n<p>Let's see what the BulletActor will need:</p>\n<ul>\n<li>Create a <code>UStaticMeshComponent</code> so we can assign the BulletActor a mesh.</li>\n<li>Since the shape of the bullet will be a sphere we need a <code>USphereComponent</code> to act as a sphere collider.</li>\n<li>To make bullet physics easier we'll use a <code>UProjectileMovementComponent</code> to manage the bullet's position after being shot.</li>\n<li>We have to create the method that gets called when the the bullet has made contact with another component.</li>\n</ul>\n<p>So now that we know what we need to accomplish let's go ahead and create a new C++ class with a base parent of Actor and name it BulletActor. I also placed mine in a new folder named Player since it's only used by the PlayerCharacter so it helps me keep the workspace cleaner.</p>\n<p>Now let's define all of the things we discussed above in the BulletActor's header:</p>\n<p><strong>BulletActor.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Actor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"BulletActor.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * The BulletActor is the projectile that's shot out of the PlayerCharacter's gun.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ZOMBIEHORDEAI_API</span> ABulletActor <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AActor\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Sets default values for this actor's properties.</span>\n\t<span class=\"token function\">ABulletActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The static mesh of the BulletActor.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Bullet<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UStaticMeshComponent</span><span class=\"token operator\">*</span> BulletStaticMesh<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The sphere collider of the BulletActor.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Bullet<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">USphereComponent</span><span class=\"token operator\">*</span> BulletSphereCollider<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The projectile movement component of the BulletActor.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Bullet<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UProjectileMovementComponent</span><span class=\"token operator\">*</span> BulletMovement<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">/**\n\t * Called when the BulletActor hits another component.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">OnBulletHitComponent</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> HitComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> FVector NormalImpulse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> Hit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And now in the cpp we create the sphere collider and movement components and set their default values. We also set the <code>OnBulletHitComponent</code> method to respond whenever the BulletActor hits another component.</p>\n<p><strong>BulletActor.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"BulletActor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/SphereComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/StaticMeshComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/ProjectileMovementComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets the default values of the BulletActor.\n */</span>\nABulletActor<span class=\"token operator\">::</span><span class=\"token function\">ABulletActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Load the BulletActor's mesh.</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UStaticMesh<span class=\"token operator\">></span> <span class=\"token function\">BulletStaticMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StaticMesh'/Game/FirstPerson/Meshes/FirstPersonProjectileMesh.FirstPersonProjectileMesh'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the sphere collider, set its radius, set it to have a collision profile</span>\n\t<span class=\"token comment\">// of Projectile and lastly add the `OnBulletHitComponent` method to respond to the</span>\n\t<span class=\"token comment\">// sphere collider making contact with another component.</span>\n\tBulletSphereCollider <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>USphereComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BulletSphereCollider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBulletSphereCollider<span class=\"token operator\">-></span><span class=\"token function\">InitSphereRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">20.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBulletSphereCollider<span class=\"token operator\">-></span><span class=\"token function\">SetCollisionProfileName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Projectile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBulletSphereCollider<span class=\"token operator\">-></span>OnComponentHit<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ABulletActor<span class=\"token operator\">::</span>OnBulletHitComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tRootComponent <span class=\"token operator\">=</span> BulletSphereCollider<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the bullet mesh, set it to the `BulletStaticMesh` loaded above and attach</span>\n\t<span class=\"token comment\">// it to the `BulletSphereCollider`.</span>\n\tBulletStaticMesh <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BulletStaticMesh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBulletStaticMesh<span class=\"token operator\">-></span><span class=\"token function\">SetStaticMesh</span><span class=\"token punctuation\">(</span>BulletStaticMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBulletStaticMesh<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeScale3D</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBulletStaticMesh<span class=\"token operator\">-></span><span class=\"token function\">UnWeldFromParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBulletSphereCollider<span class=\"token operator\">-></span><span class=\"token function\">SetCollisionProfileName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NoCollision\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBulletStaticMesh<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the ProjectileMovementComponent and set its speeds and default properties.</span>\n\tBulletMovement <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UProjectileMovementComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BulletMovement\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBulletMovement<span class=\"token operator\">-></span>UpdatedComponent <span class=\"token operator\">=</span> BulletSphereCollider<span class=\"token punctuation\">;</span>\n\tBulletMovement<span class=\"token operator\">-></span>InitialSpeed <span class=\"token operator\">=</span> <span class=\"token number\">3000.f</span><span class=\"token punctuation\">;</span>\n\tBulletMovement<span class=\"token operator\">-></span>MaxSpeed <span class=\"token operator\">=</span> <span class=\"token number\">3000.f</span><span class=\"token punctuation\">;</span>\n\tBulletMovement<span class=\"token operator\">-></span>bRotationFollowsVelocity <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tBulletMovement<span class=\"token operator\">-></span>bShouldBounce <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the BulletActor to die after 3 seconds.</span>\n\tInitialLifeSpan <span class=\"token operator\">=</span> <span class=\"token number\">3.f</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the BulletActor hits another component.\n */</span>\n<span class=\"token keyword\">void</span> ABulletActor<span class=\"token operator\">::</span><span class=\"token function\">OnBulletHitComponent</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> HitComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> FVector NormalImpulse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> Hit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// We want to return early if anything is null as it could cause a crash otherwise.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherComp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>OtherComp<span class=\"token operator\">-></span><span class=\"token function\">IsSimulatingPhysics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// If the component that the BulletActor hit is using physics then we want</span>\n\t\t<span class=\"token comment\">// to add an impulse force where the BulletActor hit to move them back.</span>\n\t\tOtherComp<span class=\"token operator\">-></span><span class=\"token function\">AddImpulseAtLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetVelocity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100.f</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now that we've got the BulletActor squared away we can move on to the PlayerCharacter.</p>\n<h3 id=\"playercharacter\"><a href=\"#playercharacter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>PlayerCharacter</strong></h3>\n<p>The PlayerCharacter is just a standard first person character and uses the model and animations from Unreal's first person demo but we'll go over it quickly so that we're all on the same page when we expand on it later. If you already have a PlayerCharacter you want to use feel free to skip this part, otherwise you can check out the <a href=\"https://github.com/robertcorponoi/unreal-zombie-ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> for an already made one to use or just follow the PlayerCharacter creation guide below.</p>\n<p>So let's see what our PlayerCharacter will need:</p>\n<ul>\n<li>A <code>USkeletalMeshComponent</code> for the PlayerCharacter's body/arms mesh.</li>\n<li>A <code>USkeletalMeshComponent</code> for the PlayerCharacter's gun mesh.</li>\n<li>A <code>USceneComponent</code> that keeps track of where the gun's bullets should be shot from.</li>\n<li>A <code>UCameraComponent</code> for the first person camera.</li>\n<li>A <code>UAnimMontage</code> for the gun fire animation that's populated in the constructor (I got this and the models from the Unreal first person demo project so you can either get the assets from there or from the <a href=\"https://github.com/robertcorponoi/unreal-zombie-ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a>).</li>\n<li>We need methods to handle when the \"Fire\" input action is pressed and for when the movement input axis keys are used.</li>\n</ul>\n<p>So let's go ahead and create a new C++ class with a base parent of Character, name it PlayerCharacter, and put it in the Player folder if you created that earlier.</p>\n<p>Now let's take a look at how we can implement the above in the header:</p>\n<p><strong>PlayerCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Character.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PlayerCharacter.generated.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">USkeletalMeshComponent</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * The PlayerCharacter is the main player of the game.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ZOMBIEHORDEAI_API</span> APlayerCharacter <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ACharacter\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Sets default values for this character's properties.</span>\n\t<span class=\"token function\">APlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The skeletal mesh of the PlayerCharacter's body.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleDefaultsOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Player<span class=\"token punctuation\">)</span>\n\tUSkeletalMeshComponent<span class=\"token operator\">*</span> PlayerSkeletalMesh<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The skeletal mesh of the PlayerCharacter's gun.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleDefaultsOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Player<span class=\"token punctuation\">)</span>\n\tUSkeletalMeshComponent<span class=\"token operator\">*</span> GunSkeletalMesh<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The location on the gun where the BulletActors should spawn from.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleDefaultsOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Player<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">USceneComponent</span><span class=\"token operator\">*</span> BulletSpawnLocation<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The first-person camera of the PlayerCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Player<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UCameraComponent</span><span class=\"token operator\">*</span> PlayerCamera<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The gun's offset from the PlayerCharacter's location.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Player<span class=\"token punctuation\">)</span>\n\tFVector GunOffset<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The AnimMontage to play when the gun is fired. This is set automatically</span>\n\t<span class=\"token comment\">// in the constructor.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Player<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UAnimMontage</span><span class=\"token operator\">*</span> GunFireAnimation<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/**\n\t * Called to bind functionality to input.\n\t */</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UInputComponent</span><span class=\"token operator\">*</span> PlayerInputComponent<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called when the MoveForwardBackward input axis is used.\n\t */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">MoveForwardBackward</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called when the MoveLeftRight input axis is used.\n\t */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">MoveLeftRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called when the \"Fire\" input action button is pressed.\n\t */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Fire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the cpp we're going to:</p>\n<ul>\n<li>Load our PlayerCharacter body and gun meshes and also the gun animation blueprint and montage. Again these can be found in the Unreal fps demo or the <a href=\"https://github.com/robertcorponoi/unreal-zombie-ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a>.</li>\n<li>Create the camera, position it, and attach it to the default capsule collider.</li>\n<li>Create the body mesh, set it to be the skeletal mesh we loaded above, set some options such as having it not cast shadows, and attach it to the camera created above.</li>\n<li>Create the gun mesh, set it to the skeletal mesh we loaded above, and set it to have some of the same settings as the body mesh. We also attach the gun mesh to the body mesh at the GripPoint.</li>\n<li>Set the <code>GunFireAnimation</code> variable to the animation asset loaded during the first step.</li>\n<li>In the <code>SetupPlayerInputComponent</code> method we need to register our methods to their corresponding inputs.</li>\n<li>We need to create the <code>MoveForwardBackward</code>, <code>MoveLeftRight</code>, and <code>Fire</code> methods to handle what happens when the inputs get pressed.</li>\n<li>The movement methods are pretty self explanatory as they just use <code>AddMovementInput</code> and add it to that direction. The <code>Fire</code> method spawns a BulletActor at the end of the gun's muzzle and plays the shooting animation for the gun.</li>\n</ul>\n<p>There's quite a lot going on in the constructor but really it's not all necessary and its just for a cleaner looking demo:</p>\n<p><strong>PlayerCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PlayerCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"BulletActor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Kismet/GameplayStatics.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Animation/AnimInstance.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Camera/CameraComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/CapsuleComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/SkeletalMeshComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/InputComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/InputSettings.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/CharacterMovementComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets the default value from the PlayerCharacter\n */</span>\nAPlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">APlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Load the player and gun skeletal meshes.</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>USkeletalMesh<span class=\"token operator\">></span> <span class=\"token function\">PlayerSkeletalMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SkeletalMesh'/Game/FirstPerson/Character/Mesh/SK_Mannequin_Arms.SK_Mannequin_Arms'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>USkeletalMesh<span class=\"token operator\">></span> <span class=\"token function\">GunSkeletalMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SkeletalMesh'/Game/FirstPerson/FPWeapon/Mesh/SK_FPGun.SK_FPGun'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Load the gun fire animation.</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UAnimBlueprint<span class=\"token operator\">></span> <span class=\"token function\">GunAnimBlueprintAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AnimBlueprint'/Game/FirstPerson/Animations/FirstPerson_AnimBP.FirstPerson_AnimBP'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UAnimMontage<span class=\"token operator\">></span> <span class=\"token function\">GunFireAnimationAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AnimMontage'/Game/FirstPerson/Animations/FirstPersonFire_Montage.FirstPersonFire_Montage'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the first person camera, set its relative location and attach it to the</span>\n\t<span class=\"token comment\">// capsule component.</span>\n\tPlayerCamera <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UCameraComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PlayerCamera\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerCamera<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">40.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerCamera<span class=\"token operator\">-></span>bUsePawnControlRotation <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tPlayerCamera<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCapsuleComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the player mesh component and set up its position and defaults and</span>\n\t<span class=\"token comment\">// lastly attach it to the PlayerCamera.</span>\n\tPlayerSkeletalMesh <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>USkeletalMeshComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PlayerSkeletalMesh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetSkeletalMesh</span><span class=\"token punctuation\">(</span>PlayerSkeletalMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocationAndRotation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4.5f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">155.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FRotator</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">20.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetOnlyOwnerSee</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetAnimInstanceClass</span><span class=\"token punctuation\">(</span>GunAnimBlueprintAsset<span class=\"token punctuation\">.</span>Object<span class=\"token operator\">-></span>GeneratedClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span>CastShadow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span>bCastDynamicShadow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span>CanCharacterStepUpOn <span class=\"token operator\">=</span> ECB_Yes<span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>PlayerCamera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetHiddenInGame</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the gun mesh component and set up its defaults and lastly attach it to</span>\n\t<span class=\"token comment\">// the RootComponent and the grip point of the PlayerSkeletalMesh.</span>\n\tGunSkeletalMesh <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>USkeletalMeshComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GunSkeletalMesh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tGunSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetSkeletalMesh</span><span class=\"token punctuation\">(</span>GunSkeletalMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tGunSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetOnlyOwnerSee</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tGunSkeletalMesh<span class=\"token operator\">-></span>CastShadow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tGunSkeletalMesh<span class=\"token operator\">-></span>bCastDynamicShadow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tGunSkeletalMesh<span class=\"token operator\">-></span>CanCharacterStepUpOn <span class=\"token operator\">=</span> ECB_Yes<span class=\"token punctuation\">;</span>\n\tGunSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetBoundsScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tGunSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>PlayerSkeletalMesh<span class=\"token punctuation\">,</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GripPoint\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tGunSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tGunSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">AttachToComponent</span><span class=\"token punctuation\">(</span>PlayerSkeletalMesh<span class=\"token punctuation\">,</span> <span class=\"token function\">FAttachmentTransformRules</span><span class=\"token punctuation\">(</span>EAttachmentRule<span class=\"token operator\">::</span>SnapToTarget<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GripPoint\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the gun fire animation to the montage loaded above.</span>\n\tGunFireAnimation <span class=\"token operator\">=</span> GunFireAnimationAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the size of the PlayerCharacter's capsule collider.</span>\n\t<span class=\"token function\">GetCapsuleComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">InitCapsuleSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">55.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetCapsuleComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>CanCharacterStepUpOn <span class=\"token operator\">=</span> ECB_Yes<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the default offset for where the BulletActors should spawn.</span>\n\tGunOffset <span class=\"token operator\">=</span> <span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the PlayerCharacter to be the default player of the game.</span>\n\tAutoPossessPlayer <span class=\"token operator\">=</span> EAutoReceiveInput<span class=\"token operator\">::</span>Player0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to bind functionality to input.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span>UInputComponent<span class=\"token operator\">*</span> PlayerInputComponent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>PlayerInputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Bind the forward, backward, left, and right movement input axis to the</span>\n\t<span class=\"token comment\">// `MoveForwardBackward` and `MoveLeftRight` methods.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MoveForwardBackward\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>MoveForwardBackward<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MoveLeftRight\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>MoveLeftRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Bind the mouse x and y axis to controlling the yaw and pitch.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LookUpDown\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APawn<span class=\"token operator\">::</span>AddControllerYawInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LookLeftRight\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APawn<span class=\"token operator\">::</span>AddControllerPitchInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Bind the jump input action to the default Character jump logic.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jump\"</span><span class=\"token punctuation\">,</span> IE_Pressed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ACharacter<span class=\"token operator\">::</span>Jump<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jump\"</span><span class=\"token punctuation\">,</span> IE_Released<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ACharacter<span class=\"token operator\">::</span>StopJumping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Bind the fire input action to the `Fire` method.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fire\"</span><span class=\"token punctuation\">,</span> IE_Pressed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>Fire<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the MoveForwardBackward input axis is used.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">MoveForwardBackward</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Value <span class=\"token operator\">!=</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span> <span class=\"token function\">AddMovementInput</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetActorForwardVector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the MoveLeftRight input axis is used.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">MoveLeftRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Value <span class=\"token operator\">!=</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span> <span class=\"token function\">AddMovementInput</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetActorRightVector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the Fire input action is pressed.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">Fire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if `GetWorld()` returns a nullptr.</span>\n\tUWorld<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> World <span class=\"token operator\">=</span> <span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>World <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> FRotator SpawnRotation <span class=\"token operator\">=</span> <span class=\"token function\">GetControlRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token comment\">// Since the `BulletSpawnLocation` is in camera space, we have to transform it to</span>\n\t<span class=\"token comment\">// world space before offsetting it from the character location to find the final</span>\n\t<span class=\"token comment\">// bullet spawn location.</span>\n\t<span class=\"token keyword\">const</span> FVector SpawnLocation <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>BulletSpawnLocation <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> BulletSpawnLocation<span class=\"token operator\">-></span><span class=\"token function\">GetComponentLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> SpawnRotation<span class=\"token punctuation\">.</span><span class=\"token function\">RotateVector</span><span class=\"token punctuation\">(</span>GunOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set Spawn Collision Handling Override.</span>\n\tFActorSpawnParameters ActorSpawnParams<span class=\"token punctuation\">;</span>\n\tActorSpawnParams<span class=\"token punctuation\">.</span>SpawnCollisionHandlingOverride <span class=\"token operator\">=</span> ESpawnActorCollisionHandlingMethod<span class=\"token operator\">::</span>AdjustIfPossibleButDontSpawnIfColliding<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Spawn the BulletActor at the SpawnLocation.</span>\n\tWorld<span class=\"token operator\">-></span>SpawnActor<span class=\"token operator\">&lt;</span>ABulletActor<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ABulletActor<span class=\"token operator\">::</span><span class=\"token function\">StaticClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SpawnLocation<span class=\"token punctuation\">,</span> SpawnRotation<span class=\"token punctuation\">,</span> ActorSpawnParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Get the animation object for the PlayerCharacter's body mesh and play the fire animation.</span>\n\tUAnimInstance<span class=\"token operator\">*</span> AnimInstance <span class=\"token operator\">=</span> PlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">GetAnimInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AnimInstance <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\tAnimInstance<span class=\"token operator\">-></span><span class=\"token function\">Montage_Play</span><span class=\"token punctuation\">(</span>GunFireAnimation<span class=\"token punctuation\">,</span> <span class=\"token number\">1.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now that we're on the same page with the PlayerCharacter, let's move on to creating the ZombieCharacter.</p>\n<h2 id=\"zombiecharacter-setup\"><a href=\"#zombiecharacter-setup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>ZombieCharacter Setup</strong></h2>\n<p>Before we get into the code I'll go over the assets I'm using from Mixamo real quick.</p>\n<ul>\n<li>Zombie Jill Character</li>\n<li>Zombie Idle Animation</li>\n<li>Zombie Dying Animation</li>\n<li>Zombie Attack Animation</li>\n<li>Zombie Walking Animation</li>\n<li>Zombie Run Animation</li>\n</ul>\n<p>Also make sure that the animations are set to be in place, with skin, and 60 frames per second.</p>\n<p>In my Unreal project I made a folder named Models and another one named Animations and I placed the Zombie Character in a sub-folder in the models folder and the animations in the Animations folder.</p>\n<p>So now we have to do is define and create the initial setup of the ZombieCharacter which is:</p>\n<ul>\n<li>A <code>USkeletalMeshComponent</code> for assigning the zombie the skeletal mesh we imported above.</li>\n<li>A boolean that contains the value for whether the ZombieCharacter is sprinting or not. This will be read by the AnimInstance to decide whether the Sprint animation should be played or not.</li>\n<li>We need to load the Zombie skeletal mesh in the constructor and assign it to the component defined above.</li>\n</ul>\n<p>We also want to implement states. States are going to be used by the AIController when we create it later to guide the movement and actions of the ZombieCharacter. Let's determine what states we need:</p>\n<ul>\n<li>We want an IDLE state in which the ZombieCharacter is just standing around as most zombies do.</li>\n<li>We want a ROAM state in which the ZombieCharacter just walks around with no real purpose.</li>\n<li>We want a CHASE state for when the ZombieCharacter is chasing the PlayerCharacter attempting to attack them.</li>\n<li>We want an ATTACK state for when the ZombieCharacter is attempting to attack the PlayerCharacter.</li>\n<li>We want a DEAD state for when the PlayerCharacter has killed the ZombieCharacter.</li>\n</ul>\n<p>So glancing at the above ZombieCharacters are either going to be in an IDLE or ROAMING state right when they spawn. Then, when the ZombieCharacter spots the PlayerCharacter, they will enter the CHASE state and if they manage to catch up to the PlayerCharacter they will enter the ATTACK state. At this point they will keep switching between CHASE and ATTACK depending on if the PlayerCharacter is attempting to run away or not. Finally this ends with the ZombieCharacter either back in the IDLE/ROAM state if they've lost sight of the PlayerCharacter or in the DEAD state if the PlayerCharacter has killed them.\nSo let's go ahead and implement this.</p>\n<p>Let's go ahead now and add the components discussed above and also the states we just went over:</p>\n<p><strong>ZombieCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Character.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ZombieCharacter.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * The states that the ZombieCharacter can be in.\n */</span>\n<span class=\"token function\">UENUM</span><span class=\"token punctuation\">(</span>BlueprintType<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">class</span> ZombieStates <span class=\"token operator\">:</span> uint8 <span class=\"token punctuation\">{</span>\n\tIDLE\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"IDLE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tROAM\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"ROAM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tCHASE\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"CHASE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tATTACK\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"ATTACK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tDEAD\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"DEAD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * A zombie that can roam, chase, and attack.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ZOMBIEHORDE_API</span> AZombieCharacter <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ACharacter\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Sets default values for this character's properties.</span>\n\t<span class=\"token function\">AZombieCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The skeletal mesh of the ZombieCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleDefaultsOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Mesh<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">USkeletalMeshComponent</span><span class=\"token operator\">*</span> ZombieSkeletalMesh<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The current state of the ZombieCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Zombie<span class=\"token punctuation\">)</span>\n\tZombieStates State <span class=\"token operator\">=</span> ZombieStates<span class=\"token operator\">::</span>IDLE<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The previous state of the ZombieCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Zombie<span class=\"token punctuation\">)</span>\n\tZombieStates PreviousState <span class=\"token operator\">=</span> State<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Indicates whether the ZombieCharacter is sprinting or not.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">bool</span> bIsSprinting <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>ZombieCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ZombieCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/SkeletalMeshComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets the default values for the ZombieCharacter.\n */</span>\nAZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">AZombieCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Load the assets needed for the ZombieCharacter.</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>USkeletalMesh<span class=\"token operator\">></span><span class=\"token function\">ZombieSkeletalMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SkeletalMesh'/Game/Models/ZombieJill/jill.jill'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the ZombieCharacter's skeletal mesh and set it to be the mesh loaded above.</span>\n\tZombieSkeletalMesh <span class=\"token operator\">=</span> <span class=\"token function\">GetMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetSkeletalMesh</span><span class=\"token punctuation\">(</span>ZombieSkeletalMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">90.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Make sure that the above compiles and then let's move on.</p>\n<p>Now that we have the basics of the ZombieCharacter set up, we can create the AnimInstance class for it. We want to manage the animation states in C++ and then we'll use those in an animation blueprint.</p>\n<p>So let's get started and create the AnimInstance class by creating a new C++ class with a base parent of AnimInstance and name it ZombieAnimInstance. I also put mine in a sub-folder named Zombie.</p>\n<p>Let's see what we'll need in the ZombieAnimInstance:</p>\n<ul>\n<li>We need booleans to know if the ZombieCharacter is moving roaming, sprinting, attacking, or dead. These will be used to show the various animations.</li>\n<li>We need a method that will be called by the animation blueprint to update these booleans.</li>\n</ul>\n<p>Let's get into the header file:</p>\n<p><strong>ZombieAnimInstance.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Animation/AnimInstance.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ZombieAnimInstance.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Manages the booleans needed by the animation blueprint to decide what\n * animation needs to be run.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ZOMBIEAI_API</span> UZombieAnimInstance <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> UAnimInstance\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Indicates whether the ZombieCharacter is roaming or not.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">bool</span> bIsRoaming<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Indicates whether the ZombieCharacter is chasing or not.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">bool</span> bIsChasing<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Indicates whether the ZombieCharacter is attacking or not.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">bool</span> bIsAttacking<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Indicates whether the ZombieCharacter is dying or not.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">bool</span> bIsDying<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Used by the animation blueprint to update the animation properties above</span>\n\t<span class=\"token comment\">// and decide what animations to play.</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UpdateAnimationProperties\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">UpdateAnimationProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>ZombieAnimInstance.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ZombieAnimInstance.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ZombieCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../Player/PlayerCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Math/Rotator.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/BoxComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/CapsuleComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/CharacterMovementComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Used by the animation blueprint to update the animation properties above\n * and decide what animations to play.\n */</span>\n<span class=\"token keyword\">void</span> UZombieAnimInstance<span class=\"token operator\">::</span><span class=\"token function\">UpdateAnimationProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Try to get the Pawn being animated and return if a nullptr.</span>\n\tAPawn<span class=\"token operator\">*</span> ZombiePawn <span class=\"token operator\">=</span> <span class=\"token function\">TryGetPawnOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombiePawn <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Try to cast the Pawn to our ZombieCharacter since that's the only</span>\n\t<span class=\"token comment\">// thing we want to animate.</span>\n\tAZombieCharacter<span class=\"token operator\">*</span> ZombieCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AZombieCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ZombiePawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the variables that are dependent on states.</span>\n\tbIsRoaming <span class=\"token operator\">=</span> ZombieCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> ZombieStates<span class=\"token operator\">::</span>ROAM<span class=\"token punctuation\">;</span>\n\tbIsChasing <span class=\"token operator\">=</span> ZombieCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> ZombieStates<span class=\"token operator\">::</span>CHASE<span class=\"token punctuation\">;</span>\n\tbIsAttacking <span class=\"token operator\">=</span> ZombieCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> ZombieStates<span class=\"token operator\">::</span>ATTACK<span class=\"token punctuation\">;</span>\n\tbIsDying <span class=\"token operator\">=</span> ZombieCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> ZombieStates<span class=\"token operator\">::</span>DEAD<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ok so now we need to go back to Unreal and create the animation blueprint based off of the ZombieAnimInstance created above. So in your blueprints folder you have to right-click, select to create a new Animation Blueprint, and in the Create Animation Blueprint dialogue you need to make sure it has a parent class of ZombieAnimInstance and a target skeleton of zombie.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 412 741' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-da14dbbc1f0a9430cfb86a58d5eb4331'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-da14dbbc1f0a9430cfb86a58d5eb4331)' width='412' height='741' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABzCAYAAAAohwTdAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAUCUlEQVR42u2d95NVxRLH908QzAooaXMiSJSwsAmWHASJi%2bScdpddcs5JQEFAwELqUTwteUUVPhDz01elYkKr0PJ/6Xc%2bc/Z7mb3cXe7C7r3Lu/7QNefMzJkz09Pd093Tc07akUPHbMP6jbaups5qqmqtprrOatetD%2b7XW61g3YYI1HnXsaCudmMk9cEvi76%2bD2oa3q%2br70NNTdivmmpBnVVX1UXu3XVVmBdCrcunvbBurXseWLO62k6fOm9pnTt3toKCfOvbt4/1qYfCwkLr0bOH9YxAT%2bvVq2ckddC7173rSFkv69Gj0AoDyM/Pc1BQUGD5QfsFhQXu3pW763zL4z5on3vqufygLs/nuWfzXV8ArnlP76j3htCrHhre06fy8nIbN26cjR071iZMGG%2bjRlUE6QQbMKC/FRUNt7SsrCw7f/68vf/%2b%2b3bixAlXceTIkVZRURGBURWjggebhtGjR9uIESNs9uzZNn/%2bfFu2bJmDlStX2qJFi23u3LnuetasWbZ8%2bXJbsmSpSxcvXhyUL7IFCxbYvHnzbN26dUHZElu4cKErI2/p0qW2YsUKmzRxUtifmH0Y3eCeevTp9ddfd2Oqq6uzDz/80CZOnGhTp0x15WVlIy0tPT3dvezWrVt27do1e/XVVx3mevfuHYFXXnnFgX8dDX369Almt4d76aRJk9yAV61a5RDCoF977TU3YDrHoEAOA6UuA6Xe%2bPHjHSLIB0DY5MmTXf9mzJgRzNoA1wfe1Vg/1E/1lWf69u1rQ4YMseLiYhs4cKD169fPUVRpyQhLe%2bmllywnJ8cOHDhgVVVVBkW8%2bOKL1qlTpwhQ5%2bWXX24AsE6saz1DG88//7xLX3jhBevYsaN16NDBpeT5%2bVyrjGe4Jq9r166uDvcA/dC7SP33RvcDoL7Afw/3Tz/9tJWAAB5i5uCz7t27O14UBsEcFAEmqePzltJoUB21cY8/74dY5coj9dt70HsfBH4bjAckFBeXhxQAX8yZM8fxGmQKD0OSkN3UqVMducKnAPJh6NChNmzYsMcS6HtJSUlA6ZkhAqAAZnn48OGOR0pLS23w4MGOd6hMGfllZWXuQfjPn%2bHHCSQTGFNGRkaIAPgM8mapQFLW1tbaxo0bHaxfv96B8oENGzY8lsB46P8bb7zhhDDs7mRAt27d3Jq8Zs0a%2b/HHH%2b2zzz6zr776yr788ksHn3/%2buf388892584d%2b/XXX%2b2XX3557ID%2b//HHH3b58mXbvXu3Y/Ps7GwrLim/h4DVq1e7yiDg008/denXX39t33zzjUOMENAUtGUE/Pnnn7Z161bbtm2bg8zMDCspHRGyADw9ZswYhwQEHtTAkojywVoMcA3m/NQHnl27dm2bBgQ9/USvYOJLS0eGCGC5A%2bCPM2fOOFURYTdt2jSHGO5J0apQZFBqUHikdVGGghGPkpJMQACS0leEYIQCGHz//v2doID8Z86c6ZY7SAWyqampcbMM/1CH/E2bNjnhgoDcsWOHE6JI16KiIrd6xAtoaIkCVjdSVryMjPSQArp06eKwQmeYPeQBKZVJwRaYA0GokKSDBg1yoGsGzjX1qANwLbWTax/UJinvoQ3SRADvQh8AAY4CQIAGCgu8%2beabTv%2bmMkoQRoMMJHgIBYkGyIc10BtgB5Qp7qX78wyWmNqAVdD1MZgA8igHeYkavBBQVDTsHgVEswBLICxAJ3ft2uWA/Orqatu5c2eEDTZv3mx79%2b51LECdffv2OUsOmwJgzYVVuEbwwEqHDh2yPXv2OCFKO2ieUIjIM9EUcB8LUIEZgTzplHha%2bVzTAJoh1%2bSJEhiIVE3VF5/rpTxHSttolWov4RQQYYGR91iADiP1t2zZ4kiVe8gYEod8IVfIfMqUKa7jUAj5DAg1GVInlR0OMEhS8mkH4cM1CIDlNPhEy4CiaAqABZhBBv/9999bZWWlGyAkDtkj7VlHjxw5Yvv373f3sABkjKoMqR8%2bfNjlUf/o0aOOJaRSQ/bci41oGwT7pJ8oJMSUAbAAnRHJwgLMMrPLLIq0mUHymU2RM1SC0KTczxfIkJKxRR6D9yGRlBBTBsACFMDLaH2QLR2j4zIfeYh8BkyZkMM1Mwp70IbWdp4lX4gV6fOMECkkkZ9QChgWYxUAkOa///678wfQYcgd6Q2ZwwKQMmyBYgQbUB%2byRvoj0akny4syGR5aMWRNwmq0hcrNNciD6pK6Cmh2mGEElEgdDQ/BBvkiHFF75WVFCKIes%2b4zq%2bRTDkAt6A5SmamvfAZMW%2bRDdTybKH2gURagAwxg69btTqJTmYFLA4ScQQJ1RTHSHyTV5YBkQKwaPO9rfgKekeZIqsEnRQbAAtIE9%2b0/aPPmLwjIc59Nnz7dkS86P5IbkoaE0fu1Koh8uYf8IWlIHYWH%2bjwrncLvRCzFJ5EyICYCmIXZsysDM7ja5s6d51gAYIAgAxKGRSB5XNlQCWRMSjnUA2ApkgdpRys6siF8qZ8MRcghID0GC0Cyhw8fDQY2wVEEpCwyl%2bFD6htK8horXzpFuN4WRUhdS6tWikQP/IEIYDCQ/tx5812KsMIpIskNO5CKBQSYyawCkD5swCYHKwdGFXaCnqEOjghYA0Ur0TZAHEJwYNDBRcGyVhMsacscQmQBQuKQNR1niRRbYDTBGsonD1WZVYFrVGt2iLQFxipAe1CaTOGkI8CXASx7zH5FxShXmXttJPhbTr4hwyxSpnpym1MG2bPhoo0J2IFUa35SZUBGDBbYsTMwUZctD8h0t1v2tD%2bHsgP5kkLSzCbkDmkzo6jCukZJQvHBPoCFMIUhf/YJ2fdj5YBC2gYLjGi4DK5cucqxACuBVGM0PO0UMXAGgnyA1OUzhAWoRx6I0uYm/ndkBHKE51g9yGe1aAssEPEIQboUQtYMVLY%2bsxS9U8wmivIhZ7GH9hTJp46APF8R4lnfFZYsFkhPjzKH6RykeuPGDUfK2ALMnsgeYQZ5QwUoQdpH9Pf0YRfIHCpgHxEXuwwrGUmJdoTGcow2cIrKHIYNGAzLFzo6swQiRM4ggIExKFhCm6hsoErKa7%2bAwVOXaxBJ29Ilkg3SUSIUwOYoWGHw8DDLGksYg0dYwd%2bAnJ3kc881y6DKVSf6GkcrKc8lG9Q3JpPdYScDCGYINcDDbvavXr3qPD/bt293sw0LhGEuixwLMMuQP2SPlA/DXZZEJL6AcmwDVgTaxjl68ODBpILfh9ycnHBvkPgAEMDgKSBeiMGzXGkFgK9JQYJmH6ku1mCWKeOeulAGyIOqkB%2b4yGgbI6mtQG5uPQIIJUEqItgYDMYOg2WAzCSz6IP22VTGtco0%2b345afQ%2bYrKBsWVnZ4Xb4whBlioZLXKLa4fHt/0fBtROWwGF/TRYBlkF5P/3bfb/R/CXwcjmqFxiyTJRk24LpCQC0v9GwL2tsZRmgVSVAempzgLp6VHmcGoKwSYQEGvD8kH2eyJ9%2b43lN1XWqEdICIilBLVU51p68LH6F29/G2UBfAAKbBJo60rBUMqLTls74MGf3TDcrbf1qQ95iw7ikjofHbilsTHWBpqgPL04N%2bS6ZocHw0gbnliA1FFkOWXUwXegQw3sHbb2JieDqKgYaTt377ONm7e5IzBYqPgydDqE/mCRapeKe66xevFL4qXqrkBJKAAEQBY0RGWcmNj3cnsxSBrAU0SZIkkxf7H28Bdg/rIhCsb9LbCWBO08zZg%2bzU6f%2b4cdP3khGPhkm1t/AgUrlBRnLl5reafI55qJ0yQz8Q18gn6Ak/hJfn/KMCCaCj7UXkFzgiQfFsKAraFW5K4H3SeoFaBBf9RHbdUxQYyHWOHSsnoEcEwGb647LeZ5dAU6uRUr796proL78loLeH9BQcM%2b%2bWWx%2bqN8eao7deoYIGZY6BN88skn7dlnn20AzzzzTAT8PF0/99xzjy1wLql9%2b3aWm1sQeoTAiIKjFNAgFoD0dXpEpCRp%2bqjOkkSDArn79etv3bp1teycvBABDBYpzk6PzushVZGYCDyd40PYUQcgNkDu7rbm9YkGf3tfMo2TchEEMMtIT5ybBDgxYNzaODhBhg4watMDnyH%2bQ7m%2bSdsqIPlZEpk0xSeCAJyimVk5lgY/4y7%2b4YcfIidFOCpDzLBOjXBshlR5lH/33XfumbYMt2/fdoGfeLzxBLPEE/lGhBqaYGZWtqVxgPCtt96y3377zT7%2b%2bGO7efOmG6AGzJGZL774wiGB06UASOAIDSF1PEfa1oB%2bcUyGfqMDnDp1ylHCJ5984sbJmaGMzCxL4zQlJH7p0iV3WuTs2bP27rvvRlJBU2XxAs%2bdPn060ta5c%2bcaAGUP23asd124cMFtyqCsHTt2zLEwChx7FRziTk/PDFVh1keEhNzYfhrt3o5VFq8EZvVAQZE%2br51krdvSJFtS8msFk22gE7HoPhmZ2fcCJOQWbw1XtDqgMBuCKdh%2bU5SpYo0QWtRRp1vKDS7p7x%2bZCVkg%2b35/QGvp8GBfJ0rgRWIPWXHYpWEbDjLF5mB5VcRZa/WHyQYBmT4CfDsgXmhqxmPNhCLKZaL6kaPcU/aws9y8cPkoBMACmLIKadcZYgwcUgDehUcB1lMiyKI/tCDgeZ0LigYdtIgFjT2j53T2yM%2bnDzqHpP7pgIbGAGhcjJH8nJxsy8rODU%2bOIhAAkME9gI3AWingrG1ToDqkSFuoivb8Z/22YrXZ2HvIz83NdSYs/aLdxurFA5mZmdY5UABzc/PDVQC1sDLQmOYHHYdPAfhRHzJQGg9Ql6N3aJh8/CDe5xprC%2bOFTtMnnDMK2/U/xNBc4FmswRwQwGw7DBMwMKzIzZxi%2baKtQFlSANfk6d6Hp556qkUtRtpk1hSCD4JBrt%2bX5oC%2bXJGVHajC3QLSwT9W2Kev9R40xLrUkz5kxkuhDtZoZzwEgkMswtHTvLy8%2b0ha5TzbUkDbvB9q1Wc0RPYP8y7G0ZXxZdUjoCAwDKoOHLXzt%2b/amMlTbPKkibZl61bnY1PYPOu0jCBcZQgaXE1oVliJOngta1LemEc9NqvwPd6F3sCyKdeXYhL1rnjbC63BQA/ICFThrgEGC/PzbH7NBtt/9aaNChBQHkjJysrQMYoBAekhcUGIgqcUI6wQGfJRYijD8tKBKHlj/SVP3ufmrN2KO5b1qXcxQc3VGUC%2bU4QiCMjLtSWbttnBj/5tJSOCZaW8zA2eWYbn8ASTci/gHkyy7MgbjLNRZwfJZ2boJPn4FiRgtYTGo3mqDv4J/7Q6oOVZOkxzKSAdBMACucESuGTLLjv13ztWMXmqjR87xqmrIAGtjaApHCOwAmSo2B/IEVUWCkBCc08dfW8AROiEOd5knoV9IGG8tfHED0ph4llOoPA%2b2uI9vI93yUMVb5wgk0WYnFOEECjDhg6x2j0H7OA/r9nchYts1swZkfhfgFkU%2bUGKkJ2iwhQqT2eoB%2bB61ldpFF8IIskHpA7TTrwg9lOUGm3gpKFfzWmH/vMsRpFjgQ4dOtqcoMGz/7puR278x46ePGVVwQwjZBBmPECnFenNwCFHvVjhc3SOwxA4HhSTh/MhVnyg8uINaaO%2bEAa1yVuFECSlvDltHT9%2bPNAOi4PVJcPSWA9nTp9mxy9dsb0f3bB9x07YimVLg8EvcWSmlzBIfzVQHrMsnyEh8nhbdOqcc4O6flRQaK7eq28b8W6dao%2bnHeqChHBvoJ4F4KExY8fZ6MASG6kPqNV/IE1n/aSEAH6eX8/Xy1sa6FOs96pfzWmLZ1CmstAD9BEVt6HoLVHRX32Qu7yxMr%2b8NaCxdzb3veFplSFOkes/YNCjmcOPf4RIiscIFRePSO0YoeLhJamJAHmEcnMyUpMFQACqcPfu6alNAbBBSiMAf0JKIwDnSGoLwdzc1BWCIAA3W0pTgEPA3xSQ6hSQyghgNyxlEYA5jAWc0sYQzpGURgAu9ZRlAYUHp7QQBP5WhR%2bEgFjniJpT/thogi3hFE3U1%2bAGDx70SGeaYipCit3zXdD6VphcyrrWDm90/db%2bMox/JolYP84NRX%2boWf303eb%2bGPQFmwYIYF%2bAJYGd2%2bhNEH0okTJ9UJktc%2bqzUaHPabJd7X8bqLXC7dT27Mo5tmZtdWTHmP4pUIqU3Wh98pcgKfIUOEV9VoEIC7AcUIH9PfYD%2be6HvgDBFhT7gwpy1Cc2%2bZ6IviXCri3XrR3fp0NTZaUldubcRbv80S2rqlrrNk4VAkt/6Cv9YauOnWSdG2I8iiJX4FWDMDl9MFnfAAaEPfL1XWCF0SnkTPECD4oIaQ7oe4axgPLyoE/jxo137/T7pvNN%2biS48vWVS/WR2XcUQDQXvjH2ysgAK0p1HX0fnQqIGWoJoC1mCH0d8EPclKf4IOrTD%2bWpnmKVomOYaJvYZDaFIwggZF4RVI1Fd8VzVij63FFzgTaISKNPilYDoFAFaytPn%2b/Sc/qUF3V1NEZpKDDDr%2bERZMUz7du3D1mAl5GhHx8lE4gLfOKJJxyP/vXXX/bTTz%2b5uH/OLBDjT6w/5xT4Zcbdu3ft%2bvXr7hnkGIc9yONsA%2bccqMOhCdrQr0Jok6iXdu3aOUS3aQTwbxA6zSD4Rxj7%2bghg/nfy7bffutMgfPQJUobUQRB5nHvgn2mE5Zw8eTLycVd%2bIwYyWcGY/QYIgITaCgI4wkfE%2bAcffGAXL150A%2bLjThym4CAEP4Ujnz/GcBQGBCDI3377bZfHwQsQwCkYrkHCO%2b%2b8Y%2b%2b9955duXLFCWsCOWH7iAwg2lL/Aks2MBEEbSCoEMxA9IFI8khRZvQcs6nDkvq9ln%2bwkjKAtqkfQQDfEtPBSYXE%2bgckkwG8nz49CBSSC3Adqw7kDuheAh9Wc9agJKv/k7Po3%2bwlAyTNHwRN1W/qV3yKh/4fr0MvEGRM7tkAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"412\" alt=\"Zombie Create Animation Blueprint\" data-srcset=\"/assets/static/zombie-create-animation-blueprint.2ece984.b27303ece8b03ba6efda5b866e6989eb.png 412w\" data-sizes=\"(max-width: 412px) 100vw, 412px\" data-src=\"/assets/static/zombie-create-animation-blueprint.2ece984.b27303ece8b03ba6efda5b866e6989eb.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/zombie-create-animation-blueprint.2ece984.b27303ece8b03ba6efda5b866e6989eb.png\" width=\"412\" alt=\"Zombie Create Animation Blueprint\"></noscript></p>\n<p>This will open up to the AnimGraph and here you want to right-click and create a new state machine and connect it to the output pose like so:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 610 339' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-70446afc193fb5822b9a7af0980622fa'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-70446afc193fb5822b9a7af0980622fa)' width='610' height='339' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAA7DAAAOwwHHb6hkAAALAUlEQVRo3s1a2XOTRxJXlsNg40uydd/3YfmU71OWseRbvm18gA/A9kLFuAhJCKlKCgKVFKYImzdqk%2bVhK/wPqfwf/Af7sk9btbuPv%2b0ee5TPnw7LqWzIQ1ePZnq%2bme759XTPjDThcBhqCoVCiEQi8Pv9grjMdblkc5HP5ytaXjmW2%2b0%2b01gsy2MFg0FRLrYPy8s5avgHF5hkmblUhInLyrZc8so6j8eDQCCQ%2ba2WU9fx971eL5xOZ86x8n2DOfdj4502N%2bU3eG5yju/NAEr50wyQTyGlAZT9Co0lDcD9hAFkoyQJS7UBlG255JXEH5eK5fquWl5C2eVyZckV%2boY0HCtSaG7qb/Dc5Bw1coVyrRQLMeWCklpeScW6gCQlAooZS8l5LKULnDa3LBcoZGVeFQmvYlbjrAhQboISAcpN8NcgoJgxT0WAXD0lAtQrelYEnLYqyj0gxMYTEw5mwZrrwhllQscGkIsUPCFXFAJkaFCGCcmVYbCQnLpNhphC8spyXV2dGIcNEAgEqRyAX8lporLsE3MK0Bh%2bUe8k1Hg8XtFPtLHssTzXqUOkRFgmDDocDjEwkyxLbrPZBOVqK1RntVpPtKnl1PIMfbPZQmU7OttaEGuqR6y5QfBW4kyxY94ea0JnewwdJNfRFkNrSxPaqK69tYV4M/1uRozqmpsb0dLcJFZZPa7dbhdzZK5hCMndXpZlaOGJMXFZ2ZZLXtYx8SDqunzywhdpkmaLFUuTCfxw%2bBne/OUrvHn1BH979Rh/ffEF8SeCv37%2bOZ4/%2bjOeHNzAs4%2b28ewB0y08JXp8/yY%2b39/Cgzs38OGtVWyvL%2bDa4jQSibjQQTkuw5/nyFyTK1MqxgXU8rkywdNcQFKUXMDt9mA21YuHeyt4uL%2bDR/fv4PGjj3Bv5zq2r03jYHcDn97bxfrsCNKJdiyO9mFlahA3ZpPYWhzD9vIEtpYnsb4wjvl0CmOpQQzG%2b9BKKFHrcMIFCoUan88rKCzqAmJjEW2iPaioO%2bKhrE1QfjOoKGdvTBGamINWZHq4B5/cnsXeWgobswPYmBvA%2bkwf1qaZejEZb8FYfwsmB9uRHurATLIbM2S06VQfZkYGMJXqx3C8Cz1dreQGjWhoiCIYCmaF8qwwqCYZwjxegrObFAlHEQhSDh2qEyTL%2bbjbw5tRWPxm7vVx/h1GvrHqaFUcThemrnbjy/1VPLq7jE/3FgQ9uD2HB7tz2N9KY3sxhbX0EJYnB7EwPkBK92GC%2bowMdmKgO4bGaACN9SFCVIjGJRfze%2bFyu4QBlCFRZoKZMJgr1ARDBJeQF2ujBmxP6oi02JqoxsZYJW6la0R5a7Ja1DNx/c0pHTbHq3BjtEKU9%2baM2J01Ym3MjPpokAxyFLpyGZsnZDDpYbVbYLGaYLGZj7jVDDNxs6w7JlnH8kaLEYFQAM%2bePUOMIK%2bt1cJkMYl6g8mQMYAcK6cBlC4Qpo85PRFcS1qwMmrB3EwKc%2bl%2brC2lsHV9CmPJdlxfGcPS3BAWZxOYn47j1uYMpsa6sbE6IeRYpjPmQVOjH9tTJswmKBq42eeDeQ9D2hodao21qDXUnuRGxW/DL/V6Mtilssu4cOkCGcWCp0%2bfIj2dRnlVeUZ5vVFPSPYUdgF1phShSbq8UVpVE3pjFkzMruDa6jpWr2/i7v4BhpKjmJ5bwBr9Xlm7gYn0DHbv3MW1tetYv7GJvbsfYnwqTQq7oLf5Md5rwsKQTRg1EgnlzQR1SgMUIFaKeZW2EumZNL7/4Xs8P3yO/oF%2bXKm8ghp9Dap0VaisroSuVkcueNIFTs0EGQEOmux60oTOei0CEfKtpgBaYhG0tTcgMdSF3r42DAx2oK%2b/HS2tTaiLRtDQ1IBINCx8z%2bN1w%2bNzQWeyIdVRjblBWxYC1GcBrU4rJl9jqDnieahaV43yynLcO7iH%2bx/dR2okhRcvXuDt27fY2NwQMiEy9OraKnwBX9Yps%2bAmmEGArw7rw2bEQpXwBH3o7GpEf7wTqdEEFpemML84haVrM4LGJ8cwMjpCbSkkribQ1dOF%2bsZ6GtyDKr0ZieZyzMftcPujtBfUZcKRpGg0KhDABtDWaGllq7IModPrjohWlBEwNz%2bH%2bYV5aP6kwfmL54X/v3nzBrt7u8Iwo%2bOjaOtoE3sBK6s8Y2QhQH1eDtMm6CQDrCVMaPSWoVxbC7vTjjBNvqOrkwwRx9XkMIZTSeJJJGkFWPnkSBKDQ4Po7O5ElEKQ1W5GaVUN%2buvLkO6xoNZE2ZjdlsnGOMu0WCyCOEvjVWW/dXldAsqlV0pRVl6G0vJSVBLc2QBcN0xj7%2b/vk/9fEsY4X3IeL799iS%2b%2b/AIajQYV1RWZfmxM5SaYdR%2bQ2wABYYCVuAlR12WU62opHNoJ3hEyQAfilF0NJ68imRoWNHxMV6luYHBAyDjdTuzt7aC5owet7g%2bwmgzizv7HePL4S4yPj2N5eRmbm5vY2dnBwcEBfv75Z3KvNoyMjeDJV0%2bEwfl7jKS%2bgT44XA5UVFUI%2bAv/JoOIMinI/PDwEK9evcLDzx4SKpcy/s9tjIBwKJz/QkR5PyddgOG60m9G1HGJEKCDjcJNIOhHMyUYnd0d6O3vIf/vPUG9fT3kKh20VzQT9Iz45ptnmJxbRLvnHP7%2b8gD/%2bOe/8N///BuvX7/Gd999h5cvX%2bLrr78W9O7dO2G81vZW3Lx9EyYKcWwAVr4/3k9osv5iAFJaKF5TjSsVV%2bDyuIQxeS9YXFrETz/9JKICRwOWZ2Uj4TwuwFbgAnNZDpGiDi%2bFwV6Kr9bLOHdFK4xQWWuA1mhGDeXteqvtmOwneI3ZSjImlFXr0N7TizK9HTH3RUy0GtHWHUeK4MsHEYa9yWSCwWCA0WikMUOoqq4Sq8arz/C9ePkiSkpLUHK5RLgHK80ry6svV/iD8x9gaXkJ6%2bvrAv7c7/DFoTBKWUWZ6MOXrVJH5pway4sUDReUJO4APG7YXT4kGk2YjF5Ao70Erc4SxJwXEXMcUUseku2xY/kGWwlmGy8g3mSHweKA3WbNXLRI4knxflBeUS5WmVeVFZQrzcR%2bzW2CqMztmnMaYYSPP/mYjsVOXCq9JNzjzt07op73C5az0ymT9ZL6sUF4z2GeMxNUpsK9USsmKBcYazFjvOWIKylXXarRgLFmE8ap33jMjL4GB7nPyfO4eiw2SmVVZUZxsdI5iFHCnJHBLvPj2x/R3dMtogHXs9J9/X0YTAwKJLHBMptgKFg4Fc51K%2bykvN4TqIPLH4Y7EKG9gbg/cky566yEHpcvRP2O6ryBcFG3wtIAeZVnJJBCvLrTs9O4vXMbfnJXDoPsIowcJo4WHP7Y/7mf2ATD4V93K%2bz3%2b2jVwiI0RsJHIZLzeVk%2bwUWZTpGcetIJMXL8O3zKLbISAUrYq4kVYr92U5IlVp18nvcHgRjaF6Sb8ObHBpFG41T4TJng%2b7oVrqisEBMvRLzC0kWEolWKtsojBPBeIuvYqKceh/PdpMpN6ve6FTaZTSJCmM1mQRwluE5wFRlNRiGj1%2btFFFHKy/4caTjhUqMtZyb4PhBw2stQobuKo4QtfOJliENpljsHQ4WfxgoNkutprBjKhYDTFFK%2bDOXaLNUbtXKsXE9j%2beSLuhD5rQxw2mTUCHivBjirCxR6gf09X4fVT2PFjPmH3QTfy9OYzI%2bVlO9pTC2Xjwo9jeUbS97Vn2Us2U9ecRfbR54FMk9j/69/iJzlXxvKf4gUO85v8g%2bRP8LLkByLD0T5xsr3DfnCo%2bxXaG7ql6H/AQqLepEApTbZAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"610\" alt=\"Zombie Animation Blueprint Anim Graph\" data-srcset=\"/assets/static/zombie-animation-blueprint-anim-graph.7426fad.b84af2cd0ee9b53b95b3555da609b615.png 610w\" data-sizes=\"(max-width: 610px) 100vw, 610px\" data-src=\"/assets/static/zombie-animation-blueprint-anim-graph.7426fad.b84af2cd0ee9b53b95b3555da609b615.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/zombie-animation-blueprint-anim-graph.7426fad.b84af2cd0ee9b53b95b3555da609b615.png\" width=\"610\" alt=\"Zombie Animation Blueprint Anim Graph\"></noscript></p>\n<p>And then you want to switch to the Event Graph tab, delete the Try Get Pawn Owner node, and drag out from the Blueprint Update Animation node and connect it to the UpdateAnimationProperties node like so:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 657 219' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-d0af0c38d8918ee77e08aac61f6d7ab5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-d0af0c38d8918ee77e08aac61f6d7ab5)' width='657' height='219' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAVCAYAAAD2KuiaAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAIjUlEQVRYw81YWXMbxxFmKoklkgCBxUUcBAEssAewOEgA4mmSonhBEsVDPCVTJE2VKNmyRN2yYsdRUqk4cdlO4qRScmI7kiqy4yf/wVR96R5gwCUCksqbH77qnpnuOXp6ZrqnJZPJgKHrOhKJBCzLgmmaSKfTh4LbWUfTNBiGIfij5Bksw7KpVOpYWbsOyzfO57DxuJ5lWee4OUnZFlngxcTj8XrDYQu3G4AHYsM1a2%2bmz7JHGYD17Lo8RjKZPFB33NzYyKxz1NxlHcv%2bKAyQEXNgnvplZNKCWkRTKVqMKetqMpl9HQlZb5oGNNKp1h1tAOEB7PIMnpxKRyCXzdLAGWSpLstU8ixXKzNlOYMXT53k7O02mq31bdV4lmVDy2MnoRlZpIwcUnq2CuYJGqE7QTtqq7O3H0CtXtUs0iFDU5%2b6WZ2rPA6N43JdC0%2bIwec/HI0iSu4TIZ5plHZLgPguVRV8N4F5psHu7n1ZKcM8tzNNECU%2bRohzv%2bRhsVhcjMeeoGkpJFM6BgpRjBY7MdJLKAaJDxIfxFgphMGcV9SPFkMCsp4pl8dKYYxymflyBCNUHurpxHhfFKW8CjWpiXGq41XHlTwflRaVJpckhGkxvZEI3ikVcbXYi%2b18HlfIQptkKeavlkrYIPfaoHOzlctiizxgO5cTMm8XCiSTw1Yhj83eHmyQ/uViEZcG%2brFULmOurw%2bzxC8QNWjwGBkiqSYQ6U7S5Dvx%2bEEF9351He//ZhcPPtzEo19u4/FH27gv%2bC08JNz/YFPgEdd/cAW/ePo2Hn64gbuP13H/yToePVnF3t153N6bxXs3p3B99wz2NjXkzS4aT6UNjotNtoOPvDgC7MJxWsic14MfVlbwl0oFf52dxbO1VXy9tYnPzp3Dq9u38RXxz3d38SXRz%2bfn8dncHL69s4d/Udvfqe6LlWW8un8PX9%2b6hX/cvYu/Ef8nwvrkBNZPlfE7OpdDFr0GNFYumyF3zWF9OoK37t3D2JPvMXP3z7j1%2b3/i/S%2b%2bx8M/foedp1/iKuHB599S/Qvc/Pi5aNv97Td4l/ibf3iJj579gL1PXuLepy%2bw9/FXGF67hcLMZWgjK7i0mMe5kYQ4Glbm4BHgdYsjIC40YhKajj6fDztqHJdpd1YiYSxHu7DcHcUi8YvEL8ZjWKGOzhI/Q5imtlkqTyVVnEmpGCHdUVPHkEFuTfXFtIGCRZeflkQw2IlUvBvhWAxxI40stSVSFpZOh7B8bRM9K3dgTS1hdPESTp29iNLMPGEB%2bTOzKFcWUKZy/7lFaltE/%2bwK%2bi%2bsYnjxMiobVzG2vIGxi5cwNr%2bMntEJGMU%2bdFtlLEzGMDMcJ0NnxOXIa%2bWbX7424hWQFuELzUeTVDr98BC8wUANxIeqPNcrfq/gfSFbmeWlTqevVvbBR5ThDXixsrYCM2MiH1awWKB7JW0hlMpjaSyIt%2b7cwsDOU7y5/QjT1x/h/LsPcfbGA0zs3MHpzfdw%2bso7mNi8jsnNaxhZ3cbY2hbG16%2bQAdYwMLuIkbl5DFZmcGp8DGaxhDCde2/MwPmRICrD5AG6JV6VQ%2bOAdKb6RPloMQIB7z5vg7fW5q2XPfW6Knzw88IDvhrvF3C4HPj3d68wU5nCg3AL/jP%2bU/y6N4BJU8PyKF1uQ0m4YyaiRgbd6RxihKiZpbKFLj2NLs1EJGXQwnSEVQ2hBHlULEGIi4s40NUFfzgMfyhEhg/QZR6BKxDCTNmFylCCXhFLPJNNn8F6UKAb8NAd4PK44Pa4XwsuxVWXZ77d2Y42R5tYsNPlRKujFY4OBzrcHXC7Ffy83YFiRME1uvVvFCJ41uvHN1Pt6NdP4uXzF8jlM2hrPwHFQ/KKE4pSo1T2eF1EayDe43Xvw6fUwZtS6MlBt/KYKLShMqgKDzjSADJMFQbgRRHcirvONwMvuoMnSJQXG0vEMEYuODk1iXxPHoPDg3hzdBglegXMvIbcjJ920guXN4B4hnfYQljLY224EwOGAzvXbtCdkICTjOUhr1J8Hri9iih30HjCiFQ%2bHO4qaD66kaInN4nxXCtmBsgAxr4BGoOjAwZQPDygUwx2LGjxUpYNEKDzzwvvLfUiSZdeIpkQvEGDRGJBJMt0LMIu%2bP1%2benUokKL7gAOc%2bcEQetRWtPzsBPXlFMZlr3F0tNNOKwiGgwh3hRGNRW3GP2xTqrTD7cAbjg6MZ9sw3f8aBpBhaiBAl5ufLjGfdx/eKtg7GJLnNkVRhNEEz8brcMLhdMDldglInuU8io%2boB130elTDXxMJNkB/EIV4K34ytApXtg/Dg/2YmJ7GxeVl5CiuGBgeIn4Jp8%2bMk8FpcYr7aLirRjjhVDCaJgP08R2QEVHosbkABwf1XMDcT04awYqsx5GUzAXsiUyzXIBjc3s2yAZQhQFC6FffgCMUpQuTDBT2wdTjyGd1REJeihd0gYypwu/rgM/rPBZ%2br0N4UyV7EhPl1/QAnhhHRtIyhy3ebgB7MnSUvDQIy9azO4JO8cCpbBJLJTfmcm1YKDhwId%2bO2WwrzlsnMZd3CHreasUFap8vOAUWeqp0vscGW/0c9cP0YpkMmDHoGKbrcYB9PvU4QCZD8j%2bgWeLQmESwnPwPYN6ecDTTl/8M9mSIExWT4gEjzclSRkRrWQLfEVxmalAcb9F9IdsFX5OzoyrDnmVQ4JUS8jpdtOnjkiGZGPDiu%2bg9lUmCTBqagdtl%2bsy5hEwypF4zfZZhWdY5UH%2bg3yoEL%2bo0kTypst/UwfZkgy5TVU0KHdbVGubcODeRDEl350KMwlTm2Ru4/jBwu9ThhcljIfWa6cvdZyMc3rf%2bPzosf6C/Q%2bdWG7s2Brt845wb58Z8S7MvscZvp2bfS/YjkGlwM7u7NX6JySNw1Bj2dvkldpSsXb7xS%2byouYlLsP4p0fgK/Ij/BI%2bb2//zJ/hflf3WljAESoYAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"657\" alt=\"Zombie Animation Blueprint Event Graph\" data-srcset=\"/assets/static/zombie-animation-blueprint-event-graph.6744923.c536f2ffb50085af1441b7f3d64098b4.png 657w\" data-sizes=\"(max-width: 657px) 100vw, 657px\" data-src=\"/assets/static/zombie-animation-blueprint-event-graph.6744923.c536f2ffb50085af1441b7f3d64098b4.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/zombie-animation-blueprint-event-graph.6744923.c536f2ffb50085af1441b7f3d64098b4.png\" width=\"657\" alt=\"Zombie Animation Blueprint Event Graph\"></noscript></p>\n<p>And then finally we'll create our states and their transitions:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 758 531' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a544d5d5532931a946ba9cefc9b7a4a3'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a544d5d5532931a946ba9cefc9b7a4a3)' width='758' height='531' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAtCAYAAAAeA21aAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAL7ElEQVRo3r1aW28bxxXWa5/60qc0tiRelsvd5ZIiqQtFiXeRlGXLdkXJluzq6tiOHSeFUyeoDdVBXKiI67aO8%2bA6cVMU6A3oQ/9AX/qQFClgoCjQl/6Z0/MNedbD1VLUNQ%2bDnZ0zc%2bbM2XOfHYjH44Rm2zYZhkGxWIwsy1Jj8hR4NBqlcDis%2bjocTzTTNBUOeffjARw4/DB9nyC4wNAH3L%2b3jgdw7BNEAxroA1zGBvwHPAoDsBYbBBHeiwH%2buZFIZE8GAB7EAJ1BwoAgGgMZIAt0BuhIdORggI5UkKFhrXwhvfkZ4IdLA1wO2KvtBdcZ4MerSxjo9BgAhGjgzPDwsDog%2bhjDZGkCHxwc7ILr87A2FAp1rdPh6AOH4NPnSQNcYH4a0IaGhnbhlqfQ6F%2bnv4M%2b0CnzB0Q0HMfxxAMijjF56nAgQ1%2bH44mGteCuvPvxyBfQRVLgQTrup0HU0L%2b3DhcV9MOFHtAn0o33ASFMFgsDgogE/KBGUG%2bAj4yMUD6fp1wuR5lMhrLZrGoTExPqCfjU1JRisp8GYVAv/MIg/7ogG%2bAx4Di9wH6MIA4/OjZKc2fnaG19jTY2Nmhza5MazQbdfPsmLbQWFHPACFOj5cSMoP8L6xLQSwV6iVcvCZB5gONwbtKlZCpJ1VqVpgvTVCwV1RPv%2bSlm0OgojaRGutTRrwK9VET/AP55%2bhlPRAL6xQFW1iI35VIqmfLwpVIpKhQKnoRgfTqbYSY5ZGNv4NmHBBxLHCAM8B/wSAyweK3FxseOUbleVgcWPcVhxsfH6fLiZYqGmfC4SeFQmEzLpOSES%2bmEQ07AAXsxQGg8EAP2MoJB4qUzwG8sPQbYmvjFedw2qVgtUmG6oNZDnWQt1KFWqvHXtj0CwTD0E2mHMm6C3y0lCfZJGMF%2bcYAf3jcOGA5RJKT53UiIxvJjVCwUaWh4yIsDvKCKmVUtVpUERKKRbj9v8GFckxImB1iR9tggw0O%2bvXUa%2bsUBckYZ66sCB3KDMY4D4jFKTbKOO7bq4/CNRsMTO11FMAZjWK/WyTLb6rIrF2A8bjpBaeUWWSrgSViNjqoC8r4vBujwfgwwnChlzmTIdGOUHktTvVH35vuTnb4M4HeokOVYiglJm1WC19TZRcbBUN8Bj40BR/ECEK1wLEyJTIKazaZyZ3p%2bsYsBSY0BYFAkIBs0mQY7TklmggV11PKBI3uBfnGAtASLYDvZiai%2bbXdC2IA4wE27VKlW6OqVq/TixQsaGxvzmKCMXGc%2bDgYJaNQaZJu2dwDd%2bEICHDaG2UaWnBEOwRNxGnES%2b44D/LHKgeOASDRG4SgnJ7E4DQ6H6dQgGykWdYyZ2leQSDBqRakx21Bfvlgs0vb2torqJAPrJwG70mF4EYcJnuJ39ibRWJSSzIgRVgfzuNLhXjbAYQNUzGWpMjmq2vRYivJZV/XLkxy3JxMdibGU6zJsg0rVEk3mJsmIGQrf6dOnuwgJYkBjLyOo5nVUg5mhngmLUqwOqY4EWtYRbIAn4omE95XQN3jT6fEMffXFA/rvXx/TN7%2b5S18/u01ff3aHvnr2Dv3n5V1any9TiCUkyfPxleDrkcgAD3w9GnCJ39dVQJKd1EiKZqAC8dciKvP1JvgkTrBTLAWsamlWB1FDp6OmErrLmL5ezihjA/CL0k6dOqX8fDgcolOnB2mMN/nn739G//7LJ/TqDzv0ry%2b36dUfd%2bib3z2k//3tV7TWmqPvfPd7NBgaonF2d7mJHL355psq5/Ya45WnxBGSk%2bM9zj7%2bXLFCMY4dhkPDSmJ2rdX6HpzjjZCB4oxBiUi7TiBnkH7QE/vLO/AMCEcQogqXXNdt580sxk/urtLn22/Rr%2b%2bt0ZMfrdDj95bp6b1VevbhOt1dO083lprUmm/Q0uVlCjHjIqi4oC4grZN/o29wP8w6bnb6CGrivMdFVpkUj4WMtpcxtbVduDCH4TrumBOnNEeLWU6t0%2bm092UheTgTzoIxqBrgUggRugZE5BcWFmh5eZlu3bpFt2/fpkKxRO%2b9fY3%2b/Mm79OOtFv1y%2b136xYPb9NnH79PPP7hBj%2b5u0uePH9CXj96hTz/cpAhHcgmO5eOMPIEwVhrC3c7TgfFhAvDMsmG8f/8%2bnWFXmc9w%2bmuybUmXyI5y5Mc6LWu9Z6dvMgOl7%2bDDsV2YZC9TYINbrVZVOt1abNHyyrJKsZcuLdHq2iqdv3Ce5xS8okiXF0DnwoULdOXKFdra2qJNztHthEuts3V6%2bdFNyo0maWVxnq6tr9Dm6jKtX71Ey615uvHWJm0uNum3j%2b7Q0tJlqnBaWymVaIYJ8Vql4j1r3CpMaK1cprNnztDLL17SjevXaWv5LM0WKnS5zDjyxcC10i9z5uiN12pU4fccMwA1hgRLAuoMFy5eoMWlRWrONmn2zCytb6xTpVah7Gi2bd9ixu6KkLgQuKF2YYNDWtdRor9z5xJtXztPDzbP0U825uin1y/Sx7da9MHqLH1674f0/tYiJVjElLix%2bEHcpLl4QhQ7cIs3bYtmgoZCMVqZH6FXf39C929VWDdDig7M19fqfcDRT3X6FWZEbWZGuVox5ModszrhHYdUKTRLFTLPXSUxvw%2bVWF3Gh9k4Rdjni/4NsfGIcRwQUVmXpYzlDxYWqVYrsv4iEWm7Ib3FO09sHunoODK7wZBBK80U/eNPT5i5NYVb3JhqHWL1JjZC5R38JRcWWnywvBqXOELsWkxbj6BLiq1dVWG94iML9EjQ0dyQOkCnKArfjzhB1iLsHR9P8ybw43YnUrS8iFGY2hUJMgNdzvkvNQuU5MTJ5HejEwkGVZ2wj8QJoLPBeUaG7YdhmIoW23a6iqJ%2bPIGR4IFLYp1cwF/thbgh60unHRWYvC6DxXszQCVDKapUmtzvEQprtOmtwnYgny8x/jaz%2b9UDejJA8mR8XfhFESF/7V7g8KF%2buEgGkFY5B3BduQBhO5KKd%2bEBDjmEqi/yl6uVqpzgGEpv5V5Ax401qBpPT0/TG298n3I59Mss9oZSA6EFTe4ldGb54fo9woCnI50wVURI9ETgUo8DAv22RdQGfeghDFazWWeJMVk8LZqbyzCnTWU3hFHeWja0sNwzlRkyjfY%2bkXBk175g%2bkcPH9LTp0/VV6vVUF/gXMDsplG3AbvskJaO6/nAsdYE0R8aGlT1/ZmZKjMBYa1chR0uHRa6SuxeW60WP8uMc4Rh5vHVBINswF43Q70MFGCo8O7s7NC5c/NULhcYHlPGKdgI9k%2bHpY/xMscPtp1ie8ORY2pKMeHE0%2bH9SgDGAEMy9Pz5c1X/h85WKtOKCZAAEHyYgghogsWfmJhmG8GxQnyM27hSgRMvi%2buiuJ%2bKEOBoEpDUOForFHLKILYlYA8G%2bNJhIbhcLjFjS4zPUuvbdBq7DniodPiwZXH/paYcSL8cFdyNRpMmJ7MMh0XerQLCAF0F2ocx%2bOB5lqIZxtt2d/0uR/cqi%2b9bBXpVhQ9zMYKx14ESrruiXR4E9wLNWpMs/rrqYkT9fxBXoTiuyOp1jhHirlf0iHYi0OOoCisGiH8U8X2dCxjeU4fDJclB9XkSG%2bjiL7D2V3WUUUwmOdvjRCshhQqOBAsTBcq6WaUCCHGliJHNjvPcMS8ekJjAv7dOg8QB8u6H6/8G4H1AAFLRFQ7KoQUufh6Biqnn%2bZrP1ZMpvQk%2bwMfHJ5ShnOEEBpeh9Xpd2Ymp6SklJUhpMY6WyWRVmAtjJ3h0Bus06HD9wH4a5ZLHqwcc9XZYDzP73Q5jLq7HEfyUKiXa2NxQufrWtS11f4D%2b9RvX1bU5bovx/0Bb9O193w4H2YDjzQWOeD0OvcbB1KWH/Vo/ETxhTEV2cVPNQTnd79NP5Hr82/xJStJW1cx411q9aixjOg1BP0kF/UAR9JOUXpUOTIePGgnq/wjtpQJ7/ULjL5vv9Y/Qt3YxcphfZA7yo%2bRx/Sd4Yldjx2kD/LlA0FeM9iiInJgEyFcT/dTdoN/d6G6wVxwQ5AZ1fxwUJ%2bjv8OO91ouf7wULcoP%2bfcTVe27QX3jQCyJ6IBRUENELIyIdQoDeBI%2b/IBLU9ILIfuBBNO6nICLz/w/xlBdPCIHoKwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"758\" alt=\"Zombie Animation Blueprint Event Graph\" data-srcset=\"/assets/static/zombie-animations-initial.e4ad7cc.4513516876c3279cb460e3cd8fa67655.png 758w\" data-sizes=\"(max-width: 758px) 100vw, 758px\" data-src=\"/assets/static/zombie-animations-initial.e4ad7cc.4513516876c3279cb460e3cd8fa67655.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/zombie-animations-initial.e4ad7cc.4513516876c3279cb460e3cd8fa67655.png\" width=\"758\" alt=\"Zombie Animation Blueprint Event Graph\"></noscript></p>\n<p>I won't list the transitions here as it's a bit tedious but it's pretty easy to set it up since for now we're just using <code>bIsRoaming</code>, <code>bIsChasing</code>, and <code>bIsAttacking</code> but feel free to look at the <a href=\"https://github.com/robertcorponoi/unreal-zombie-ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> if you need help.</p>\n<p>Also note that we're not using the death animation yet but we'll add that later.</p>\n<p>So now we can go back to our ZombieCharacter, load the ZombieAnimBlueprint, and set it as the anim instance class of the <code>ZombieSkeletalMesh</code>:</p>\n<p><strong>ZombieCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Sets the default values for the ZombieCharacter.\n */</span>\nAZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">AZombieCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Load the assets needed for the ZombieCharacter.</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>USkeletalMesh<span class=\"token operator\">></span><span class=\"token function\">ZombieSkeletalMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SkeletalMesh'/Game/Models/ZombieJill/jill.jill'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UAnimBlueprint<span class=\"token operator\">></span><span class=\"token function\">ZombieAnimAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AnimBlueprint'/Game/Blueprints/ZombieAnimBlueprint.ZombieAnimBlueprint'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the ZombieCharacter's skeletal mesh and set it to be the mesh loaded above.</span>\n\tZombieSkeletalMesh <span class=\"token operator\">=</span> <span class=\"token function\">GetMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetSkeletalMesh</span><span class=\"token punctuation\">(</span>ZombieSkeletalMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">90.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetAnimInstanceClass</span><span class=\"token punctuation\">(</span>ZombieAnimAsset<span class=\"token punctuation\">.</span>Object<span class=\"token operator\">-></span>GeneratedClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now let's get into creating the AIController for the ZombieCharacter so that we can make it move around and respond to the PlayerCharacter.</p>\n<h2 id=\"adding-a-stimuli-source-to-the-playercharacter\"><a href=\"#adding-a-stimuli-source-to-the-playercharacter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Adding a Stimuli Source to the PlayerCharacter</strong></h2>\n<p>Before we can get into the AIController for the ZombieCharacter, we need to improve detection and performance by making sure that the AIController doesn't sense all Pawns and we need to create a stimuli source on the PlayerCharacter so that the ZombieCharacter knows it's supposed to see the PlayerCharacter.</p>\n<p>So we have to:</p>\n<ul>\n<li>Change ini setting so that not all Pawns are registered as sources for stimuli.</li>\n<li>Add a <code>UAIPerceptionStimuliSourceComponent</code> to the PlayerCharacter to manage the their stimuli sources. In our case we'll only be using sight but you can add more than one sense if you wish.</li>\n<li>Add<code>UAISense_Sight</code> as a registered sense for the PlayerCharacter.</li>\n</ul>\n<p>First let's handle the first point by setting <code>bAutoRegisterAllPawnsAsSources</code> to <code>false</code> in the <code>Config/DefaultGame.ini</code> file:</p>\n<p><strong>DefaultGame.ini</strong></p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token selector\">[/Script/AIModule.AISense_Sight]</span>\n<span class=\"token constant\">bAutoRegisterAllPawnsAsSources</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>false</span></code></pre>\n<p>Now let's go ahead and define the <code>UAIPerceptionStimuliSourceComponent</code> in the PlayerCharacter's header:</p>\n<p><strong>PlayerCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Used to register sense for the PlayerCharacter that are detectable by the ZombieCharacter.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleDefaultsOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Player<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UAIPerceptionStimuliSourceComponent</span><span class=\"token operator\">*</span> PlayerStimuliSource<span class=\"token punctuation\">;</span></code></pre>\n<p>And then in the cpp file we create the component in the constructor and register the sight sense:</p>\n<p><strong>PlayerCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Create the stimuli source and set it to register as a source for `AISense_Sight`.</span>\nPlayerStimuliSource <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UAIPerceptionStimuliSourceComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PlayerStimuliSource\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPlayerStimuliSource<span class=\"token operator\">-></span><span class=\"token function\">RegisterForSense</span><span class=\"token punctuation\">(</span>TSubclassOf<span class=\"token operator\">&lt;</span>UAISense_Sight<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>All the above does is make sure that not every pawn triggers the zombie's sight and we specifically make our PlayerCharacter a trigger. This helps with performance and making sure the AI doesn't get distracted by other zombies and neutral characters.</p>\n<p><strong>Note:</strong> I was having a bit of trouble with the above and no matter what I did the stimuli component would not register a sight sense and I had to set that up in my component manually in the editor. As soon as I find out what the issue is I'll update this with the solution if others are having the same problem.</p>\n<h2 id=\"zombieaicontroller-perception\"><a href=\"#zombieaicontroller-perception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>ZombieAIController Perception</strong></h2>\n<p>Now let's get on to the fun part, the ZombieAIController. This doesn't mean that we're done with all of the other pieces yet, we'll need to keep adding to the PlayerCharacter and ZombieCharacter but this is where all of the ZombieCharacter's actions and movement are decided.</p>\n<p>Let's see what we're going to need from the ZombieAIController as of now:</p>\n<ul>\n<li>We need a <code>UAIPerceptionComponent</code> so that we can perceive the PlayerCharacter.</li>\n<li>We need <code>UAISenseConfig_Sight</code> to attach to the component above in order to detect the PlayerCharacter through sight.</li>\n<li>We need a couple variables to tweak the range and age of the sight component.</li>\n<li>We need to override the <code>OnPosses</code> method so we can get a reference to our ZombieCharacter.</li>\n<li>We need to define the method that gets called when the perception component broadcasts the <code>OnTargetPerceptionUpdated</code> signal.</li>\n</ul>\n<p>And that's all for now, we just want to keep it simple and make sure that the basics work before progressing further. Go ahead and create a new C++ class with a base parent of AIController and name it ZombieAIController. I put my script in the Zombie folder since it's used directly with the ZombieCharacter.</p>\n<p>Now in the ZombieAIController's header, we declare the two components and the variables used to configure the sight:</p>\n<p><strong>ZombieAIController.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AIController.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GenericTeamAgentInterface.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Perception/AIPerceptionTypes.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ZombieAIController.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * The ZombieAIController is the AIController that manages the states and movement\n * of the ZombieCharacter.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ZOMBIEHORDEAI_API</span> AZombieAIController <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AAIController\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">AZombieAIController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The ZombieCharacter that the ZombieAIController is controlling.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Zombie<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">AZombieCharacter</span><span class=\"token operator\">*</span> ZombieCharacter<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The ZombieCharacter's perception component.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleDefaultsOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Zombie<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UAIPerceptionComponent</span><span class=\"token operator\">*</span> ZombiePerception<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The ZombieCharacter's sight sense component.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleDefaultsOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Zombie<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UAISenseConfig_Sight</span><span class=\"token operator\">*</span> ZombieSight<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The radius around the ZombieCharacter that the PlayerCharacter will be sensed.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Zombie<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> ZombieSightRadius <span class=\"token operator\">=</span> <span class=\"token number\">500.f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The radius around the ZombieCharacter which they'll lose sight of the PlayerCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Zombie<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> ZombieLoseSightRadius <span class=\"token operator\">=</span> ZombieSightRadius <span class=\"token operator\">+</span> <span class=\"token number\">50.f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The amount of time that the ZombieCharacter will remember the PlayerCharacter after</span>\n\t<span class=\"token comment\">// seeing them.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Zombie<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> ZombieSightMaxAge <span class=\"token operator\">=</span> <span class=\"token number\">5.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/**\n\t * Called when the ZombieAIController takes over the ZombieCharacter.\n\t *\n\t * @param ZombieCharacter The ZombieCharacter pawn.\n\t */</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>APawn<span class=\"token operator\">*</span> ZombiePawn<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called when the AIController's perception is updated.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">OnTargetPerceptionUpdate</span><span class=\"token punctuation\">(</span>AActor<span class=\"token operator\">*</span> Actor<span class=\"token punctuation\">,</span> FAIStimulus Stimulus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the cpp file we:</p>\n<ul>\n<li>Create the perception and sight and set the variables for the sight.</li>\n<li>Set the sight to detect enemies, neutrals, and friendlies as we'll be handling teams later.</li>\n<li>Set the sight sense to be the dominant sense of the perception component.</li>\n<li>Create the <code>OnPossess</code> method and assign the `ZombieCharacter variable if we can cast the Pawn that was possessed to our ZombieCharacter.</li>\n<li>Create the <code>OnTargetPerceptionUpdate</code> method that gets all of the currently perceived actors, and uses that to check if the Actor has entered or left the sight radius Lastly we print this information out to the screen so you can see that it works.</li>\n</ul>\n<p><strong>ZombieAIController.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ZombieAIController.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Perception/AISense_Sight.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Perception/AISenseConfig_Sight.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Perception/AIPerceptionComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets the default values for the ZombieAIController.\n */</span>\nAZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">AZombieAIController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Create the perception component and the sight component and set the default values</span>\n\t<span class=\"token comment\">// of the sight component.</span>\n\tZombiePerception <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UAIPerceptionComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZombiePerception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSight <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UAISenseConfig_Sight<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZombieSight\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSight<span class=\"token operator\">-></span>SightRadius <span class=\"token operator\">=</span> ZombieSightRadius<span class=\"token punctuation\">;</span>\n\tZombieSight<span class=\"token operator\">-></span>LoseSightRadius <span class=\"token operator\">=</span> ZombieLoseSightRadius<span class=\"token punctuation\">;</span>\n\tZombieSight<span class=\"token operator\">-></span><span class=\"token function\">SetMaxAge</span><span class=\"token punctuation\">(</span>ZombieSightMaxAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSight<span class=\"token operator\">-></span>DetectionByAffiliation<span class=\"token punctuation\">.</span>bDetectEnemies <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tZombieSight<span class=\"token operator\">-></span>DetectionByAffiliation<span class=\"token punctuation\">.</span>bDetectNeutrals <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tZombieSight<span class=\"token operator\">-></span>DetectionByAffiliation<span class=\"token punctuation\">.</span>bDetectFriendlies <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Assign the sight sense to the perception component.</span>\n\tZombiePerception<span class=\"token operator\">-></span><span class=\"token function\">ConfigureSense</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ZombieSight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombiePerception<span class=\"token operator\">-></span><span class=\"token function\">SetDominantSense</span><span class=\"token punctuation\">(</span>ZombieSight<span class=\"token operator\">-></span><span class=\"token function\">GetSenseImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Bind the `OnTargetPerceptionUpdate` function.</span>\n\tZombiePerception<span class=\"token operator\">-></span>OnTargetPerceptionUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AZombieAIController<span class=\"token operator\">::</span>OnTargetPerceptionUpdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the ZombieAIController takes over the ZombieCharacter.\n *\n * @param ZombiePawn The ZombieCharacter pawn.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>APawn<span class=\"token operator\">*</span> ZombiePawn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>ZombiePawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Attempt to cast the Pawn that was taken over to a ZombieCharacter and if</span>\n\t<span class=\"token comment\">// successful then we assign it to our `ZombieCharacter` variable.</span>\n\tZombieCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AZombieCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ZombiePawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the AIController's perception is updated.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">OnTargetPerceptionUpdate</span><span class=\"token punctuation\">(</span>AActor<span class=\"token operator\">*</span> Actor<span class=\"token punctuation\">,</span> FAIStimulus Stimulus<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Get the Actors that have been perceived.</span>\n\tTArray<span class=\"token operator\">&lt;</span>AActor<span class=\"token operator\">*</span><span class=\"token operator\">></span> PerceivedActors<span class=\"token punctuation\">;</span>\n\tZombiePerception<span class=\"token operator\">-></span><span class=\"token function\">GetCurrentlyPerceivedActors</span><span class=\"token punctuation\">(</span>TSubclassOf<span class=\"token operator\">&lt;</span>UAISense_Sight<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PerceivedActors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Get the number of perceived actors and if the current target left or entered</span>\n\t<span class=\"token comment\">// the field of view.</span>\n\t<span class=\"token keyword\">bool</span> bIsEntered <span class=\"token operator\">=</span> PerceivedActors<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>Actor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> NumberOfObjectsSeen <span class=\"token operator\">=</span> PerceivedActors<span class=\"token punctuation\">.</span><span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tFString text <span class=\"token operator\">=</span> <span class=\"token function\">FString</span><span class=\"token punctuation\">(</span>Actor<span class=\"token operator\">-></span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" has just \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>bIsEntered <span class=\"token operator\">?</span> <span class=\"token string\">\"Entered\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Left\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" the field of view.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GEngine<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tGEngine<span class=\"token operator\">-></span><span class=\"token function\">AddOnScreenDebugMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.f</span><span class=\"token punctuation\">,</span> FColor<span class=\"token operator\">::</span>Cyan<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Before we can test this, we have to do back to the ZombieController and make the ZombieAIController the default AIController:</p>\n<p><strong>ZombieCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Sets the default values for the ZombieCharacter.\n */</span>\nAZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">AZombieCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Load the assets needed for the ZombieCharacter.</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>USkeletalMesh<span class=\"token operator\">></span><span class=\"token function\">ZombieSkeletalMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SkeletalMesh'/Game/Models/ZombieJill/jill.jill'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UAnimBlueprint<span class=\"token operator\">></span><span class=\"token function\">ZombieAnimAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AnimBlueprint'/Game/Blueprints/ZombieAnimBlueprint.ZombieAnimBlueprint'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the ZombieCharacter's skeletal mesh and set it to be the mesh loaded above.</span>\n\tZombieSkeletalMesh <span class=\"token operator\">=</span> <span class=\"token function\">GetMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetSkeletalMesh</span><span class=\"token punctuation\">(</span>ZombieSkeletalMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">90.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetAnimInstanceClass</span><span class=\"token punctuation\">(</span>ZombieAnimAsset<span class=\"token punctuation\">.</span>Object<span class=\"token operator\">-></span>GeneratedClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the default AIController of the class.</span>\n\tAIControllerClass <span class=\"token operator\">=</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">StaticClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tAutoPossessAI <span class=\"token operator\">=</span> EAutoPossessAI<span class=\"token operator\">::</span>PlacedInWorldOrSpawned<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Save and compile all this and now let's go back to Unreal and drag an instance of the ZombieCharacter into the scene. Now if you press press and walk in front of the ZombieCharacter, you should see a debug message pop up on the screen saying that the PlayerCharacter has entered the ZombieCharacter's field of view. Now if you leave the field of view the message should show that you've left.</p>\n<p>You can also enable the gameplay debugger under Edit->Project Settings->Gameplay Debugger like so:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 508 475' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-61e8b65e94eb3947e673dcbfd74d2579'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-61e8b65e94eb3947e673dcbfd74d2579)' width='508' height='475' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA8CAYAAADWibxkAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAKgElEQVRo3s2bVa8UTRCGzw/C3d3d3d3d3d09BA8BAkGCQ5AQNFggQLjgBvkh9eWp5N00883uzpyzu8NFpUd6e7qr6q2qruqtqlevntWpU8dq1aplTZs2tRYtWljr1q29bdasmTVo0MDoU7duXW%2bTkPrWrl07d53m95WkKibZsmVLGzt2rE2ZMsU2bNhgixYtsgkTJtjcuXOdWrVq5YtJOziM/VcXnmMAk2zYsKEzAWmjBdxzTduoUSOrX7%2b%2bLyQtwTTGlwZEtaE6Y5aaqlDzJk2a%2bIRoWbgWHxKMoW8aYrzGjRs7wUhaxlIrBot4nvYbNaWqNm3aWIcOHWzixIk2cOBAbydNmmSjR492WIwcOdLGjRtnnTt3dtvQtm1b4zfFiH7Nmze3Hj16%2bBjjx4%2b3YcOG%2bZj9%2b/f37zDumDFjnLju16%2bfwy3pN0pBVXwQBrD4rl272tChQ23QoEHOACbcp08fGzJkiHXs2NEnx49gRDGiHwzgd3379vVFM9aoUaOsZ8%2beNnjwYP8O34V437t379xvo5Tkm9WhKg0uq4/ayhuwALXh4otxVX2wK/we0riouaDBPdd6B/EtEb9jDK41ZpLvp9IAqXX79u1t%2bPDhLiGkwYejqpj046EGoP4QKo8moVmoOy0aMHny5Nw18BgxYoRDQv357dSpU11LJYSSM4ALGIAqoobdunWL/VhaBsBExkP1wTcti2SxAwYMcPvAc/WB8cwBGCIMoMNz%2bjO/UkvfGRCVGJOGYIBI9yEWkzAAFcYGgPkuXbq4jcGYirjneUgwn98DR82lrBCIk267du180hATQkJMLq0GwIBZs2bZ%2bvXrc7Rx48YcEXSF7Zo1azwIAyL8troQrBYEwo/wYaTTvXt3lxSqmo8BhZ6xCBajiHLBggW%2bwDhasmSJTZ8%2b3WbMmOG457cVcYNxE5cKhiSrLK8guMQxQUzkd%2bAYQ0dorRgDI4fhCwnjSx/6wvxyGLyiDNDkgQB%2bGkNFK2NES2wgv41m5DOWGC2iy8OHD9v9%2b/ft7t27du3aNbt%2b/bq9f//evnz5Yp8/f87Rt2/f7NGjR/b69WtbsWKFR4bMo%2bIMUGAkqSAtFo1LghlYcaTEOxgUpwViInuInTt32oULF2zfvn22e/duO3DggN27d8%2bePXtmT58%2bdXry5Ik9f/7czp8/70xavHixxwmViAjzQkDBCW00vtc7WepokBSFALtM1J9Wfl/xgQj/j70ABplDgMljAOW6cGWdOnXKGUQ9o8VLoDFxGsCmatOmTXb16lW7dOmSSxhtuHXrlt25c8du376dI%2b6RPlCZOXOmM7niGiAIsDikxQYGiQEDVB4pTZs2zSUFMVGsO4FKaLWjNuDy5ct24sQJO3TokB09etRxjg349OmT45/2%2b/fvduXKFYcH7pCdYiY2QAsoFPtLSyShfF4AmMA03B/ubfbs2TZnzhxviQ9odQ3xbv78%2bQ4b2ZZMIKDtrKI%2bJpNk9xe1AVhyFnjw4EHbv3%2b/7dmzx3bt2uUt93v37vVrWhEag03AzWYGAbCPv0ZqSAW1JyosJJWoDQACZINOnz5tDx48cBuAm8MOAIkbN2749atXr%2bznz5/269cvd5cvX770yDAzCEh6Mni9evXyxUcNXaFoUEYQDUD9kSzGEDe4bds2d41btmyxrVu3uls8cuSIkzQA24MHydQNYtSie3RtjHjHtdroJikMhdEEGAkDYQr3EPdQuEjeQ%2bWI%2bVNBAJencBVrTyAEHLR/x1fzjH06EWIUGtIA1HjdunWu7vSDiUmyO%2bXc/CQOhdkBKpUFBIgEtX8nAiROgCFxuYPQCGLVjx075lAKkyzyIqE3KffOLzEEWJDSV4IAi1FkGGZvC0GAd/ShvzZPYRuX/kqacyjbdlheAEOE%2buOSyM6g7kACKCjDC1QKxQksHq0BTmFWGC3KlxWulP//X0YolJ7SYwQxTAp1BwI80y4RTOfL00WzwsBJKTEYCqSUDWYsiPc8r9QeIFYDFPDIwkczs1GVzZemissKR7PBasPrTCGAOiMJjBoGK2mBolBGCEahRag72R6CK1SdZ%2bwtIBVeMLaVlv5fDECdUXXUH2akqQMUSonBVOAD/oGPoIQHARqCVxbq/xcDaMNgpyauKISA4KIaITAQvMKsb02/WRIIyOfj/2uSlAw1AGmj5lh/AiikHVd0yWLxfzEAa406KhtcE3cUMgBmqgaoWmPUvmSx8LwQkEqWEgKQIBDWHdPWHMsOAflioFAKCLBALD3WnwwT12gBpS9aAqBK5v%2bKQoCoDTdYbO%2bfBgJYftwe0SS2ABuAZ%2bAeRqjgknbrmy8bVS0GaBBlessFAfYTCoZ0IkSw47sKmkIvEReAqZRfCs%2bRK4%2bzA0Q6SKVUEFAcgLRRdzQBjeCevQGtiiy859vcs%2bfAY2BApT284zktYwCpUuQO/yqPwwCsdKGKT1oNYJIsiuiSiWuBggPvsQ2KBmEYfXiHTdLiYQS/YQz68bwUwVNV9EiLYv%2bwLF6T8jiaBc6xMcoCQcoKqeZAP651FqkYBEoVPOUtj6MFqgojPU0srRegdrBs2TJbvXq1Z4fWrl0bS7xbtWqVLVy40OEQVx5PuhcpSXmcYEgHG2AA7ipteRwGkFGm/L106VJbvny5M4M2SixeNQMgIkP8T5XHw%2b1tNIOTjwEwD3yDc5XCheswJqClDyEz2pZ5eVzH2hQcQSyGsJbnxc4SMQalMdLe1PvC8vibN2/sw4cPXiaH3r17Zx8/frSHDx/aixcvXFtwk5kVRjBOSA1p4K6UFkNKuCfUmndY60LlcRhArp%2biCIzgmiqRzgGwWAohtG/fvrWLFy/azZs3HSaZMCCEgIKi6Nk9ZXEECxiWrzRGHzSJZAjpdBhHbjHMBUIwU0fj6If9yRQCtOAQ9wSFLgujqGcqmUeLGWF5nEovkj137pyXyc6cOeOlMSrBUaIfEIFJMDnT8jiTQN2JuMLyONIMy%2bPz5s3z4CRfeZxyOOcDWDzXx48fd8xTDv/69asfjaH98eOHLx47gEvMtDaoaxahMFkFDF2rxKX7qAbwjLgf5mHUOEdAkYRaIb4%2b7qQYz%2bmLbcn8lJjK4orGhPWQwmdxNoDNDhq0Y8cOL4pu3rzZi6S0FEYpkHIPcU6Qe/pibDOJA8LCiKw9BxcwTDUpjz9%2b/NhhwIEoPALukGMxXOMSf//%2bbX/%2b/HHvwH3m5XE%2bjI9XHMCGBbuQtjzOInBpuD4kzqEIJMyhiO3btzthF06ePGmnTp3yftgIGJ6JEYzW9KJH2RUJRut8Scrj8h60eA6dDQ43SfI6mRVHw/K4rD6hK1tTsMxWFWjgt3mG3yYiLFQeX7lypas6USRMle2IUvi8XAejE0MAqaH6YQGDaFChMG6Pa2L4uAxyWB7nDPDZs2dzjBKuo%2bXxShyMTgUBpa50UFJ/nFJ2V5ukQhAQTDTGP1kej4MAGFXwg5Qh1B1IECDxDi0oVB6nZdFoCNrDb/QPEIyr/jWik6Jcq2ZQ8fJ43GYIX8yklc5SCgsm0BLjh3%2bkyrcdVrqdcWgZk/EYX%2bePlSrLnAHRIkmomtr8pC2Ph56jWLY3Cwj8B3wHXPv917A6AAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"508\" alt=\"Debug Settings\" data-srcset=\"/assets/static/debugger-settings.c26726e.bf1f38dc1acf1c9937eeb997109de29d.png 508w\" data-sizes=\"(max-width: 508px) 100vw, 508px\" data-src=\"/assets/static/debugger-settings.c26726e.bf1f38dc1acf1c9937eeb997109de29d.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/debugger-settings.c26726e.bf1f38dc1acf1c9937eeb997109de29d.png\" width=\"508\" alt=\"Debug Settings\"></noscript></p>\n<p>and now when you press play you can press the apostrophe key and it'll show the ZombieCharacter's sight radius and also show when you're inside of it.</p>\n<h2 id=\"implementing-the-idle-and-roam-states\"><a href=\"#implementing-the-idle-and-roam-states\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Implementing the IDLE and Roam States</strong></h2>\n<p>So now that we have our ZombieCharacter detecting our PlayerCharacter, we should take a step back and first create the IDLE and ROAM states of the ZombieCharacter.</p>\n<p>We'll start with what variables we'll need for the ZombieCharacter:</p>\n<ul>\n<li>We'll need a variable named <code>StartLocation</code> that will be populated on <code>BeginPlay</code> with the current location of the ZombieCharacter. This is going to be used to limit the ZombieCharacter's roaming area by making it we always move it in reference to its starting location instead of their current location that they roamed to.</li>\n<li>We need a variable that tells the ZombieAIController whether this ZombieCharacter can roam or not. If this is set to <code>false</code> then the ZombieCharacter will never move unless it has spotted the PlayerCharacter and is chasing them.</li>\n<li>We need a variable for the speed of the ZombieCharacter while they're in the ROAM state.</li>\n<li>We need a variable that says how far from its starting location the ZombieCharacter can roam. This will be used by the ZombieAIController to choose a random spot within this area that the ZombieCharacter can walk to.</li>\n<li>We need a variable for how long of a delay we are going to have between roam calls. Setting this to a value above 0 will mean that after the ZombieCharacter has roamed to a location, they will wait x amount of seconds before they roam to another location.</li>\n</ul>\n<p>Now let's see what methods we need to add to the ZombieCharacter:</p>\n<ul>\n<li>We need to override <code>BeginPlay</code> to set the <code>StartingLocation</code> variable.</li>\n<li>We need to add a method to transition the ZombieCharacter to the IDLE state.</li>\n<li>We need to add a method to transition the ZombieCharacter to the ROAM state.</li>\n</ul>\n<p><strong>Note:</strong> While in our state transitions we're just going to set the new state and the new walk speed of the ZombieCharacter, you can add whatever properties you wish the ZombieCharacter to have in these states.</p>\n<p>Now let's head on over to the header and define what we discussed above:</p>\n<p><strong>ZombieCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The starting location of the ZombieCharacter, used when roaming.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> RoamState<span class=\"token punctuation\">)</span>\nFVector StartLocation<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Indicates whether the ZombieCharacter should be able to roam or not.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> RoamState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">bool</span> bCanRoam <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The max speed of the ZombieCharacter in the ROAM state.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> RoamState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> RoamSpeed <span class=\"token operator\">=</span> <span class=\"token number\">100.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The max range around its spawn point that the ZombieCharacter can roam.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> RoamState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> RoamRadius <span class=\"token operator\">=</span> <span class=\"token number\">300.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The amount of time to pause in between `Roam` calls. If set to 0 there will</span>\n<span class=\"token comment\">// be no delay.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> RoamState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> RoamDelay <span class=\"token operator\">=</span> <span class=\"token number\">3.f</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Then, we add a <code>protected</code> block with the <code>BeginPlay</code> method defined:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/**\n\t * Called when the game starts.\n\t */</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span></code></pre>\n<p>And lastly we define a public block with the IDLE and ROAM state transitions:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/**\n\t * Called to transition the ZombieCharacter to the IDLE state.\n\t */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ToIdleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called to transition the ZombieCharacter to the ROAM state.\n\t */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ToRoamState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the cpp file we create these methods and for the <code>ToRoamState</code> method we set the new <code>MaxWalkSpeed</code> of the ZombieCharacter:</p>\n<p><strong>ZombieCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the game starts.\n */</span>\n<span class=\"token keyword\">void</span> AZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the starting location of the ZombieCharacter.</span>\n\tStartLocation <span class=\"token operator\">=</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to transition the ZombieCharacter to the IDLE state.\n */</span>\n<span class=\"token keyword\">void</span> AZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">ToIdleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tPreviousState <span class=\"token operator\">=</span> State<span class=\"token punctuation\">;</span>\n\tState <span class=\"token operator\">=</span> ZombieStates<span class=\"token operator\">::</span>IDLE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to transition the ZombieCharacter to the ROAM state.\n */</span>\n<span class=\"token keyword\">void</span> AZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">ToRoamState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tPreviousState <span class=\"token operator\">=</span> State<span class=\"token punctuation\">;</span>\n\tState <span class=\"token operator\">=</span> ZombieStates<span class=\"token operator\">::</span>ROAM<span class=\"token punctuation\">;</span>\n\n\tUCharacterMovementComponent<span class=\"token operator\">*</span> ZombieMovement <span class=\"token operator\">=</span> <span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieMovement <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tZombieMovement<span class=\"token operator\">-></span>MaxWalkSpeed <span class=\"token operator\">=</span> RoamSpeed<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>You'll also need the following include for the above to work:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/CharacterMovementComponent.h\"</span></span></code></pre>\n<p>Now let's look at the ZombieAIController will need to make the ZombieCharacter roam.</p>\n<p>We're going to need the following variables:</p>\n<ul>\n<li>A variable for the timer that will be used to delay calls to the method that makes the ZombieCharacter roams. </li>\n</ul>\n<p>Now let's see what methods we need:</p>\n<ul>\n<li>We need to create the <code>Roam</code> method that will be called to make the ZombieCharacter roam to a random spot. This spot is chosen from a bounding box as wide as <code>RoamBox</code> and then a <code>MoveToLocation</code> command is issued to move the ZombieCharacter to that spot.</li>\n<li>We need to override the <code>BeginPlay</code> method so that we can set the ZombieCharacter to roam if it can.</li>\n<li>We need to override the <code>OnMoveCompleted</code> method which is called when a call to <code>Roam</code> is complete. This method will check to see if the ZombieCharacter is still in the ROAM state and if so then we set a timer to wait x amount of time before calling <code>Roam</code> again.</li>\n</ul>\n<p>So roaming is going to be a repeating sequence of these steps:</p>\n<ol>\n<li>The <code>Roam</code> method is called and the ZombieCharacter is put into the ROAM state and then the ZombieAIController picks a random spot from the <code>RoamBox</code>.</li>\n<li>A <code>MoveToLocation</code> command is issued to move the ZombieCharacter to the above location.</li>\n<li>Once the move is complete, the <code>OnMoveCompleted</code> method is called and this checks to see if the ZombieCharacter is still in the ROAM state and if so, it puts the ZombieCharacter in the IDLE state, so that the idle animation can play, and then it sets a timer that when it expires, it calls the <code>Roam</code> method all over again.</li>\n</ol>\n<p>Ok so let's define the variables and methods in the header file:</p>\n<p><strong>ZombieAIController.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The timer used to pause between `Roam` calls.</span>\nFTimerHandle RoamIdleTimer<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The amount of time to pause in between `Roam` calls.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> RoamState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> RoamDelay <span class=\"token operator\">=</span> <span class=\"token number\">3.f</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And then further down under the <code>protected</code> block:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the game starts.\n */</span>\n<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Called when a move request has been completed.\n */</span>\n<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>FAIRequestID RequestID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FPathFollowingResult<span class=\"token operator\">&amp;</span> Result<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Called to make the ZombieCharacter roam to a different location within its\n * roam radius.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Roam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now let's create the methods in the cpp file:</p>\n<p><strong>ZombieAIController.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the game starts.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Simple check but this can be made more complex.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieCharacter<span class=\"token operator\">-></span>bCanRoam<span class=\"token punctuation\">)</span> <span class=\"token function\">Roam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when a move request has been completed.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>FAIRequestID RequestID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FPathFollowingResult<span class=\"token operator\">&amp;</span> Result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>RequestID<span class=\"token punctuation\">,</span> Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> ZombieStates<span class=\"token operator\">::</span>ROAM<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieCharacter<span class=\"token operator\">-></span>RoamDelay <span class=\"token operator\">></span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// If there is a roam delay, we need to set the ZombieCharacter to the idle state</span>\n\t\t\t<span class=\"token comment\">// while we set a timer to run before `Roam` is called again.</span>\n\t\t\tZombieCharacter<span class=\"token operator\">-></span><span class=\"token function\">ToIdleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tUWorld<span class=\"token operator\">*</span> World <span class=\"token operator\">=</span> <span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>World <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span>RoamIdleTimer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AZombieAIController<span class=\"token operator\">::</span>Roam<span class=\"token punctuation\">,</span> ZombieCharacter<span class=\"token operator\">-></span>RoamDelay<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Otherwise we can just call `Roam` again instantly.</span>\n\t\t\t<span class=\"token function\">Roam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to make the ZombieCharacter roam to a different location within its\n * roam radius.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">Roam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Put the ZombieCharacter in the ROAM state if they are not already. This is important</span>\n\t<span class=\"token comment\">// because when this move is complete, it gets put into an IDLE state so we need to put</span>\n\t<span class=\"token comment\">// ourselves back into a ROAM state.</span>\n\tZombieCharacter<span class=\"token operator\">-></span><span class=\"token function\">ToRoamState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Choose a random point within a bounding box with an origin of the ZombieCharacter's</span>\n\t<span class=\"token comment\">// spawn location so that the ZombieCharacter will never roam to new places.</span>\n\tFVector RoamLocation <span class=\"token operator\">=</span> UKismetMathLibrary<span class=\"token operator\">::</span><span class=\"token function\">RandomPointInBoundingBox</span><span class=\"token punctuation\">(</span>ZombieCharacter<span class=\"token operator\">-></span>StartLocation<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span>\n\t\t\tZombieCharacter<span class=\"token operator\">-></span>StartLocation<span class=\"token punctuation\">.</span>X <span class=\"token operator\">+</span> ZombieCharacter<span class=\"token operator\">-></span>RoamRadius<span class=\"token punctuation\">,</span>\n\t\t\tZombieCharacter<span class=\"token operator\">-></span>StartLocation<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">+</span> ZombieCharacter<span class=\"token operator\">-></span>RoamRadius<span class=\"token punctuation\">,</span>\n\t\t\tZombieCharacter<span class=\"token operator\">-></span>StartLocation<span class=\"token punctuation\">.</span>Z\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">MoveToLocation</span><span class=\"token punctuation\">(</span>RoamLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>You'll also need to include the following header for <code>UKismetMathLibrary::RandomPointInBoundingBox</code>:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> \"Kismet/KismetMathLibrary.h</span></code></pre>\n<p>So now if you save and compile, and replace the instance of the ZombieCharacter in the scene just for good measure since we added more stuff in the constructor, you can press play and see this in action. You'll see the ZombieCharacter walk to a position nearby, wait for 3 seconds, then walk to another random nearby position.</p>\n<p>At this point you can mess with the <code>RoamDelay</code> to have less or more time in between <code>Roam</code> calls or you can just set it to 0 have no delay while roaming. If you're using the animations that I am, it might look a bit sudden when the ZombieCharacter transitions from walking to being idle. This is purely because I have limited access to animations but if you had more animations or were making your own you could make an in-between animation or blend animations for smoother transitions.</p>\n<h2 id=\"implementing-the-chase-and-attack-states\"><a href=\"#implementing-the-chase-and-attack-states\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Implementing the CHASE and ATTACK states</strong></h2>\n<p>So now that we have our ZombieCharacter's IDLE and ROAM states set up, let's set up the part that relies on the sight sense, chasing and attacking the PlayerCharacter.</p>\n<p>Again just like we did with the IDLE and ROAM state, let's go over what we need to add to the ZombieCharacter first.</p>\n<p>Here's the variables we'll need to create:</p>\n<ul>\n<li>We need a variable that defines how fast the ZombieCharacter will move will in the CHASE state.</li>\n<li>We need a variable for how long of a delay there should be between the ZombieCharacter chasing the PlayerCharacter and going back to the ROAM state if they can roam. This is to avoid an awkward transition from chasing straight to another animation. With a delay it'll look like the ZombieCharacter is still looking at the PlayerCharacter as they run away and after x seconds they'll go back to idle/roaming.</li>\n<li>Also we need a variable for how much damage an attack from the ZombieCharacter will do to the PlayerCharacter.</li>\n<li>Finally, we'll need a variable for the amount of time between attacks. This should be the same amount of time that the attack animation is so that we don't end the attack animation early.</li>\n</ul>\n<p>And then let's take a look at the methods we'll need:</p>\n<ul>\n<li>We need methods to transition the ZombieCharacter to the CHASE and ATTACK states just like we did for the IDLE and ROAM states.</li>\n</ul>\n<p>So let's get to defining these in the header file:</p>\n<p><strong>ZombieCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The max speed of the ZombieCharacter in the CHASE state.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> ChaseState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> ChaseSpeed <span class=\"token operator\">=</span> <span class=\"token number\">300.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The amount of delay after a chase after which the ZombieCharacter will</span>\n<span class=\"token comment\">// resume to roam. This is to help break up an awkward transition from chasing</span>\n<span class=\"token comment\">// straight back to roaming.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> ChaseState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> AfterChaseDelay <span class=\"token operator\">=</span> <span class=\"token number\">3.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The amount of damage that the ZombieCharacter does when attacking.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> AttackState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> AttackDamage <span class=\"token operator\">=</span> <span class=\"token number\">5.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The amount of delay between attacks, this should be the length of the attack</span>\n<span class=\"token comment\">// animation so that attack animations don't stack up.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> AttackState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> TimeBetweenAttacks <span class=\"token operator\">=</span> <span class=\"token number\">2.f</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And then further down where we defined <code>ToRoamState</code>:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called to transition the ZombieCharacter to the CHASE state.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToChaseState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Called to transition the ZombieCharacter to the ATTACK state.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ToAttackState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the cpp file we create the <code>ToChaseState</code> and <code>ToAttackState</code> methods. In the <code>ToChaseState</code> method we set the new state and change the max walk speed to the <code>ChaseSpeed</code> value and in the <code>ToAttackState</code> method we just change the state.</p>\n<p><strong>ZombieCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called to transition the ZombieCharacter to the CHASE state.\n */</span>\n<span class=\"token keyword\">void</span> AZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">ToChaseState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tPreviousState <span class=\"token operator\">=</span> State<span class=\"token punctuation\">;</span>\n\tState <span class=\"token operator\">=</span> ZombieStates<span class=\"token operator\">::</span>CHASE<span class=\"token punctuation\">;</span>\n\n\tUCharacterMovementComponent<span class=\"token operator\">*</span> ZombieMovement <span class=\"token operator\">=</span> <span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieMovement <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tZombieMovement<span class=\"token operator\">-></span>MaxWalkSpeed <span class=\"token operator\">=</span> ChaseSpeed<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to transition the ZombieCharacter to the ATTACK state.\n */</span>\n<span class=\"token keyword\">void</span> AZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">ToAttackState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tPreviousState <span class=\"token operator\">=</span> State<span class=\"token punctuation\">;</span>\n\tState <span class=\"token operator\">=</span> ZombieStates<span class=\"token operator\">::</span>ATTACK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now it's time for the fun part again, adding all of the functionality to the ZombieAIController to enable the ZombieCharacter to chase and attack the PlayerCharacter.</p>\n<p>We're only going to need one new variable here:</p>\n<ul>\n<li>We need a another <code>FTimerHandle</code> to handle the delay between the ZombieCharacter chasing the PlayerCharacter and going back to what it was doing before.</li>\n</ul>\n<p>And now for the methods:</p>\n<ul>\n<li>A <code>Chase</code> method that takes the PlayerCharacter as an argument and it calls <code>MoveToActor</code> as long as the PlayerCharacter has been seen by the ZombieCharacter.</li>\n<li>A <code>StopChase</code> method that stops the ZombieCharacter from chasing the method and sets the timer to make the ZombieCharacter idle after it has lost sight of the PlayerCharacter for a period of time before they go back to the ROAM state.</li>\n<li>A <code>IdleOrRoam</code> method that will replace the call to <code>Roam</code> in the <code>BeginPlay</code> method. This has been moved into its own method because now we need to check if the ZombieCharacter was in the CHASE state previously and if so we update the <code>StartLocation</code> of the ZombieCharacter so that they don't walk all the way back to their initial starting location before they roam again. Instead the ZombieCharacter will now begin roaming at the location they stopped chasing the PlayerCharacter.</li>\n</ul>\n<p>Let's go ahead and define all this in the header first:</p>\n<p><strong>ZombieAIController.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Checks to see if the PlayerCharacter should be idling or roaming and then proceeds to do so. If\n * the ZombieCharacter's `PreviousState` was `CHASE` and the ZombieCharacter is supposed to roam then\n * the `StartLocation` will be updated to be the current location as we don't want the ZombieCharacter\n * to go all the way back to the initial `StartLocation`.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">IdleOrRoam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Called to make the ZombieCharacter chase the PlayerCharacter.\n *\n * @param PlayerCharacter The PlayerCharacter to chase.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Chase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">APlayerCharacter</span><span class=\"token operator\">*</span> PlayerCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Called to make the ZombieCharacter stop chasing the PlayerCharacter and go\n * back to being idle/roaming.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">StopChase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And now in the cpp file we create these methods:</p>\n<p><strong>ZombieAIController.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the game starts.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Put the ZombieCharacter in the IDLE or ROAM state depending on whether they can roam or not.</span>\n\t<span class=\"token function\">IdleOrRoam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Checks to see if the PlayerCharacter should be idling or roaming and then proceeds to do so. If\n * the ZombieCharacter's `PreviousState` was `CHASE` and the ZombieCharacter is supposed to roam then\n * the `StartLocation` will be updated to be the current location as we don't want the ZombieCharacter\n * to go all the way back to the initial `StartLocation`.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">IdleOrRoam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieCharacter<span class=\"token operator\">-></span>bCanRoam<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Check to see if the previous state was `CHASE` because if so we need to set the `StartLocation`</span>\n\t\t<span class=\"token comment\">// to the ZombieCharacter's current location.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieCharacter<span class=\"token operator\">-></span>PreviousState <span class=\"token operator\">==</span> ZombieStates<span class=\"token operator\">::</span>CHASE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tZombieCharacter<span class=\"token operator\">-></span>StartLocation <span class=\"token operator\">=</span> ZombieCharacter<span class=\"token operator\">-></span><span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Call the `Roam` method so the ZombieCharacter starts roaming.</span>\n\t\t<span class=\"token function\">Roam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tZombieCharacter<span class=\"token operator\">-></span><span class=\"token function\">ToIdleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to make the ZombieCharacter chase the PlayerCharacter.\n * \n * @param PlayerCharacter The PlayerCharacter to chase.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">Chase</span><span class=\"token punctuation\">(</span>APlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tZombieCharacter<span class=\"token operator\">-></span><span class=\"token function\">ToChaseState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">MoveToActor</span><span class=\"token punctuation\">(</span>PlayerCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to make the ZombieCharacter stop chasing the PlayerCharacter and go\n * back to being idle/roaming.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">StopChase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// First we have to stop all movement so the ZombieCharacter quits chasing the PlayerCharacter</span>\n\t<span class=\"token comment\">// since they're not supposed to see them anymore.</span>\n\t<span class=\"token function\">StopMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieCharacter<span class=\"token operator\">-></span>AfterChaseDelay <span class=\"token operator\">></span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tUWorld<span class=\"token operator\">*</span> World <span class=\"token operator\">=</span> <span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>World <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// If there is an after chase delay then we set the PlayerCharacter to the IDLE state until the</span>\n\t\t\t<span class=\"token comment\">// `ChaseIdleTimer` expires and runs the `IdleOrRoam` method.</span>\n\t\t\tZombieCharacter<span class=\"token operator\">-></span><span class=\"token function\">ToIdleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span>ChaseIdleTimer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AZombieAIController<span class=\"token operator\">::</span>IdleOrRoam<span class=\"token punctuation\">,</span> ZombieCharacter<span class=\"token operator\">-></span>AfterChaseDelay<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Otherwise if there is no delay we can just go straight to the `IdleOrRoam` method.</span>\n\t\t<span class=\"token function\">IdleOrRoam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>So at this point if you save, compile, and press play you'll notice the ZombieCharacter roaming just like before but now if you get close enough in front of it, the ZombieCharacter will start chasing you until you get out of its vision range (which you can see by pressing the single quote key). If you left the PlayerCharacter and ZombieCharacter movement values to the defaults you should easily be able to run out of the ZombieCharacter's field of view and when you do the ZombieCharacter will stop and look at you and then after the <code>AfterChaseDelay</code>, it will go back to being idle or roaming.</p>\n<p>You might notice that if you let the ZombieCharacter catch up to you and move, the ZombieCharacter will awkwardly run in place as it its still chasing you but it won't move. This is intended as it leaves room for the attack logic which we'll add next.</p>\n<p>So to start setting up attacking, we'll need a <code>UBoxComponent</code> to act as a damage collider. If the PlayerCharacter is within this box then the ZombieCharacter will start attacking the PlayerCharacter and when the PlayerCharacter leaves the box then the ZombieCharacter will go back to chasing the PlayerCharacter.</p>\n<p><strong>ZombieCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// When the ZombieCharacter attacks we check to see if the PlayerCharacter</span>\n<span class=\"token comment\">// is inside of this collider.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleDefaultsOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UBoxComponent</span><span class=\"token operator\">*</span> ZombieDamageCollider<span class=\"token punctuation\">;</span></code></pre>\n<p>And now we'll need to bind some methods to respond to a component entering and exiting the <code>DamageCollider</code> but we're going to do this in the ZombieAIController class because we want to handle all of the logic in there. Let's take a look at what we'll need:</p>\n<ul>\n<li>We need to create two methods: <code>OnComponentEnterDamageCollider</code> and <code>OnComponentEnterDamageCollider</code>. These methods will be bound to the <code>DamageCollider</code> to respond to when a component enters and leaves the <code>DamageCollider</code>.</li>\n<li>In the <code>OnComponentEnterDamageCollider</code> method we'll have to try to cast the <code>OtherActor</code> to our PlayerCharacter and if we can, then we know that the PlayerCharacter is in attack range so we call the <code>ToAttackState</code> method of the ZombieCharacter to make the attack animation play.</li>\n<li>In the <code>OnComponentLeaveDamageCollider</code> method we'll again have to try to cast the <code>OtherActor</code> to our PlayerCharacter and if we can, then we know that the PlayerCharacter has left attack range to we call the <code>Chase</code> method to make the ZombieCharacter to back to chasing the PlayerCharacter.</li>\n</ul>\n<p><strong>ZombieAIController.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when an actor enters the ZombieCharacter's DamageCollider.\n */</span>\n<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">OnComponentEnterDamageCollider</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Called when an actor leaves the ZombieCharacter's DamageCollider.\n */</span>\n<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">OnComponentLeaveDamageCollider</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>In the cpp file we bind the above methods in the <code>OnPossess</code> method after we have the reference to our ZombieCharacter and then create the methods with the logic we discussed above:</p>\n<p><strong>ZombieAIController.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the ZombieAIController takes over the ZombieCharacter.\n *\n * @param ZombiePawn The ZombieCharacter pawn.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>APawn<span class=\"token operator\">*</span> ZombiePawn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>ZombiePawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Attempt to cast the Pawn that was taken over to a ZombieCharacter and if</span>\n\t<span class=\"token comment\">// successful then we assign it to our `ZombieCharacter` variable.</span>\n\tZombieCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AZombieCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ZombiePawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Bind the methods to respond to a component entering or exiting the ZombieCharacter's</span>\n\t<span class=\"token comment\">// DamageCollider component.</span>\n\tZombieCharacter<span class=\"token operator\">-></span>ZombieDamageCollider<span class=\"token operator\">-></span>OnComponentBeginOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AZombieAIController<span class=\"token operator\">::</span>OnComponentEnterDamageCollider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tZombieCharacter<span class=\"token operator\">-></span>ZombieDamageCollider<span class=\"token operator\">-></span>OnComponentEndOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AZombieAIController<span class=\"token operator\">::</span>OnComponentLeaveDamageCollider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when an actor enters the ZombieCharacter's DamageCollider.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">OnComponentEnterDamageCollider</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Try to cast the `OtherActor` to our `PlayerCharacter` and if we can then we</span>\n\t<span class=\"token comment\">// switch the ZombieCharacter to be in the ATTACK state.</span>\n\tAPlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>APlayerCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OtherActor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PlayerCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\tZombieCharacter<span class=\"token operator\">-></span><span class=\"token function\">ToAttackState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when an actor leaves the ZombieCharacter's DamageCollider.\n */</span>\n<span class=\"token keyword\">void</span> AZombieAIController<span class=\"token operator\">::</span><span class=\"token function\">OnComponentLeaveDamageCollider</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Try to cast the `OtherActor` to our `PlayerCharacter` and if we can then we</span>\n\t<span class=\"token comment\">// switch the ZombieCharacter to be in the CHASE state since it means that the</span>\n\t<span class=\"token comment\">// PlayerCharacter is running away.</span>\n\tAPlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>APlayerCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OtherActor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PlayerCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">Chase</span><span class=\"token punctuation\">(</span>PlayerCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now if you save and compile this and press play, you can see that if you get the ZombieCharacter to chase you and then you let it catch you, the ZombieCharacter will start attacking you. Now if you get out of attack range of the ZombieCharacter you'll see that the ZombieCharacter goes back to chasing you until you either come in attack range again, or leave the sight radius.</p>\n<h2 id=\"implementing-the-dead-state\"><a href=\"#implementing-the-dead-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Implementing the DEAD state</strong></h2>\n<p>Last thing we have to do is have implement the DEAD state and for this we're going to have to make the following additions:</p>\n<ul>\n<li>Add a <code>bIsDying</code> variable to the ZombieAnimInstance so that the animator knows when it should play the zombie death animation.</li>\n<li>Add a <code>Damage</code> variable to the PlayerCharacter to set how much damage the BulletActor should do. This is set here and in BulletActor because we want it to be editable and we don't have a great way of editing BulletActor variables without blueprints so we'll just have damage here which will be passed to the BulletActor when spawned. We also need to modify the <code>Fire</code> method so that we pass this damage to the BulletActor.</li>\n<li>Add a damage variable and modify the <code>OnBulletHitComponent</code> method of the BulletActor so that it checks whether the BulletActor hit a ZombieCharacter and if so it calls the <code>Hit</code> method on the ZombieCharacter.</li>\n<li>Create a variable for health and a <code>Hit</code> method on the ZombieCharacter that is used to deal damage to the ZombieCharacter and also check to see if it's dead in which case we un-possess the ZombieCharacter and call <code>Destroy</code> on the ZombieAIController so that it doesn't try to move the ZombieCharacter anymore. Notice that instead of a <code>Hit</code> method we could override the <code>TakeDamage</code> method but this is a very simple example so we'll just make something simple.</li>\n<li>Lastly we have to add the zombie dying state to the animation blueprint and make sure that this animation doesn't loop.</li>\n</ul>\n<p>So now that we have that laid out for us, let's start by adding the <code>bIsDying</code> variable to the ZombieAnimInstance class:</p>\n<p><strong>ZombieAnimInstance.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Indicates whether the ZombieCharacter is dying or not.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">bool</span> bIsDying<span class=\"token punctuation\">;</span></code></pre>\n<p>And then in the cpp file we modify the <code>UpdateAnimationProperties</code> to include the <code>bIsDying</code> variable:</p>\n<p><strong>ZombieAnimInstance.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Used by the animation blueprint to update the animation properties above\n * and decide what animations to play.\n */</span>\n<span class=\"token keyword\">void</span> UZombieAnimInstance<span class=\"token operator\">::</span><span class=\"token function\">UpdateAnimationProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Try to get the Pawn being animated and return if a nullptr.</span>\n\tAPawn<span class=\"token operator\">*</span> ZombiePawn <span class=\"token operator\">=</span> <span class=\"token function\">TryGetPawnOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombiePawn <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Try to cast the Pawn to our ZombieCharacter since that's the only</span>\n\t<span class=\"token comment\">// thing we want to animate.</span>\n\tAZombieCharacter<span class=\"token operator\">*</span> ZombieCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AZombieCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ZombiePawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the variables that are dependent on states.</span>\n\tbIsRoaming <span class=\"token operator\">=</span> ZombieCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> ZombieStates<span class=\"token operator\">::</span>ROAM<span class=\"token punctuation\">;</span>\n\tbIsChasing <span class=\"token operator\">=</span> ZombieCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> ZombieStates<span class=\"token operator\">::</span>CHASE<span class=\"token punctuation\">;</span>\n\tbIsAttacking <span class=\"token operator\">=</span> ZombieCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> ZombieStates<span class=\"token operator\">::</span>ATTACK<span class=\"token punctuation\">;</span>\n\tbIsDying <span class=\"token operator\">=</span> ZombieCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> ZombieStates<span class=\"token operator\">::</span>DEAD<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now let's head over to the PlayerCharacter and add our <code>Damage</code> variable that can be edited:</p>\n<p><strong>PlayerCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The amount of damage each shot of the PlayerCharacter's gun does.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Player<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> Damage <span class=\"token operator\">=</span> <span class=\"token number\">10.f</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the cpp file we modify the <code>Fire</code> method so we can pass this <code>Damage</code> variable to the BulletActor when it's spawned:</p>\n<p><strong>PlayerCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the Fire input action is pressed.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">Fire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if `GetWorld()` returns a nullptr.</span>\n\tUWorld<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> World <span class=\"token operator\">=</span> <span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>World <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> FRotator SpawnRotation <span class=\"token operator\">=</span> <span class=\"token function\">GetControlRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Since the `BulletSpawnLocation` is in camera space, we have to transform it to</span>\n\t<span class=\"token comment\">// world space before offsetting it from the character location to find the final</span>\n\t<span class=\"token comment\">// bullet spawn location.</span>\n\t<span class=\"token keyword\">const</span> FVector SpawnLocation <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>BulletSpawnLocation <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> BulletSpawnLocation<span class=\"token operator\">-></span><span class=\"token function\">GetComponentLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> SpawnRotation<span class=\"token punctuation\">.</span><span class=\"token function\">RotateVector</span><span class=\"token punctuation\">(</span>GunOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set Spawn Collision Handling Override.</span>\n\tFActorSpawnParameters ActorSpawnParams<span class=\"token punctuation\">;</span>\n\tActorSpawnParams<span class=\"token punctuation\">.</span>SpawnCollisionHandlingOverride <span class=\"token operator\">=</span> ESpawnActorCollisionHandlingMethod<span class=\"token operator\">::</span>AdjustIfPossibleButDontSpawnIfColliding<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Spawn the BulletActor and pass the `Damage` value over to it.</span>\n\tABulletActor<span class=\"token operator\">*</span> BulletActor <span class=\"token operator\">=</span> World<span class=\"token operator\">-></span>SpawnActorDeferred<span class=\"token operator\">&lt;</span>ABulletActor<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ABulletActor<span class=\"token operator\">::</span><span class=\"token function\">StaticClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FTransform<span class=\"token operator\">::</span>Identity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> ESpawnActorCollisionHandlingMethod<span class=\"token operator\">::</span>AdjustIfPossibleButDontSpawnIfColliding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBulletActor<span class=\"token operator\">-></span>Damage <span class=\"token operator\">=</span> Damage<span class=\"token punctuation\">;</span>\n\tUGameplayStatics<span class=\"token operator\">::</span><span class=\"token function\">FinishSpawningActor</span><span class=\"token punctuation\">(</span>BulletActor<span class=\"token punctuation\">,</span> <span class=\"token function\">FTransform</span><span class=\"token punctuation\">(</span>SpawnRotation<span class=\"token punctuation\">,</span> SpawnLocation<span class=\"token punctuation\">,</span> <span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Get the animation object for the PlayerCharacter's body mesh and play the fire animation.</span>\n\tUAnimInstance<span class=\"token operator\">*</span> AnimInstance <span class=\"token operator\">=</span> PlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">GetAnimInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AnimInstance <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\tAnimInstance<span class=\"token operator\">-></span><span class=\"token function\">Montage_Play</span><span class=\"token punctuation\">(</span>GunFireAnimation<span class=\"token punctuation\">,</span> <span class=\"token number\">1.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Next we head on over to the BulletActor so we can add the <code>Damage</code> variable to it:</p>\n<p><strong>BulletActor.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The damage this BulletActor should do.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> Damage<span class=\"token punctuation\">;</span></code></pre>\n<p>In the cpp file we have to try to cast what we hit to a ZombieCharacter since we only want to deal damage to that and if we can cast it then we'll call the <code>Hit</code> method of the ZombieCharacter passing in <code>Damage</code> which we'll create next.</p>\n<p><strong>BulletActor.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the BulletActor hits another component.\n */</span>\n<span class=\"token keyword\">void</span> ABulletActor<span class=\"token operator\">::</span><span class=\"token function\">OnBulletHitComponent</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> HitComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> FVector NormalImpulse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> Hit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// We want to return early if anything is null as it could cause a crash otherwise.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherComp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Cast the `OtherActor` to a `ZombieCharacter` if we can and call its `TakeDamage` method.</span>\n\tAZombieCharacter<span class=\"token operator\">*</span> ZombieCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AZombieCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OtherActor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tZombieCharacter<span class=\"token operator\">-></span><span class=\"token function\">Hit</span><span class=\"token punctuation\">(</span>Damage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Finally destroy the the BulletActor so we don't end up with a bunch of bullets that</span>\n\t<span class=\"token comment\">// litter the level and impact performance.</span>\n\t<span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Moving on we define the <code>Health</code> variable and <code>Hit</code> method for the ZombieCharacter:</p>\n<p><strong>ZombieCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The amount of health the ZombieCharacter has.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Zombie<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> Health <span class=\"token operator\">=</span> <span class=\"token number\">100.f</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And then further down where we define the state methods:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called to make the ZombieCharacter take damage and check to see if the\n * ZombieCharacter needs to die.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Hit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Damage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And in the cpp file we create the <code>Hit</code> method and in it we subtract the <code>Damage</code> from the <code>Health</code> and if the <code>Health</code> is now at or below 0, then we have the ZombieAIController un-possess the ZombieCharacter and then destroy it so that it won't try to move the ZombieCharacter any further:</p>\n<p><strong>ZombieCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called to make the ZombieCharacter take damage and check to see if the\n * ZombieCharacter needs to die.\n */</span>\n<span class=\"token keyword\">void</span> AZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">Hit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Damage<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Take the damage to apply from the ZombieCharacter's damage.</span>\n\tHealth <span class=\"token operator\">-=</span> Damage<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If the ZombieCharacter's `Health` is at or below zero then we have take care of disabling the</span>\n\t<span class=\"token comment\">// ZombieAIController.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Health <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Have the ZombieAIController un possess the ZombieCharacter and then destroy the</span>\n\t\t<span class=\"token comment\">// ZombieAIController so it doesn't give any more input to the ZombieCharacter.</span>\n\t\tAAIController<span class=\"token operator\">*</span> ZombieAIController <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AAIController<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">GetController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieAIController <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\tZombieAIController<span class=\"token operator\">-></span><span class=\"token function\">UnPossess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tZombieAIController<span class=\"token operator\">-></span><span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Put the ZombieCharacter in the `DEAD` state so that the animation blueprint will play</span>\n\t\t<span class=\"token comment\">// the zombie dying animation.</span>\n\t\t<span class=\"token function\">ToDeadState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Finally we just have to make sure to add the zombie dying animation to the animation blueprint and make sure that it doesn't loop. So in the animation blueprint just make a connection from every state to the dying state and set it to trigger when <code>Get Is Dying</code> is set to <code>true</code> like so:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 924 541' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-7a088eace4d1073b7a043889c6be92cf'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-7a088eace4d1073b7a043889c6be92cf)' width='924' height='541' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAlCAYAAADyUO83AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAJeklEQVRo3sVaWW8cxxHWzwiCUOTeMzv3zl5cknuRoh1eMkORMizREh3FMqLEMmDHAmyTCBIEeQjgpwB5T57yC/I/kre853dU6quenu2dPbi7oq2H5vT21FR3V1d9dTTvFQoFsiyLqtWqNNu25VkqlaRvNoyXy%2bWU3hwHfaVSkXd6HH2MT%2bM/j4/um9%2bA3hyfxUe/n8VHj2Ot6N8rFovCwHGclBB9MDY/1uP4EAxMev2u1WpRs9mkWq1G9XqdGo0GRVEk/Sz/aXxmzas3uuh6pvHR77UgsWf0UwEsM2FWYGAYhKEI4Oj4iC4/vqSLx4%2blf35xTs1WcyEBzJp33nr0hpbhMyEAzcBsWKD5e9rC08bvAs%2bjkE87CAI%2b%2bTo1%2bfTr/IxEG2JyXW%2b0cHcGH%2bPksnPPW495wiafLG/NB89UABsbGwQh4IfZgA3ZMXyMcdhOGTbEY2guM%2bvwhkFTBBZwC2yL6Uu0kcuRw7RB4FPF5hNIsELzQd%2bcI5/PT8y7yHpMPujP4wN67Bk097IgOEuF9GmZJhC6Lln8u7u1Jeqfnh63yHfJ850UdELPJb8W8XtvArzMNg8Es2OmSk8DwSxvE0zHQHCWKuLp8SZdVlkXfd6EZbEAmN7n3zus9nVW%2be3tbZGmk0wE2lrgiQBGQmGBBSyUekS1YUwVqzw2bxa8ZqnuPJPMmsA0Pnp8IRAslSu0nitQrliWli9Balh44nZYgjudDr1584YODg6UEHgilzcrGuA5Cb0SWMPzyY34u5rLC7eSeVcDQb3pO9cAfYK5QpHOf96jP79%2bSt9dHdO3zw/p5pfH1IkDPj02gapNm%2bzytlj9T09PqdvtCkMRgOOkJiCqzjwbPLbJ2uSzNnmsHZblyeYdp/pu3aAGFzDSzLCBn67dp99/dkH/%2b9df6d9/v6H//OOG/vvPP9LhYJN%2b8rN13ohL%2b3t7whg88oW8kjILxuWnmECiAanKMX%2b8iyKPAZFV2vb5e3fs5LIBz4%2bCAQheOqzKADJBVCa6v5Gnq7P36W/fvqC/fPmMvv/dFX3/9RV9dXVKXz5/SJ9cHLPbi2ljfV0QFd4kn8tLK7JAor5PZbtE99fWxTQK%2bYIIKsfvrWKJSjYLrVjgb21%2bz/18TmjW1tYUfaEw1sA/O5bOy/To30avx0GfY%2b%2b0zmu/h0jt/PycXr16RS9fvqTNzU3q9Xq00%2bvTH754Ts/P3qNPnz2mr1%2b/pN%2b8eEKff3pJf3rza/rmV2dU4tOO4pCCKCCHT9sPffIjn3/D1i0KYlZzjEf%2bRIvbsZjPcLhLg8GQBsMB9fo92t/fp36/L/GEqbrzQHCZOGACBPHHYzTHhL7vp2p0fz1HV7/Yp5vPHtEXHx/zyX8gJ//68pi%2beXFK1799RsMH71N/0KMet%2b2dbdlAl9tg0KePPrygB%2b/tUWe7I%2b/N1u13ReOCMKD%2bsE9nj87oER8ChIAocjAYpGvJLvzOI0GohbZ9EwzLiWRrfKq10BObjnHCjk3NOKKjo4OEqS%2b%2bvcRqjZigwp7DZ7S/ub6WE4bK2ZaaUFpFJUteyIDIgrckYFKxhecFoqY4EN8PxjzE24LgwqFwloFtq2aJZijBFHmzvV6XMaPGjBj0XJyWJ8%2bqeIEqddpN1ipPQDCrhi48BNwh3Kk5b9UVPsrNMh83nBDAXcQBExqwUDJkRIIIZ6HC7XYjWaxGad4YLzrkBk3xA9Bn0lgIjAMi17Mn0B58KhVbNg6%2bjhNwP5D%2bvHT4rbwA0FDH0mYzY28dZ1fk9IvSkNz0etv8bVGNA5WZT4030fMjdnc%2bv48orlmiMZpvGW6RN191yul4Noa3LIBelc1gi4WAHEOvZ7Q%2bMxfIrjE7bn6jx9NcYNV02GM77zPgwdcrlGbJyglbkvxEEgeADzTHT%2bzZFpogxm9LzGc6eKlvbDsU84NGYPM/WDq8bDKkGQAHGo1IgE0ztpNI0gyFHceTTQhWIBCqeyqnsOYtXGGLEh7clitjswQwLamaJwCtEStVhDSjer3BcUOT8/uqbEgvBLnAeDKULJDDXy/kZIgTIiVIPa89c14IDgJU2BCM4cU7qwipzdfZFR6xFuywEFzWBEcWqQUQBaNcoMpqjEAp6DCohQ7FLACgvUqNmTbs8eZqBphWJ4QA3tAGCENtxvlhK0ImA9PF4EOAx%2bHhIV1/d82p8BbH9hgvib2a6bBvpMNV1pJqi3mEqB16IjTbhpmgRtAQYSAxmuW%2bYAJq8xyL%2bJscQ7QTr/GW6fCqFSE0xNIQQMiB0sZGLqWzEAw5wIOKxPl6HKjvBtAS/l1R8bvSKOCBI%2biv6EtT1wMhQBMqFZ%2b/tQR4V6ksjVWEVgFBjRl4ttubHBM0R2V0bQIGCKo4IjGDyBUN0XWCcRPzmb86aW3n2fUAB7Qp3Fk2uGpVGCAWhiEnND1mVhjZrIkBhgAQAIU1V%2bx3XlVYew3tAcaxwUk8SiixyJ25wVXvBRC39zm5cRxr5AWmlMSElk8/CNwF0FuNww1qQWQxCeOeV3u39wL6N7K/MHRTPkoDvHEN4BbWcbLVWzVgfF5HBKBAcBRQ4el5sVSWRu50hWRomarwtGou/H%2br1eYWq02JAHizPuJ9o8rLG4f96xLYKlXhkWl4ht2HiTu1Uy%2b0FAas6gU06qo6oMupb1PuAeTOgJvvWmIW8A6SKnPoG0ZVAb/F7wWK4iFG6yklHkO5RTzhWSAEeIeV7gXu4mZI1DsMxCXu7u3S3t4ePXiwR4Nhn3Z3dxkkh7SzsyPpsdQcJ26GJjEAaB8EndQTwOUpmtGJon6gTCNk2pbkF7PWv1JZfJm7QXgDXI2hqoP7wJMPHtIuC%2bH45JiOTo6o1W5JAqWSG1UWRx/aM4rsXCPpgbtrpzigQnAnoXfTSBB8YAJB0OY19NPbaX2wZtObfmsQnAZeSgvCVLraQ2h6vFPJTcDjYZLc%2bIk7C5IWSkCkfT3qC/o96DWNej/io7ABt9Bdjkva0hrNhhR5zYZba40xK4fC89yObNyeUs62zeKHDqjKCXqbAjbT4erYHJMHMuKjANBiAdRos9Ohg8MDevLkiWji4dEhPb18SicPTyiO40kTuKt/kJiVli7iTVTZbfIfJDSq3/YPEnodKOyiyo2CKgquYRSK5uHkUfpHf%2bIfJFapCC1CP6syM82bzKrwTKvkzKMXD5SsQe8r2yYqQqveDs8KMG4bN%2b/0Fo0DFr0bXLYgMvd2eKl/kMhcUMwbv43Pj/0PEv8HTAXqV19J/ZYAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"924\" alt=\"Zombie Animation Dying\" data-srcset=\"/assets/static/zombie-animation-dying.82a2fbd.c458ab9ed06e67d8c8df2ab5f27dd5a7.png 480w, /assets/static/zombie-animation-dying.109a16b.c458ab9ed06e67d8c8df2ab5f27dd5a7.png 924w\" data-sizes=\"(max-width: 924px) 100vw, 924px\" data-src=\"/assets/static/zombie-animation-dying.109a16b.c458ab9ed06e67d8c8df2ab5f27dd5a7.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/zombie-animation-dying.109a16b.c458ab9ed06e67d8c8df2ab5f27dd5a7.png\" width=\"924\" alt=\"Zombie Animation Dying\"></noscript></p>\n<p>Now double click in this animation and in the settings on the right make sure that Loop Animation isn't ticked like so:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1104 454' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-c3de4533821366daea4ecb2d8bb3056b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-c3de4533821366daea4ecb2d8bb3056b)' width='1104' height='454' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAaCAYAAAAHfFpPAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAG6klEQVRYw9VZWVNURxjlySTKqiyCDLPvwLDMMMMy7MO%2bgwQJRQwWSkUwwVIrDyFlYvIQjA/GZy2rLC2tslx%2b4Umfxu9Wc5mBQZJK8XCq%2b3b31/d%2bp7%2btZwrKy8tRUVGByspKsE9cuHBBt1VVVXpOxtmXOXPcnDt//vyBuWyyfB/3J6qrq/UcYf%2bO0tJS1NTUoLu7G1NTU5iZmcHw8DAaGxsRi8U0GhoaUF9fvw8cM8H1e4jpNhqNatmCQCAAO7xeL4LB4IFxjnHO7/cfmOezz%2beD2%2b0%2bVDbb%2bwjuSXnzmetdLpceT6VS6O/vx8DAgEZbWxuSySQSiQTa29sxNDSkkclkNPr6%2bvT6np4epNNpdHR0KLSrfRJItSf1mvb2FApCoRDC4bAFPvPl5piMsxVl7POEKGmuN/vc1/4%2bU5Z7y3o%2bc73H49EtFZicnMTs7CzGxsa0UgIqs7KyorG8vIwrV67odYuLixrz8/OYnp7BxMQI%2bgc6FVG92N7e1nIFfBFfKJCTlL45LuTwQ%2b0ybMV6csly32zvE1khSMgQixICJiYmNOgK09PTmghawdLSEp4%2bfYoXL17g1atXGq9fv8aDBw/Q1dWFzs5Oi6yurrS2io2NDW1JOV0gl6mKC2SbO8wFjtqXskKQPHO90%2bnUfbEAgZg6CeDJU%2bF3797hw4cPeP/%2bPT5%2b/IiHDx9qpRk/BHzu7e3F5uYmBgcHUZDNHMUU7YhEItbpZ5sT62H/uPtSlhBZIUJcgKdoEsCTpUJCwMuXL/HmzRu8ffvWwu7urqW0ScA%2bC8g3BphKHObHhxFwkhjAoCbK0/zpCnNzc1hYWNBkmG4kYLQX5cUFpN/S0qLbU0OA3QVIAE%2bQlkESHj9%2brOPAs2fPNJ4/f46dnZ2sLkALWF9fP10WIEGQgY8tSWCaowsw0j958jcePdpVeGThzp07OWPAzZs392LAaSGAuX58fFxnALYsiEgG64PZ2TmsrV1Fc3NYoUWhSaFZ1whmujQJ2Nrayh4E/08CpL7IRgA/WnyfyrPooflTKUlzPT29ep2Apm6evmkFIltgT2lSgf1XafAwWakEpSq0p0FRjKbP1jzVXMoehQKzKBHISdkhp2gvZswq0awEj7OvECGyQgQJlVKYdwAph/lMM2c0b2pqsvps8wFluD6rC%2bTK1yd1gaNkD3MBnhYLHyo/MjKiLYJpjoq0trZqfxcS8gHvEpQ7NUFwL9jN6ujPIMg%2ba3zGhNXVVV3ZMSMc5QoSBO/evbt3FzhNaZDmz4LIDHQS7DhnT3m5CGBLS6LcPgIiEYWwennAv9fPghO5wAkJMFOaHVIaH7bGvl5XglYtHgrD649ouDxKkUB07zmwB49PKRBkzb5HgF3Jo%2b8Cn%2b4RtqtyrruAxCISwJYE2Ov6XKebjwVYWSCgU04AsQY/hrrcGOxwoj/lQEa1Q51u3WY6XJjoUxeShIrKnqPTYEBZkI%2bpVNfkPo2APk23bmlJcsKmrKRfSYNU3kyD2RSwFzn5pj9ZqwlwevxYGXDjr43L%2bP36En69No%2bHP1zF/bV57Kr2t81vsDzRjdXpKOpDDni8fq2kefEIqg93ulxYnBzAnzvb%2bOPn29i5fQO//XRL4/69Lfxy7xZ%2b/P4apsaHEI%2b3WKcrtYfUCUIG5%2bvq6nQ/Hwv4rDogQt8MRTCfrkV3rBGdzXEkG2JINbUgEWtCsjWOuEoX1Q4vehM1SDSqvOwPHcj1EuTaWuoxnkkj06cqrY5W9KWT6E2n0NWRQHuqVaWgRuVObuVmLsuVCPH7k7jAZxEQpgLhKPpby1Fcdg6FpUUKhSgiyop0W6IwNjmF7uYq9KQa0NyaUHk0oXOvgHmVOdnt86JfpRefihXh%2bihKL5Thq8KzOFdciLNF51BUUoSSshJUVFbsiwX5BMHjBLl8YREw3FKuPrQQZwqLceZcEb5g%2bwlfFhWj0ulHIliCZEyZqQqG0U8nJ%2bCvrPzoi9VVKoD6UF1zEbWOSyg9X4ri0mJFYrFuCZJQXlF%2brCzAqC0p799EQSQSUuYYxs5yLTZXmjGdbsB8Xz0W%2bhstXFaY6q7HvSkH4lGXUjCc1QX40Q6Hw0Kto1YHMQ2XU49JX0rmfAlg1UYrE4uLx%2bP7rE8jEdeWaT0bYJFkygtUGlS%2bFgyjW0X49fEQ1jIhfDcYwLWhkIU1hRujYcymVbQ%2bIpfzY/m7vFiF3UJMq8mXAPmhlTc4gu4gP3bSKvi7v9frxuzX1zG3%2bC2GhwYxqq7KLJlHR0f1Ol6nWSozqJqwCiG/OlWnJ4Q6bxCXnD44vSGFoAWOe/xHF0K5LkNmJWiO5UMAswJPT2KAFD1SzFC5pJofyIxhMDOqq0LzPwQxdxJBSzLxD7n5PJ7p%2bDH8AAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1104\" alt=\"Dying Animation No Loop\" data-srcset=\"/assets/static/dying-animation-no-loop.82a2fbd.ed4bea5cd4c23fc4cbdacdb6263a84e6.png 480w, /assets/static/dying-animation-no-loop.2d81b5b.ed4bea5cd4c23fc4cbdacdb6263a84e6.png 1104w\" data-sizes=\"(max-width: 1104px) 100vw, 1104px\" data-src=\"/assets/static/dying-animation-no-loop.2d81b5b.ed4bea5cd4c23fc4cbdacdb6263a84e6.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/dying-animation-no-loop.2d81b5b.ed4bea5cd4c23fc4cbdacdb6263a84e6.png\" width=\"1104\" alt=\"Dying Animation No Loop\"></noscript></p>\n<p>At this point if you save and compile and press play, you should be able to shoot the ZombieCharacter as many times as it needs to get to 0 health or lower and you should see the dying animation play and no further movement from the ZombieCharacter.</p>\n<p><strong>Bonus</strong></p>\n<p>As a bonus we'll go over how to destroy the ZombieCharacter after a period of time. To do this, we create a timer that runs for the length of the zombie dying animation and after that we can use <code>SetLifeSpan</code> to destroy the ZombieCharacter after a period of time like so:</p>\n<p><strong>ZombieCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The amount of seconds long that the zombie dying animation is. This is used with</span>\n<span class=\"token comment\">// the `SecondsAfterDeathBeforeDestroy` variable to make sure that the dying animation</span>\n<span class=\"token comment\">// plays out fully before the ZombieCharacter is destroyed.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> DyingState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> DyingAnimationLengthInSeconds <span class=\"token operator\">=</span> <span class=\"token number\">3.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The amount of time after the ZombieCharacter dies that they will destroy. A value</span>\n<span class=\"token comment\">// of 0 means that the ZombieCharacter will be destroyed immediately after the dying</span>\n<span class=\"token comment\">// animation plays. A value below 0 means that the ZombieCharacter will never be destroyed.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> DyingState<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> SecondsAfterDeathBeforeDestroy <span class=\"token operator\">=</span> <span class=\"token number\">5.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/**\n\t * The timer used to wait until the dying animation has finished playing.\n\t */</span>\n\tFTimerHandle DeathAnimationTimer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/**\n\t * Called after the death animation finishes playing.\n\t */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">AfterDeathAnimationFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And then in the cpp file we set the timer to run after the ZombieAIController has been destroyed and we create the <code>AfterDeathAnimationFinished</code> method that the timer runs when finished to destroy the ZombieCharacter:</p>\n<p><strong>ZombieCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called to make the ZombieCharacter take damage and check to see if the\n * ZombieCharacter needs to die.\n */</span>\n<span class=\"token keyword\">void</span> AZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">Hit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Damage<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Take the damage to apply from the ZombieCharacter's damage.</span>\n\tHealth <span class=\"token operator\">-=</span> Damage<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If the ZombieCharacter's `Health` is at or below zero then we have take care of disabling the</span>\n\t<span class=\"token comment\">// ZombieAIController.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Health <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Have the ZombieAIController un possess the ZombieCharacter and then destroy the</span>\n\t\t<span class=\"token comment\">// ZombieAIController so it doesn't give any more input to the ZombieCharacter.</span>\n\t\tAAIController<span class=\"token operator\">*</span> ZombieAIController <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AAIController<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">GetController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ZombieAIController <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\tZombieAIController<span class=\"token operator\">-></span><span class=\"token function\">UnPossess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tZombieAIController<span class=\"token operator\">-></span><span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Put the ZombieCharacter in the `DEAD` state so that the animation blueprint will play</span>\n\t\t<span class=\"token comment\">// the zombie dying animation.</span>\n\t\t<span class=\"token function\">ToDeadState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Now we set a timer for the length of the dying animation to make sure that if we have to</span>\n\t\t<span class=\"token comment\">// destroy the ZombieCharacter, we don't do it until the animation has finished playing.</span>\n\t\tUWorld<span class=\"token operator\">*</span> World <span class=\"token operator\">=</span> <span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>World <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\tWorld<span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span>DeathAnimationTimer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AZombieCharacter<span class=\"token operator\">::</span>AfterDeathAnimationFinished<span class=\"token punctuation\">,</span> DyingAnimationLengthInSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called after the death animation finishes playing.\n */</span>\n<span class=\"token keyword\">void</span> AZombieCharacter<span class=\"token operator\">::</span><span class=\"token function\">AfterDeathAnimationFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Now that the dying animation has finished playing we can see if we need to Destroy</span>\n\t<span class=\"token comment\">// the ZombieCharacter.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SecondsAfterDeathBeforeDestroy <span class=\"token operator\">==</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// The ZombieCharacter should be destroyed immediately so we don't need to set a</span>\n\t\t<span class=\"token comment\">// timer.</span>\n\t\t<span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SecondsAfterDeathBeforeDestroy <span class=\"token operator\">></span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// We have to wait some time before the ZombieCharacter should be Destroyed so we</span>\n\t\t<span class=\"token comment\">// set a timer that runs the method to destroy the ZombieCharacter.</span>\n\t\t<span class=\"token function\">SetLifeSpan</span><span class=\"token punctuation\">(</span>SecondsAfterDeathBeforeDestroy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Conclusion</strong></h2>\n<p>With the above setup you should be able to even group ZombieCharacter together and form hordes and and when the PlayerCharacter gets close they'll attack at the same time. I might expand on this tutorial in the future to make it into a series about developing a modern survival style game. Thank you for reading and be sure to the check out the <a href=\"https://github.com/robertcorponoi/unreal-zombie-ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> for a full example.</p>\n"}},{"node":{"title":"Unreal C++ Creating An AI That Follows & Leads","path":"/unreal-c-creating-an-ai-that-follows-and-leads/","date":"25. August 2020","timeToRead":29,"description":"Learn how to create an AI that follows and leads the player","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/main.4303ea3.0b05b0644aa83e7fb840b562679686d8.png","size":{"width":847,"height":525},"sizes":"(max-width: 847px) 100vw, 847px","srcset":["/assets/static/main.a67b0b2.0b05b0644aa83e7fb840b562679686d8.png 480w","/assets/static/main.4303ea3.0b05b0644aa83e7fb840b562679686d8.png 847w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 847 525' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e25f127c9c04fcb1d54fa24829b54f4d'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e25f127c9c04fcb1d54fa24829b54f4d)' width='847' height='525' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAoCAYAAABOzvzpAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAP0UlEQVRo3pVaaZdU1RXtH5EAPVV3dVV3Vc8NzRDjEjGISgcciShqXCExIgGNKyoxJsbEARUHhKZp6LHmoefqeaIHmpngWvlDJ/uce%2b%2br%2b2oA8%2bGuV/Wq6tXd%2b%2byzz7n3vZLvzw7T2R9G6IfzY3S%2bc5w6L0zQhYsZ6uqepIuXpujS5Wm63DtDPX2z1Ns/R30D89Q/uEADoUUaDC9RKLJM4egyRaJXKBJboWh8hWLxVYolVimeWKN4co0SPFLrMpLpq85IDdljI2fkfG79Lqmvxdfmwf8Vi6v/jsSuyFzCmFcosiRzHMRceb48bxkDC9TXP0%2b9fXNUcs4Fegqgp%2blSzwxAzwL0HEDPAzQADwJwaMkCbQBrsHoyAlIDdYANb1Baj6GRa%2b4xqsawM647r%2bWznO%2bnrWsZcvJISShSmJBoTJHC8%2bV58/yZjAEhYp5KOruy0e7maPfM6mgr4PnRLhDpnAinDHhnsm7AWaB6jBUZ9ndyCMkjQtSh5pBwKWPVImHZRQJjK7lwEeC7FXg78iwRlkohqUdzIp9IWuB11J0JFgOuQY78hOEmwybip5HgKMFODVHBIpVko58v%2b/tG3wG/VhS8O%2bpZ4A648RsPHmM3ChJRSA1OOhQhwaRC2FJBSVex6BcEf8UBH0tYOZ/OEpAL3om6A/yGC/zoxE0a5eO4OeaPLBm5RDyYBOUJOhXi%2balQYnKfCSiU%2b6H7mF6e4T0IvAYyNnELwG/heBORvE6jkzcpM3VNncvcxLilBpMzYZNw/f8jwTLGrApUKlgE5Lt%2bv3H9YtKX6BfJ%2b1zZa%2bASaQwGn0hfoa6LIYrE53GdZTp7LoRrz8r5RGoZ11jHtdbx%2bw2HBD4aUkxqKBLyzdGUUZ6bkwqmMlheIATY8ue6WLjOF4m%2bU89zwRvgarL8OjXM31%2bhOADGk5x/GZqYuovrzdHJt9%2bj787208TkbYmuImAN110VQpik5NAKrsHn1nC9a44SOHWEDPYFFwlFVOCqCBYBbvmrmh8K5%2bd%2b8egb4GoyaTh0QgBfoRgAM3iOKkdwavYezS38V859/0MU110CiA2kwW2MWzQ%2biZG5peSvo89qYGKYBCER1%2bWj%2bY8kiEkPq/kICRg8L6OCfDNUPlCS6/75pa%2bA82tWHeAj14X1ZJr/ZFkA8UgigkwERykzfZem534E0Gt0rjNBx/70ET28u4NqA1upfcdj9OzzR%2bnY8Y/ok08vICBjEvnxzA387jYIuI7XN8UDVCrdoiGQOTTCEV4RVSRwjOI/ZcSXIPMFOSZSazKyZuguiaIA1epqAu4rf7vkbciFYwn%2bfBGfLyLSVxChq6IElv/45B2amrkn0ezpm6D3PjhN%2b548RDX%2bZiqvrKPqmiaqrApiBMjra6ItZT4539D8C3rs8efo8MvH6J13P6Vvv49gTjMAvI40uUXx8DSFeoYpFpmlWHSOEgAaxxyS%2bP/0EKKNOXEw4skVkDmKuS1LKggBOSrQBNyv%2bbnigGcWo3HutTk95vHZghCQ7dfXKAkFjI6wed2gwcgc/f3js3TwmVepoWkXebwNArACgH21LVQX3Cbn6oJtIOYg%2bQNtIKVRSKnC%2bdIKP20urQE5zaKS/QdeoddeO0EfnvqSvvu6hwYGJgEa4EFCMrGI4zyFcC7UP0nhgWkhoH9gSpfEtYJpUFKs/hvw/KXBMJ%2bbw2ezApxJMAaYSCAHwXAK7A9Din2Xhulv739GR148Srse2gcw9bRpS7WAYrnXADhHvKqmgfx1AIzIMyGsCiEA7z3VQfLifaC%2bXc4bQipYLZW1VIfftjbvor17n6FDh47SyZMf02efdVHn%2bThFQPpg7xiIyGDeM5jvnPaBnIWTXjSVFKsAfQN8bhpjSsCHo0vyY06BGP8YRMShgHQKjOJPv/6ql15//STt3P4o1QBApaeOagCGI%2bqprhdgDNgrgLIECCH4Pn/HV9eKc61CAJ8TUuR9vZDAvw3Wb6PmehDprSdvdUCOHqjKi%2b%2b0b3uEnnryN/T7V4/T%2b1AJp11cK9TtA6sFCJClrloqnu9MIXcykgZR6aBWnYUP19RBmFQE0voBufnWm6doz54DVIfoVWGS1QBX52%2bi1sbt1IDJMpAKTJAj6KttVZEEOZU66jWaED7HPuAFIZwWfK6aSQooknxMpleRxt/x8W/xeQCfNza0Uz3SyOOppYAP/%2bMN0vadj0mKckVwtcYWAa4UMGt9jj6D7%2bHo98NswotCQCqtauvl3gydgpl1dBymICby800eqsLkg5iI39eISEDqODYBvB%2bAGYiYnERTR1xLmqNrZM/f8SCarU3bqa15B5VB6kwKk9DcsI1agq0UBLE%2bfKcxqFPHE5DvVSL6tbh2La7X1NguxzPfDMB8b%2bs2XXWsuZXAIUBVAEPAEl7P4vWcNArdl8foEsYn/%2b6il44chxn9imoBxsug/Y0SgWBwqxw58ixJjo7X3wKZNwqIckyyCucZPMu7vNIv51jaJgX4fWlFLR18/Nd0%2bMBz5AFJ5QDIZLY27aS9D%2b%2blIwefV%2boCIUwme4oyTaSUtxFGu0Pev/3nT9BP3BXgqiGyCEjq1WF8pZAC1BqApX%2bxexRKmNAKWKHnXvgdzMxDpeU%2bqsLE6zGRehDAEwrUtVA18rEMn/HnHGGWNgNkYKbMcY77NAn8mQHBgwlik9u/7wB1PNEh32dzrMZ3mdAnHn2KXnnmBfJ7VZopdTSKkspQLWpAVGmZl55%2b9jXpEFPDV60NE1UFErYCuBJkFWCb4KKzVOQUYOeP6TJ46q9nqH37btq0uVJKVB0ABXSOmhLHJYuBMVgmgSfq0YbGHsCSLteqMO7P4MsqfCh51bS7fRft2fUIeQGO5V1bA3kD9M6W7bT3oUeprQFqq23CNWrlevxf9fAbX20z7UDeD4Znpf1Wi7Or1ppgTfctuhcobIL5ZXAgNC9EhCOLuPBtvF%2bgN/74AbVufUiky82MRBqEcPT5KLLEZ6XlNXKOj8b0%2bMgR4zQQ52dDw/D6VLrUAgibGgMThUBddVAam9xWeEMbZF6D9KqoglF6vHjdREHOe6joqzN9aJTuoANdd2%2bZpdx9AI9ILgGsAocAnQZMQkQvHlgJfSCCZTSWuUtd3WPwhGOQHur8Zo%2bAYgAsSZ6gpADLulK5uwPIyluJIJsnhk/3B2XGG3SFEG8AgUwYG6wXiqiobqHywCEq83eQL7AdyqmiEyf/gby/A8DreqcomwLZdvgBnSCrINsJLooJmlZYsbYMImbw2Zz0/2MTd%2bjrbwbRxT0PXwhIFP0AaNzeeIADyJwDWSx5Jk3qOwhigAyUzxvFeH2qVVYk%2bIQc8RJOJf8O8jc9TVsqGung0y9jvXFdrwTRirs2THUJtOWfS0C2Esw7KjAKUCowq0Elo3CUt5lnpccez9xB73%2bDPv7nOdq9pwPRrddOX6fl70OPnwVkwAggEGD6A6%2bYZtAhTEqkVo3qH%2bp16VTkNja1wxzraceuPbJO4EWSgNckZOW/plIgmZP/uQQoH1BrAbcPLLtUYLpBllMoMi%2bDWc5M35Nz77z7L2pu2Umbt3h0rtc6IFUVaJUU4HRhVXBK%2bAxYpIKqENo09XlOD/6%2bUY2ffSG4VUg6/eVlWWmqRZjaKBXzc/YETAlcdSpApBgBPVYlMAuisFZArgrMqpAXQ0xCBCsyXgVOzvyIa8zQq789gQk2ITXUGsBEUvp/EFCoPLLcjWkyWCl1uuEpLavRqcEtdgP9fHMVHT/xkYA3kTfRFwUMX3WaIJP/cUv%2bajms9wSFgD7LB1xL4iXXngB3ha77AMwyjEfW4LEFnFuFSd4GEfew7k%2bhf3gdbXKLY4RZkD6rQujVX7kCWWZ9zmRJ9eCWGoT4UAJ/tqkSeX9ENkl4t4mjbqKvCLCin7Y6wBwCQvamqL0ilI7Q2hN0%2b4DZFlvN7gjr3WBegzMJvCnBEeBujPcEPj/dQ4/vexYA2Oi8Ev0yUzbZ3bWxeU20tT9UO%2bpQi6TG5p3yOfci/YNTskeYdqRfLPqW/E35i5lVbtFd4fkCPqBJ0BeK2bfChty7wrwOV2pYkcmxGvj43vunaeu2X8IUq0Tipjfw6xQwPmH2BMw5LqsNWCPUBtqk5//iy0tS8hzwo9dk56lQ9EX%2bBaKvNkUX3QTwzpCrIbKqgewNaPbc9wIx0uuum51pbUQxvUXFtZm7s%2bnZH3GNJTr6h79gWQsv8Aa1CbY5DZHpB1TtVxUhiN6fuz1OgTePfSCbp/wfQ3oUA5%2b09gIdAqLmPqG6OyR3hmwCpCGyNkYcL4gaM3TvDxoSTCrk3hxJpldlu4zVwJNk2TIRF7HAevGlNygAIriPN9XAgGeFcPn0wPR8/iZ53XHgsOwWy6arGN9GftkbWnctfw14I3%2bj5pC5M8R3hbM%2bYFcD%2b9aYaYqyXpC/SaqU4GyP6YioHdoN2do2auD3E5BwZvo/dObbED21/xCWztxSByx/qJFNFTa9TXD8tm0PY25jcl8hC97q%2bJy%2bf821ERrLWfwIAVr%2b3NaXmGcB3OUQg5fEg2p/YNAhwTwHkGuI2VtkCS0/5y7NsEoJjlpKqsWibGOntXQnQQLvGvPe4U40NaXwBzZG1So36UpQT59/0S19fkobnfl9wVWfI/0V13MDZitcRX/B3B3OkFIBSOgBCb3TUhLZC3JLoimLbhXYSljL5p9Wg7ph4iYinlImKXv5OpK8exxHCT12/ENqaNyG6Ks%2bgFeIb751Su4NGFWlR6xbYEPrrp7fpKXq%2b3PBL%2bmHJvTDEur5AH44YpIudCsSbBU4myQ5W%2bVCQtStAiFBs59Iu2%2bY2kQ47Spemz18Y2Bc06fQSPX0TdLhl9%2bgLVjk7O94UXyEnT57rcJu75K%2b3viUXeyYanpC4SUtfSZgXhFw/sIEdV6c0A9JTOaUxDnXVpmtAscPHFNcy%2bkPLDfmKA1v6OE2yUR6VdQQ1yYpFUNufl4Tf%2bjsSss9BttXXE5vNztWvY%2banV87%2boYABJR3vPqADQSMEz8lwiowJNgVwRCgSHAvkvLTYdWVDtlb51ZauB5vWXdymZUQBhF8LgEjC5sU0X29uLsld3uV57S6rn3/5byar54VUrnfp4MrzwiJCromnEdlFAluL%2bgTP5hXhqhvm5uSwoOVYHaO1VhxKoM7LSwgw9nSpTrJdVFDODoP8seFFFd5cxndmnuZ6/iR2fNfdiIv4DUBWfC8CzZLJWfPjainw7oyrqfDui9P6bI44yySskpw%2b0GeEmw15FaJVNYsFbCrLtPkaPOtNt7aMu21ba5Oa%2buMtSxwy/DCFgEc9QHzhJgmgNXN2EDAqHpETlJBGaJRgSHB7BnmbpuZByjMczd2n2CeyMhtmrLpseYiQ/btNEHm3qNNmHkcxw18VUwuash3Hn5Yyst5AT4wLxikzPcqAv4HHB%2bTg4TGj0AAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"content":"<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Table of Contents</strong></h2>\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#playercharacter\">PlayerCharacter</a></li>\n<li><a href=\"#allycharacter\">AllyCharacter</a></li>\n<li><a href=\"#allyaicontroller\">AllyAIController</a></li>\n<li><a href=\"#making-the-allycharacter-follow-the-playercharacter\">Making the AllyCharacter Follow the PlayerCharacter</a></li>\n<li><a href=\"#making-the-allycharacter-lead-the-playercharacter\">Making the AllyCharacter Lead the PlayerCharacter</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n<h2 id=\"overview\"><a href=\"#overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Overview</strong></h2>\n<p>In this tutorial we'll look at what it takes to create an AI that follows the player and can lead the player to waypoints. This won't be too in-depth but it'll get you started with an AI system of following and leading without relying on logic placed in <code>Tick</code> leading to more fluid movement and better performance. Let's take a look at the classes we'll need to make this happen.</p>\n<ul>\n<li><strong>PlayerCharacter</strong> - The PlayerCharacter is going to be a standard third-person Character that we'll expand on.</li>\n<li><strong>AllyCharacter</strong> - The AllyCharacter is the Character that's going to follow and lead the PlayerCharacter.</li>\n<li><strong>AllyAIController</strong> - The AllyAIController is going to be the AIController that controls when/how the AllyCharacter moves.</li>\n</ul>\n<h2 id=\"playercharacter\"><a href=\"#playercharacter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>PlayerCharacter</strong></h2>\n<p>So as stated above the PlayerCharacter is a standard third person Character but we'll go over it quickly as it's important to be on the same page before progressing.</p>\n<p>The PlayerCharacter has the following:</p>\n<ul>\n<li>A <code>USkeletalMeshComponent</code> so we can change the mesh of the PlayerCharacter to a default third person skeletal mesh.</li>\n<li>A <code>USpringArmComponent</code> and <code>UCameraComponent</code> to add a camera on a boom so we can have some decent camera controls.</li>\n<li>A boolean that keeps track of whether the PlayerCharacter is currently sprinting or not. This will be used by the animation blueprint and the AllyCharacter.</li>\n<li>Methods to respond to axis inputs for moving forward, backward, left and right.</li>\n<li>Methods to respond to the sprint button being pressed and released.</li>\n</ul>\n<p>Below is the PlayerCharacter header file where the components and methods talked about above are defined:</p>\n<p><strong>PlayerCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Character.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PlayerCharacter.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * PlayerCharacter is the main Character of the game controlled by the player.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span>config <span class=\"token operator\">=</span> Game<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FOLLOWLEADAI_API</span> APlayerCharacter <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ACharacter\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Sets default values for this character's properties.</span>\n\t<span class=\"token function\">APlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The PlayerCharacter's skeletal mesh.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Mesh<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">USkeletalMeshComponent</span><span class=\"token operator\">*</span> PlayerSkeletalMesh<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The PlayerCharacter's camera.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Camera<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UCameraComponent</span><span class=\"token operator\">*</span> PlayerCamera<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The boom for the PlayerCharacter's camera.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Camera<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">USpringArmComponent</span><span class=\"token operator\">*</span> PlayerCameraSpringArm<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Indicates whether the PlayerCharacter is sprinting or not.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Animation<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">bool</span> bIsSprinting <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// The speed at which the PlayerCharacter should walk at.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Movement<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> WalkSpeed <span class=\"token operator\">=</span> <span class=\"token number\">200.f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The speed at which the PlayerCharacter should sprint at.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Movement<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> SprintSpeed <span class=\"token operator\">=</span> <span class=\"token number\">500.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/**\n\t * Called when the PlayerCamera moves forward and backward.\n     *\n     * @param Value The axis value from the input.\n\t */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">MoveForwardBackward</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called when the PlayerCamera moves left and right.\n\t *\n\t * @param Value The axis value from the input.\n\t */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">MoveLeftRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called when the sprint input action button is pressed down.\n\t */</span>\n\t <span class=\"token keyword\">void</span> <span class=\"token function\">SprintStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t <span class=\"token comment\">/**\n\t  * Called when the sprint input action button is released.\n\t  */</span>\n\t <span class=\"token keyword\">void</span> <span class=\"token function\">SprintStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called to bind functionality to input.\n\t *\n\t * @param PlayerInputComponent An Actor component for input bindings.\n\t */</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UInputComponent</span><span class=\"token operator\">*</span> PlayerInputComponent<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the cpp file we:</p>\n<ul>\n<li>Load the skeletal mesh and AnimBlueprint (look at the <a href=\"https://github.com/robertcorponoi/unreal-follow-lead-ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> or Unreal's third person character demo for an example of the animation blueprint as it's out of scope for this tutorial.</li>\n<li>Create the components, set their default values, and attach them where they're needed.</li>\n<li>Set up the methods that respond to the axis and action inputs.</li>\n<li>Create the methods defined the header to move the PlayerCharacter forward, backward, left, right. Also set up the methods to start and stop sprinting.</li>\n</ul>\n<p><strong>PlayerCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PlayerCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Camera/CameraComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/InputComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/CapsuleComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/SkeletalMeshComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Controller.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/CharacterMovementComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/SpringArmComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets the default values for the PlayerCharacter.\n */</span>\nAPlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">APlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Load the resources needed for the PlayerCharacter.</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>USkeletalMesh<span class=\"token operator\">></span><span class=\"token function\">PlayerSkeletalMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SkeletalMesh'/Game/Mannequin/Character/Mesh/SK_Mannequin.SK_Mannequin'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UAnimBlueprint<span class=\"token operator\">></span><span class=\"token function\">PlayerAnimBlueprint</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AnimBlueprint'/Game/Mannequin/Animations/ThirdPerson_AnimBP.ThirdPerson_AnimBP'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the SkeletalMeshComponent to the Character's mesh and adjust its properties.</span>\n\tPlayerSkeletalMesh <span class=\"token operator\">=</span> <span class=\"token function\">GetMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetSkeletalMesh</span><span class=\"token punctuation\">(</span>PlayerSkeletalMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocationAndRotation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">90.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FRotator</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">90.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerSkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetAnimInstanceClass</span><span class=\"token punctuation\">(</span>PlayerAnimBlueprint<span class=\"token punctuation\">.</span>Object<span class=\"token operator\">-></span>GeneratedClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the SpringArmComponent and attach it to the RootComponent.</span>\n\tPlayerCameraSpringArm <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>USpringArmComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PlayerCameraSpringArm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerCameraSpringArm<span class=\"token operator\">-></span>TargetArmLength <span class=\"token operator\">=</span> <span class=\"token number\">500.f</span><span class=\"token punctuation\">;</span>\n\tPlayerCameraSpringArm<span class=\"token operator\">-></span>bUsePawnControlRotation <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tPlayerCameraSpringArm<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the CameraComponent and attach it to the SpringArmComponent.</span>\n\tPlayerCamera <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UCameraComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PlayerCamera\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerCamera<span class=\"token operator\">-></span>bUsePawnControlRotation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tPlayerCamera<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>PlayerCameraSpringArm<span class=\"token punctuation\">,</span> USpringArmComponent<span class=\"token operator\">::</span>SocketName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Sets the capsule collider's size.</span>\n\t<span class=\"token function\">GetCapsuleComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">InitCapsuleSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">40.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the PlayerCharacter to not rotate when the controller rotates.</span>\n\tbUseControllerRotationPitch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tbUseControllerRotationYaw <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tbUseControllerRotationRoll <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the default values for the PlayerCharacter's movement.</span>\n\t<span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>bOrientRotationToMovement <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>RotationRate <span class=\"token operator\">=</span> <span class=\"token function\">FRotator</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">540.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>MaxWalkSpeed <span class=\"token operator\">=</span> WalkSpeed<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the PlayerCharacter to be the default player of the game.</span>\n\tAutoPossessPlayer <span class=\"token operator\">=</span> EAutoReceiveInput<span class=\"token operator\">::</span>Player0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to bind functionality to input.\n *\n * @param PlayerInputComponent An Actor component for input bindings.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span>UInputComponent<span class=\"token operator\">*</span> PlayerInputComponent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>PlayerInputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set up the methods to respond to the PlayerCharacter moving forward, backward,</span>\n\t<span class=\"token comment\">// left, and right.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MoveForwardBackward\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>MoveForwardBackward<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MoveLeftRight\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>MoveLeftRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the \"TurnLeftRight\" and \"LookUpDown\" axis inputs to control the yaw and pitch</span>\n\t<span class=\"token comment\">// of the camera.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TurnLeftRight\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APawn<span class=\"token operator\">::</span>AddControllerYawInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LookUpDown\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APawn<span class=\"token operator\">::</span>AddControllerPitchInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set up the methods to respond to the sprint action input being pressed and released.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sprint\"</span><span class=\"token punctuation\">,</span> IE_Pressed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>SprintStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sprint\"</span><span class=\"token punctuation\">,</span> IE_Released<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>SprintStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the PlayerCamera moves forward and backward.\n *\n * @param Value The axis value from the input.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">MoveForwardBackward</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if the Controller is a nullptr or the axis input value is zero.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> Value <span class=\"token operator\">==</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Find the forward rotation.</span>\n\t<span class=\"token keyword\">const</span> FRotator Rotation <span class=\"token operator\">=</span> <span class=\"token function\">GetController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetControlRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> FRotator <span class=\"token function\">YawRotation</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Rotation<span class=\"token punctuation\">.</span>Yaw<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Find the forward vector.</span>\n\t<span class=\"token keyword\">const</span> FVector Direction <span class=\"token operator\">=</span> <span class=\"token function\">FRotationMatrix</span><span class=\"token punctuation\">(</span>YawRotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetUnitAxis</span><span class=\"token punctuation\">(</span>EAxis<span class=\"token operator\">::</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Apply movement to the forward direction of the PlayerCharacter with a value</span>\n\t<span class=\"token comment\">// of `Value`.</span>\n\t<span class=\"token function\">AddMovementInput</span><span class=\"token punctuation\">(</span>Direction<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the PlayerCamera moves left and right.\n *\n * @param Value The axis value from the input.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">MoveLeftRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if the Controller is a nullptr or the `Value` is zero.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> Value <span class=\"token operator\">==</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Find the right rotation.</span>\n\t<span class=\"token keyword\">const</span> FRotator Rotation <span class=\"token operator\">=</span> <span class=\"token function\">GetController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetControlRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> FRotator <span class=\"token function\">YawRotation</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Rotation<span class=\"token punctuation\">.</span>Yaw<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Find the right direction.</span>\n\t<span class=\"token keyword\">const</span> FVector Direction <span class=\"token operator\">=</span> <span class=\"token function\">FRotationMatrix</span><span class=\"token punctuation\">(</span>YawRotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetUnitAxis</span><span class=\"token punctuation\">(</span>EAxis<span class=\"token operator\">::</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Add movement to the right axis with a value of `Value`.</span>\n\t<span class=\"token function\">AddMovementInput</span><span class=\"token punctuation\">(</span>Direction<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the sprint input action button is pressed down and it sets the\n * `bIsSprinting` boolean to `true` so the animator knows to play the sprint animation.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">SprintStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tbIsSprinting <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>MaxWalkSpeed <span class=\"token operator\">=</span> SprintSpeed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the sprint input action button is pressed down and it sets the\n * `bIsSprinting` boolean to `false` so the animator knows to stop the sprint animation.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">SprintStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tbIsSprinting <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>MaxWalkSpeed <span class=\"token operator\">=</span> WalkSpeed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>So now if you save, compile, drag out an instance of the PlayerCharacter, and press play (assuming you set up the mesh and animation blueprint or copied it from the repo) you should be able to move the PlayerCharacter with the input keys you specified. Also if you press the sprint button you set you should see the PlayerCharacter moving faster then if you let it go you should see it go back to walking again.</p>\n<h2 id=\"allycharacter\"><a href=\"#allycharacter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>AllyCharacter</strong></h2>\n<p>Now let's see what we need for the AllyCharacter:</p>\n<ul>\n<li>A <code>USkeletalMeshComponent</code> so that we can add a mesh and see our AllyCharacter (can be found in the repo or any character from Mixamo/etc will work).</li>\n<li>A <code>UBoxComponent</code> to act as a box collider that will let us know when the AllyCharacter has come in contact with a Waypoint (created later on when implementing leading).</li>\n<li>A variable to keep a reference to the PlayerCharacter. This will be populated manually when the AllyCharacter is placed onto the level.</li>\n<li>A variable to know if the AllyCharacter is sprinting or not. Unlike the PlayerCharacter this will be managed by the AIController we'll create later instead of player input.</li>\n<li>Methods to handle what happens when a component enters the box collider.</li>\n<li>Methods to make the AllyCharacter sprint and stop sprinting. Just as with the variables above this will be called by the AIController instead of any input manager.</li>\n</ul>\n<p>So let's get started and create a new C++ class with a base parent of Character and name it AllyCharacter. I also put mine in a folder named Ally.</p>\n<p>Now let's create the variables and methods we discussed above in the header file:</p>\n<p><strong>AllyCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Character.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AllyCharacter.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * The AllyCharacter follows and leads the PlayerCharacter.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span>config <span class=\"token operator\">=</span> Game<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FOLLOWLEADAI_API</span> AAllyCharacter <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ACharacter\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Sets default values for this character's properties.</span>\n\t<span class=\"token function\">AAllyCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The SkeletalMeshComponent of the AllyCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">USkeletalMeshComponent</span><span class=\"token operator\">*</span> AllySkeletalMesh<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The BoxComponent that to use as a trigger for detecting Waypoints.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UBoxComponent</span><span class=\"token operator\">*</span> AllyBoxCollider<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The PlayerCharacter to follow and lead.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Ally<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">APlayerCharacter</span><span class=\"token operator\">*</span> PlayerCharacter<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Indicates whether the AllyCharacter is sprinting or not.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">bool</span> bIsSprinting <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// The speed at which the AllyCharacter should walk at.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Movement<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> WalkSpeed <span class=\"token operator\">=</span> <span class=\"token number\">200.f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The speed at which the AllyCharacter should sprint at.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Movement<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> SprintSpeed <span class=\"token operator\">=</span> <span class=\"token number\">500.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/**\n\t * Called when the AllyCharacter is created.\n\t */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called when a component enters the AllyCharacter's box collider.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">OnComponentEnterBoxCollider</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called to make the AllyCharacter sprint.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SprintStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called to make the AllyCharacter stop sprinting\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SprintStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the AllyCharacter's cpp file we:</p>\n<ul>\n<li>Load the mesh and animation blueprint for the AllyCharacter. Again these can be found in the <a href=\"https://github.com/robertcorponoi/unreal-follow-lead-ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> if you need guidance or don't want to make your own.</li>\n<li>Create the box collider and its properties so that it acts as a trigger and then finally registers the <code>OnComponentEnterBoxCollider</code> method to respond to components entering the box collider.</li>\n</ul>\n<p><strong>AllyCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AllyCharacter.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets the default values for the AllyCharacter.\n */</span>\nAAllyCharacter<span class=\"token operator\">::</span><span class=\"token function\">AAllyCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>USkeletalMesh<span class=\"token operator\">></span><span class=\"token function\">AllySkeletalMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SkeletalMesh'/Game/Mannequin/Character/Mesh/SK_Mannequin.SK_Mannequin'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UAnimBlueprint<span class=\"token operator\">></span><span class=\"token function\">AllyAnimBlueprint</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AnimBlueprint'/Game/Blueprints/PlayerAnimBlueprint.PlayerAnimBlueprint'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the SkeletalMeshComponent to the Character's mesh and adjust its properties.</span>\n\tAllySkeletalMesh <span class=\"token operator\">=</span> <span class=\"token function\">GetMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tAllySkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetSkeletalMesh</span><span class=\"token punctuation\">(</span>AllySkeletalMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tAllySkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocationAndRotation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">90.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FRotator</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">90.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tAllySkeletalMesh<span class=\"token operator\">-></span><span class=\"token function\">SetAnimInstanceClass</span><span class=\"token punctuation\">(</span>AllyAnimBlueprint<span class=\"token punctuation\">.</span>Object<span class=\"token operator\">-></span>GeneratedClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the initial speed to the `WalkSpeed`.</span>\n\t<span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>MaxWalkSpeed <span class=\"token operator\">=</span> WalkSpeed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the AllyCharacter is created.\n */</span>\n<span class=\"token keyword\">void</span> AAllyCharacter<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when a component enters the AllyCharacter's box collider.\n */</span>\n<span class=\"token keyword\">void</span> AAllyCharacter<span class=\"token operator\">::</span><span class=\"token function\">OnComponentEnterBoxCollider</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if anything is null so we can avoid a potential crash.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherComp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to make the AllyCharacter sprint.\n */</span>\n<span class=\"token keyword\">void</span> AAllyCharacter<span class=\"token operator\">::</span><span class=\"token function\">SprintStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tbIsSprinting <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>MaxWalkSpeed <span class=\"token operator\">=</span> SprintSpeed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to make the AllyCharacter stop sprinting.\n */</span>\n<span class=\"token keyword\">void</span> AAllyCharacter<span class=\"token operator\">::</span><span class=\"token function\">SprintStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tbIsSprinting <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>MaxWalkSpeed <span class=\"token operator\">=</span> SprintSpeed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now make sure that this saves and compiles but there's nothing to test yet as we haven't set up the AIController for the AllyCharacter yet.</p>\n<h2 id=\"allyaicontroller\"><a href=\"#allyaicontroller\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>AllyAIController</strong></h2>\n<p>The AllyAIController is going to be used to move the AllyCharacter to where it needs to be. This controller will evolve as we add the follow functionality and then leading functionality but let's see what we need for the basics:</p>\n<ul>\n<li>We need to keep a reference to the AllyCharacter. Unlike the PlayerCharacter reference in the AllyCharacter this one will not have to be assigned manually.</li>\n<li>We need to override <code>OnBeginPlay</code> as we'll add some starting logic to make the AllyCharacter move to the PlayerCharacter right away.</li>\n<li>We need to override <code>OnPossess</code> to make the above possible.</li>\n<li>We need to override <code>OnMoveCompleted</code> so that we can issue move commands consecutively instead of stacking them for better performance.</li>\n</ul>\n<p>So let's get started and create a new C++ class with a base parent of AIController and name it AllyAIController. I put this class in the Ally folder alongside AllyCharacter.</p>\n<p>Now let's get on to defining the variable and method we discussed above in the header:</p>\n<p><strong>AllyAIController.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AIController.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AllyAIController.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * The AllyAIController controls the movement and behavior of the AllyCharacter.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FOLLOWLEADAI_API</span> AAllyAIController <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AAIController\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">AAllyAIController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// A reference to the AllyCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> AI<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">AAllyCharacter</span><span class=\"token operator\">*</span> AllyCharacter<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/**\n\t * Called when the AllyAIController takes over the AllyCharacter.\n\t *\n\t * @param AllyPawn The AllyCharacter pawn.\n\t */</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>APawn<span class=\"token operator\">*</span> AllyPawn<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called when a move request has been completed.\n\t */</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>FAIRequestID RequestID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FPathFollowingResult<span class=\"token operator\">&amp;</span> Result<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the cpp file we assign the reference to the AllyCharacter in <code>OnPossess</code> and create the <code>OnMoveCompleted</code> method but leave it empty for now:</p>\n<p><strong>AllyAIController.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AllyAIController.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AllyCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../Player/PlayerCharacter.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets up the default values for the AllyAIController.\n */</span>\nAAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">AAllyAIController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Starts the AI logic for this AIController as soon as the AllyCharacter</span>\n\t<span class=\"token comment\">// is taken over so that we can issue commands immediately.</span>\n\tbStartAILogicOnPossess <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the AllyAIController takes over the AllyCharacter.\n *\n * @param AllyPawn The AllyCharacter pawn.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>APawn<span class=\"token operator\">*</span> AllyPawn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>AllyPawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Attempt to cast the Pawn that was taken over to an AllyCharacter and if</span>\n\t<span class=\"token comment\">// successful then we assign it to our `AllyCharacter` variable.</span>\n\tAAllyCharacter<span class=\"token operator\">*</span> Ally <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AAllyCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>AllyPawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ally <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> AllyCharacter <span class=\"token operator\">=</span> Ally<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Save and compile then and then let's move on to creating the states so we can expand on our AllyAIController and actually have it control the AllyCharacter.</p>\n<h2 id=\"making-the-allycharacter-follow-the-playercharacter\"><a href=\"#making-the-allycharacter-follow-the-playercharacter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Making the AllyCharacter Follow the PlayerCharacter</strong></h2>\n<p>So first, we want to make the AllyCharacter follow the PlayerCharacter. While this is not very complex and we won't get into crazy detail there's some things we have to account for:</p>\n<ul>\n<li>We need to define the two states that the AllyCharacter can be in, FOLLOW and LEAD and then we need to create a variable to keep track of the AllyCharacter's current state.</li>\n<li>We need variables for the minimum and maximum distance that the AllyCharacter should be from the PlayerCharacter. This is used to find a random value between the two that denotes how far away the AllyCharacter stands from the PlayerCharacter.</li>\n<li>We need a variable for the maximum distance away the PlayerCharacter can be from the AllyCharacter before the AllyCharacter starts sprinting to catch up to the PlayerCharacter.</li>\n<li>We need to create a timer that will repeat and and check to see if the PlayerCharacter is moving so that we know when to make the AllyCharacter move. This is used to keep constant calls to <code>MoveToActor</code> out of <code>Tick</code> and increase performance/gameplay greatly.</li>\n<li>We also want to create a timer that will track whether we need to sprint or not. This could go in <code>Tick</code> but we want to avoid putting stuff in <code>Tick</code> especially if it's something that doesn't need to be run every frame.</li>\n</ul>\n<p>Let's get into the header file for the AllyCharacter and define the variables we discussed above:</p>\n<p><strong>AllyCharacter.h</strong></p>\n<p>Note that the <code>AllyStates</code> enum goes above the class declaration.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Character.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AllyCharacter.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * The states that the AllyCharacter can be in.\n */</span>\n<span class=\"token function\">UENUM</span><span class=\"token punctuation\">(</span>BlueprintType<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">class</span> AllyStates <span class=\"token operator\">:</span> uint8 <span class=\"token punctuation\">{</span>\n\tFOLLOW\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"FOLLOW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tLEAD\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"LEAD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Then in the <code>public</code> section:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The current state of the AllyCharacter.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\nAllyStates State <span class=\"token operator\">=</span> AllyStates<span class=\"token operator\">::</span>FOLLOW<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The minimum distance the AllyCharacter should be from the PlayerCharacter.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Ally<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> MinDistanceFromPlayer <span class=\"token operator\">=</span> <span class=\"token number\">100.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The maximum distance the AllyCharacter should be from the PlayerCharacter.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Ally<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> MaxDistanceFromPlayer <span class=\"token operator\">=</span> <span class=\"token number\">500.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The maximum distance the AllyCharacter can be from the PlayerCharacter before</span>\n<span class=\"token comment\">// they start sprinting to catch up to the PlayerCharacter.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Ally<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> MaxDistanceFromPlayerBeforeSprint <span class=\"token operator\">=</span> MaxDistanceFromPlayer <span class=\"token operator\">+</span> <span class=\"token number\">100.f</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the AllyAIController we define the timers and the methods to respond to those timers:</p>\n<p><strong>AllyAIController.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// A reference to the AllyCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> AI<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">AAllyCharacter</span><span class=\"token operator\">*</span> AllyCharacter<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The repeating timer used to manage the AllyCharacter's sprint state.</span>\n\tFTimerHandle AllySprintTimer<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The repeating timer used to make the AllyCharacter follow the PlayerCharacter.</span>\n\tFTimerHandle AllyFollowTimer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/**\n\t * Called when the AllyAIController takes over the AllyCharacter.\n\t *\n\t * @param AllyPawn The AllyCharacter pawn.\n\t */</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>APawn<span class=\"token operator\">*</span> AllyPawn<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called when a move request has been completed.\n\t */</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>FAIRequestID RequestID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FPathFollowingResult<span class=\"token operator\">&amp;</span> Result<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called to move the AllyCharacter to the PlayerCharacter.\n\t */</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">MoveToPlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called by the `AllyFollowTimer` to check to see if the PlayerCharacter is\n     * is moving or not.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">CheckIfPlayerIsMoving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Called by the `AllySprintTimer` to make the AllyCharacter start or stop sprinting.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ManageAllySprint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And now in the cpp file we have to create the <code>MoveToPlayerCharacter</code>, <code>CheckIfPlayerIsMoving</code> and <code>ManageAllySprint</code> methods. Let's go over each of these methods in detail:</p>\n<p><strong>MoveToPlayerCharacter</strong></p>\n<ul>\n<li>Get a random float in between the <code>MinDistanceFromPlayer</code> and <code>MaxDistanceFromPlayer</code> to pass as the acceptance radius for the <code>MoveToActor</code> call.</li>\n<li>Call <code>MoveToActor</code> to move the AllyCharacter to the PlayerCharacter passing in the float from above as the second parameter.</li>\n</ul>\n<p><strong>BeginPlay</strong></p>\n<ul>\n<li>Here we just call <code>MoveToPlayerCharacter</code> to make the AllyCharacter follow the PlayerCharacter right away.</li>\n</ul>\n<p><strong>OnMoveCompleted</strong></p>\n<ul>\n<li>This method is called anytime a move command has completed which for us is after a call to <code>MoveToPlayerCharacter</code>.</li>\n<li>Check to see if the AllyCharacter is in a FOLLOW state and if so we get the AllyCharacter's velocity.</li>\n<li>If the velocity above is greater than zero, we call <code>MoveToPlayerCharacter</code> to keep the AllyCharacter moving to the PlayerCharacter.</li>\n<li>If the velocity is zero, we set the <code>AllyFollowTimer</code> which on an interval calls <code>CheckIfPlayerIsMoving</code> so see if the PlayerCharacter is moving so the AllyCharacter can move towards them again. This is necessary because after the PlayerCharacter stops and in turn the AllyCharacter stops, <code>OnMoveCompleted</code> will stop being called so we need to set up a timer to keep checking if we need to restart the movement with <code>MoveToPlayerCharacter</code> which in turn will start calling <code>OnMoveCompleted</code> again.</li>\n</ul>\n<p><strong>CheckIfPlayerIsMoving</strong></p>\n<ul>\n<li>Get the velocity of the PlayerCharacter.</li>\n<li>If the velocity is above zero, we want to clear the <code>AllyFollowTimer</code> as we no longer need to check if the PlayerCharacter is moving. We then set the <code>AllyFollowTimer</code> which will repeatedly run the <code>ManageAllySprint</code> method to check if the AllyCharacter is far from the PlayerCharacter and should sprint to catch up. Lastly we call the <code>MoveToPlayCharacter</code> method to move the AllyCharacter to the PlayerCharacter again.</li>\n</ul>\n<p><strong>ManageAllySprint</strong></p>\n<ul>\n<li>Get the distance from the AllyCharacter to the PlayerCharacter.</li>\n<li>If the distance from above is greater than or equal to the <code>MaxDistanceFromPlayerBeforeSprint</code> and the AllyCharacter currently isn't sprinting then we want to set the AllyCharacter to sprint.</li>\n<li>Otherwise if the distance is less than the <code>MaxDistanceFromPlayerBeforeSprint</code> and the AllyCharacter is currently sprinting then we set the AllyCharacter to not sprint.</li>\n</ul>\n<p>So now let's implement this in the AllyAIController cpp file:</p>\n<p><strong>AllyAIController.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AllyAIController.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AllyCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../Player/PlayerCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Tasks/AITask_MoveTo.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Character.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Kismet/GameplayStatics.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Kismet/KismetMathLibrary.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Navigation/PathFollowingComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/CharacterMovementComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets up the default values for the AllyAIController.\n */</span>\nAAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">AAllyAIController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Starts the AI logic for this AIController as soon as the AllyCharacter</span>\n\t<span class=\"token comment\">// is taken over so that we can issue commands immediately.</span>\n\tbStartAILogicOnPossess <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the AllyAIController starts.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Move the AllyCharacter to the PlayerCharacter from the start.</span>\n\t<span class=\"token function\">MoveToPlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the AllyAIController takes over the AllyCharacter.\n *\n * @param AllyPawn The AllyCharacter pawn.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>APawn<span class=\"token operator\">*</span> AllyPawn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>AllyPawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Attempt to cast the Pawn that was taken over to an AllyCharacter and if</span>\n\t<span class=\"token comment\">// successful then we assign it to our `AllyCharacter` variable.</span>\n\tAllyCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AAllyCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>AllyPawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when a move request has been completed.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>FAIRequestID RequestID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FPathFollowingResult<span class=\"token operator\">&amp;</span> Result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>RequestID<span class=\"token punctuation\">,</span> Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> AllyStates<span class=\"token operator\">::</span>FOLLOW<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Check to see if the AllyCharacter is moving with a simple velocity check.</span>\n\t\t<span class=\"token keyword\">bool</span> bIsAllyCharacterMoving <span class=\"token operator\">=</span> AllyCharacter<span class=\"token operator\">-></span><span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Velocity<span class=\"token punctuation\">.</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bIsAllyCharacterMoving<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// If the AllyCharacter is moving then it means that the PlayerCharacter is still moving</span>\n\t\t\t<span class=\"token comment\">// so we call `MoveToPlayerCharacter` to keep moving towards the PlayerCharacter.</span>\n\t\t\t<span class=\"token function\">MoveToPlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tUWorld<span class=\"token operator\">*</span> World <span class=\"token operator\">=</span> <span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>World <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Otherwise if the AllyCharacter is no longer moving then `OnMoveCompleted` will not run</span>\n\t\t\t<span class=\"token comment\">// again so we need to set up a repeating timer that checks to see if the PlayerCharacter</span>\n\t\t\t<span class=\"token comment\">// has started moving again and if so we cancel this timer and call `MoveToPlayerCharacter`</span>\n\t\t\t<span class=\"token comment\">// which just restarts this whole process.</span>\n\t\t\tWorld<span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span>AllyFollowTimer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AAllyAIController<span class=\"token operator\">::</span>CheckIfPlayerIsMoving<span class=\"token punctuation\">,</span> <span class=\"token number\">0.05f</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tWorld<span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ClearTimer</span><span class=\"token punctuation\">(</span>AllySprintTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to move the AllyCharacter to the PlayerCharacter.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">MoveToPlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if the PlayerCharacter hasn't been assigned to the AllyCharacter.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>PlayerCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Get a random value between `MinDistanceFromPlayer` and `MaxDistanceFromPlayer` to use</span>\n\t<span class=\"token comment\">// as the second parameter.</span>\n\t<span class=\"token keyword\">float</span> AcceptanceRadius <span class=\"token operator\">=</span> UKismetMathLibrary<span class=\"token operator\">::</span><span class=\"token function\">RandomFloatInRange</span><span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>MinDistanceFromPlayer<span class=\"token punctuation\">,</span> AllyCharacter<span class=\"token operator\">-></span>MaxDistanceFromPlayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Move to the PlayerCharacter within the AcceptanceRadius.</span>\n\t<span class=\"token function\">MoveToActor</span><span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>PlayerCharacter<span class=\"token punctuation\">,</span> AcceptanceRadius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called by the `AllyFollowTimer` to check to see if the PlayerCharacter is\n * is moving or not.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">CheckIfPlayerIsMoving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Check to see if the PlayerCharacter is moving by a simple velocity check.</span>\n\t<span class=\"token keyword\">bool</span> bIsPlayerCharacterMoving <span class=\"token operator\">=</span> AllyCharacter<span class=\"token operator\">-></span>PlayerCharacter<span class=\"token operator\">-></span><span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Velocity<span class=\"token punctuation\">.</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bIsPlayerCharacterMoving<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tUWorld<span class=\"token operator\">*</span> World <span class=\"token operator\">=</span> <span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>World <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Clear the timer as the movement is going to get handled by the `OnMoveCompleted`</span>\n\t\t<span class=\"token comment\">// method until the AllyCharacter stops moving again.</span>\n\t\tWorld<span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ClearTimer</span><span class=\"token punctuation\">(</span>AllyFollowTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Set the timer that manages the AllyCharacter's movement properties such as walking</span>\n\t\t<span class=\"token comment\">// and sprinting.</span>\n\t\tWorld<span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span>AllySprintTimer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AAllyAIController<span class=\"token operator\">::</span>ManageAllySprint<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Call `MoveToPlayerCharacter` to start this process all over again.</span>\n\t\t<span class=\"token function\">MoveToPlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called by the `AllySprintTimer` to make the AllyCharacter start or stop sprinting.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">ManageAllySprint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> DistanceFromPlayerCharacter <span class=\"token operator\">=</span> AllyCharacter<span class=\"token operator\">-></span><span class=\"token function\">GetDistanceTo</span><span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>PlayerCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tUCharacterMovementComponent<span class=\"token operator\">*</span> Movement <span class=\"token operator\">=</span> AllyCharacter<span class=\"token operator\">-></span><span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DistanceFromPlayerCharacter <span class=\"token operator\">>=</span> AllyCharacter<span class=\"token operator\">-></span>MaxDistanceFromPlayerBeforeSprint <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>AllyCharacter<span class=\"token operator\">-></span>bIsSprinting<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// If the AllyCharacter is out of the `MaxDistanceFromPlayerBeforeSprint` value then</span>\n\t\t<span class=\"token comment\">// we set the AllyCharacter to sprint.</span>\n\t\tAllyCharacter<span class=\"token operator\">-></span><span class=\"token function\">SprintStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DistanceFromPlayerCharacter <span class=\"token operator\">&lt;</span> AllyCharacter<span class=\"token operator\">-></span>MaxDistanceFromPlayerBeforeSprint <span class=\"token operator\">&amp;&amp;</span> AllyCharacter<span class=\"token operator\">-></span>bIsSprinting<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// If the AllyCharacter is not out of the `MaxDistanceFromPlayerBeforeSprint` value</span>\n\t\t<span class=\"token comment\">// and it is sprinting then we set it back to the walking speed.</span>\n\t\tAllyCharacter<span class=\"token operator\">-></span><span class=\"token function\">SprintStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Keep in mind that above I have a mesh and skeleton loaded and if you don't update these references to your own or copy the ones from the <a href=\"https://github.com/robertcorponoi/unreal-follow-lead-ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> your editor will crash.</p>\n<p>Ok now save and compile and let's get to testing it out. After compiling head over to your editor and drag out an instance of AllyCharacter onto the level and we'll adjust some settings.</p>\n<p>First, find the Ally tab and in the PlayerCharacter reference select the PlayerCharacter that's on the scene. If you never added the PlayerCharacter to the level then drag out instance of that as well. Last thing we have to do is find the Pawn tab in the AllyCharacter and set the Auto Possess AI option to Placed in World or Spawned and the AI Controller Class to AllyAIController like so:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 499 218' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-09ec20b32a6a2626e43ab2dccf784503'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-09ec20b32a6a2626e43ab2dccf784503)' width='499' height='218' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAcCAYAAADRJblSAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAGL0lEQVRYw82YWU%2bUSxCG%2bT8IgqIIOAKiIDuyi%2bwgoCAQwg0kJIZgomzKjpAIqCBhiaBRhGDiDRcSDT%2bpzjxlatKMIxwnaL6Lml6nu6v6fauqv4jLly/L%2bfPnJTIyUqKioiQ6OlqFvpiYmED5f8Xms1a4a/xLibh48aIqfOvWLUlKSpK4uDiJj4%2bXCxcuhHXwUAbwskQkJyfLvXv3pKKiQrq6ulQ6Ojrkxo0biorY2NiwFsYAXldeDXDlyhVJSEiQc%2bfOCWgAASj9p4oH3zYGwICsy5hXJSIxMVHMCCiPUMc3XLp0ScXqzEPcfubb/62PNaERtMrMzNS2V0UpcPXqVSkqKpKWlha5e/eulJWVSXV1tTQ2Nkp9fb00NzcrTW7fvi2tra3aj9TU1Ehtba3cuXNH%2b5lLOzU1VddcXl6WlZUVSUlJEZ/PJ%2bx17do1T0kEPxw2IyNDSktLJT8/X%2buFhYVqFFfS09N1vKSkRKWgoEBLbjkrK0vn5OXlqcJYt6enR3p7e3UjDGCllyTCDsaB8QHAmDql%2bQSrGzWo21xKowaRA%2bjbelAAsT28KIoAwh/wBtbAn1uFCsDZqFBXV6e3D03oRyorK1W4%2baqqKu3Lzc1V5UHBzs6ObG9vS1pamqLMswbgcEDYlKEOHeB2eXl5QLjN4uJiDZkIhqLMzs5WOuAToAMGhe%2bjo6MyMzMj169f964BDJ7AGwgDa4sIBnWrm6cPRQHq/J/bR3nm2iamvBepEKAA8OYGzeFBBRABCuinDryhA/SgDSqMMg0NDUoXHCUKIy9evJD5%2bXk1iFf9QIACOTk5ynMUQlGUhNcoSokAdTMIQh2l8R82B76jLGtCgWfPnnnOAG5EOkYBgzWQduFvUMfDu9HBxtzIYEkRJchC3A09ZwCjAPEbSHP73ChJDW2cG46P26UfAfI4SYv7oMVyA8YZu3nzpjx//lwmJyf/GAH/wlC2R4ACKN7U1KReHQUwAJQA5ihF%2bAPucL29vV2VZg5KYxzmWnikn2gwMTEh09PTYkY234AEJyRu/982gq3NfscoAJyBOfAF3kDb2gZ167M6Xt8gHyzkArwqCYP4BuqUtEEF4wh1GzOD/E0juMnfsVQYR2jZG/Cmz9p4d5wgN2799NmiKGFi7dXVVU2Gvnz5Iru7u/Lp0yfZ29uTr1%2b/yvfv3%2bXw8FC%2bffsmP378kI8fP8rBwYGiC%2bNjmNP4e2YGoALUHzx4EOA%2bkLZHD9SgnwgBBe7fv6%2bPH6gCtIM3wKA8iN68eSNLS0saDsfHx5USU1NTqixKozxydHSkj6b9/X3p7u5WtBlKTAwpZ24Alw9u3U1k3D/yJ7f9uwNhGIzX2dmpxkIePnwobW1tWrfShJtHeVDFO92Sr%2bAo5PNxPvbyaT0cQ/yCAFdxu1FuACO4b2fG7Wnrbhx8CHNq/f39mgeQDs/Ozurtm2Okn7b1MT42NqZjoGZhYUFevnypwtirV6/8r8te/zni/UZKUeUxwplQAEXx/twK7348PHQA%2bggRAOgzB/ifpLwZEgNubGyooND6%2brrCnMfRhw8fNEOk//Xr1zpna2tL/QO0WVxclLm5OR1Hcea8f78tb9%2bu%2bs8aKxWViQEEhGOEkAjACxO6cHDmqWlbnzk96qfFa0PIwMCA3jDl06dPZXBwUIaHh2VoaEhL%2bhDqT5480ZxhZGQkMA5KEBACIvr6%2bpQGqam%2bYwb4UxqE9AGggMXdkGbhzu23%2bu8eOO7i9kw2AVmhUmz6SK0xMP%2bD95ZBUtJHyWOLvX2%2bZH87/KTpFwTYY8i%2bCFk2hwLAnhIkEB2oM37SG998xdramkKbELi5uanQx9MTBT5//izv3r3T0Egf8ujRIz3U48ePNTHjXFCSPVEcn1JdXeOPBvFSVo5xwosIIcMgCqMsqa9lc25JjsA4B8If8M0gVAh0wyDODwoAbcIgfIbbtHF2VvLtEGPxCY01eURxEdCQ6IAxQB90qa9vkAS/I8wvSAz7mR2SApbRcYBQmZ1B0dqnbc5cYM4HVQyGM6XEgOZcTQiXOFqMbBSw7wr2oGJN%2b1z3E7VnSIHgRdwExM3u3LHfbe4ubp/T3U/sJ4kpF2p996vyz/7wU2b3jP8BkeLKpcu7Gm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"499\" alt=\"Ally Pawn Settings\" data-srcset=\"/assets/static/allycharacter-pawn-settings.2c9df91.107f5a3c479a310b724a02cbd2c3a75e.png 499w\" data-sizes=\"(max-width: 499px) 100vw, 499px\" data-src=\"/assets/static/allycharacter-pawn-settings.2c9df91.107f5a3c479a310b724a02cbd2c3a75e.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/allycharacter-pawn-settings.2c9df91.107f5a3c479a310b724a02cbd2c3a75e.png\" width=\"499\" alt=\"Ally Pawn Settings\"></noscript></p>\n<p>And finally make sure that you have a nav mesh that covers the bounds of your level so that the AllyCharacter can actually move.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1580 607' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9a3625eb8a197f9464a8749fe2745aa0'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9a3625eb8a197f9464a8749fe2745aa0)' width='1580' height='607' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAZCAYAAACB6CjhAAAACXBIWXMAAA7DAAAOwwHHb6hkAAALN0lEQVRYw71Z%2bVOb1xXV1Elt4y1pJpPpdLLU0%2bm001IntgGBxA4GDA4OdrN4SWrHcQLEGAzG7MgYhPZ9R0K7EAgJs%2b%2bGJH/Y6X3vk5DAkLppyQ9nPvGt95577n33PkRaYxAm6zi0WhP0egu0xhAMlhAsljGYLU6YzQEY6JzJEoHZOgELwWoJw2aNwG6b4HDYoweDXXdMQ9/9DWyKPrjHp2DU22BzBGAabIax6yYcTvrmgwq4bTaYVGroHtbCYbHDaHBAqzbAoHdA1jcMibQYNTV1qK%2bvR2VFBSrKy3Hp0iVUVlYiLy%2bXkAfxPsjNzUVpaSm/PyfnIv87NzcHUqkEIo2WDFITCSofLBoySk0OGuOw68Nwmch4ywzsphk4jdNw0W%2b3Yx4e7wbGfRvw%2bjc5fIEXAoIv4A9ucbDfwnm6J7CNMZMbHmcY44F1jLkX4PauwmnywK6zwDW%2bAvOIHC5XAhZzFMbhUVht00R8DFpdBFr9FPr79KisuoKS8stobmrEzVu30XD9U3z2%2bQ1cqqpBgbQIksJi5EuKXoK4QErP1uBy3ccoKS1HSVkFiukooWdEIwNuKFsVULdroKajtl0JQ68Z%2bg41jJ0aWIZcsD21w95rgL3PCJfSC49vjQhYI%2bfX4WMIbMCfQjCJ5N8%2bctjrXyNCtjFOZHnGV0kFq3C5l%2bH0rMHhXoPVPgercxUm83MYTM%2bhM81DrZmCUhXFqCJMmEBPlwYNn1xDV8s9tDfdRXvzXfS03SN8g9b7N9D41TU8%2bPozPG669RI6Gm%2bil%2b4dfNwIWWcTnj5pwkDHt2i68ylEo6pJqPRxqI0JqAzT0NBRZ56BwTYHE0XbTMbZxpZg96wQluH2rScd3xAcD24iwBB6sYPgzm/hGruHEeEjIryMPC8jYYWUsATn2CIcrkXY7LOw2GYp1YgEUqBOT7ZoGQkRKNWT6O3RoqHhOhnfjA5yvq3xK3LuNu7fqkfznevk/KdoIQw8uouBtgzwv%2b9A1vENZI%2b/xdCTRgx1fofh7mZ0P/waIoUyCrU6SlKLwWBI8ChYrLNk0Dzl5gJcY8tk6DJFboUMFxzwJSOdcjwYTmGLsJ3EloAUGYwIpggiz0skepIkcCUwgulbTAlm%2braRUk5viHObVGSbUj2FwX4DSsurcVFchKtX61F/tQG1V65yWVfV1FIaXEZ5ZRXOX8zbhQs5Ynx0IZfLvqb2Y35/9eU6FJWU8ZQRKUkBamKaMW4wJXgELBR9m2OBR4YZOEbRZwaP8%2bhTNJkzKceSjoYiDBsIR9bpmER4NU3MHhJYCrF3sne7iACuAlIc%2bzZPBaZEfYxSIUokTEE2aEYhFa2S4mKUlJRQUStBGRW28rIylHGUcvDrr4CiwkIUFRUSAfRyjW6KM86YZxGwUvTtzkUeGe78uOA8k3AgMIdgcB7h0CIi4WVEycnJyBo5u4FYdAvx6AvMRDcJ25iLrmEqsoBgZJuub%2b0ogSmIpRFTFKsHY5kqIALMFAQjBUPPUlJLAdLE8FRmhlRSgEIy/OdQVFT00u/Mc5nXGEQqTYxLTW9Myv/A6G8i5I9jipyeDP9AjjMCZim6cYp6FO3aBBQuN0wBHUa9zzDo6US3s5EcDmNyYiOZEoJq/CkS9qrAuchTj6Wg0SykAasDGm0MQzJLkoCiHeP3Q6ZzP3cudV7E2NUy%2bRv3yn%2bJE8Dy1ONlVX8Fk8El9Bkf4YahCJ8bi/GJ/jxqdX9Bte5dSIcvQjz6LiSaLIhVpyBWnsSHShH%2bpS/HNKkkHFkRasO%2bKhBqwU4aEAFCGrA6wAiYxtDTVyPgv4VITS8X8n%2bGCJg9kIAAOe8fi6Os76/IlotwUX4U51XHcEFzDPny46gbrkKp5hzy1a9Dqj4DifYkipVvI3f4GLrMzZidZGmwQgrY2qkF%2bxFgdwhpIKwGCa5OjY4RYD1sAjIUQLnoIEm62LJHOerxriAaWqZl0oScPnJO%2bQbylWfwRUsWbj/Kwj/bj%2bCBJg/1jmzkKo4QAadRMvwOKvrfQ6nsD5CoTuKZRkvvWCMVrFIKvEgT4MuoA0R6igBzBgFaXRzPDo%2bA2C4FWG3zvBg5eAFkBLB1ewGx8Dq%2bG7yHD4eOIF9xmnAKRfIThOOQKo9T5I%2bhgIFSgBFwqfMsCpVvQkJqyFMfR2nfn%2bBxT1M9WCYC1oQO8QAFWH5dBcQyFDDL2bfvUYDfP4cAta%2bXu2hdlb%2bO/NEzECtOIE91HGL1CXL%2bBCdAQkeGAjWRoDrNjwUU/UL1W8hRvoYv5ZcwSe1xKDiX7BDXhaaIFUH30p4aMJOuAYdJAF8FaL3dvwiukHGLCAcXiSQPLnS8hTxlFvLkJ7kCCpSnKBUo%2bkSEhKIuUZ8kh7NI8uS8ioigYihV/Y6OdE3zJpGQhW5jK6ajPyHgn003RAcQoP81iuDPLYNOTsAM5e46Wvraca7/txDLTyNv5AQdCaMUYUoHieoNrgKJjqJtfBOFpjOEUxz5WlLJ6FGIB7Nw/snryP7yKBTDSsQiM/B553mBZanm5Mvgwv%2b8DP4CApjEYkIjRASYrXNCI8T6AOrTx8cTCFKErrSW49wzEUXzDcpzAjkrMTCwZe8o8qna5/Udx0ePjiD73ms4d%2bMUPrr2Di7Uvg9xdTYqrpTi2vXPcfOL%2bxgZ1lM/kSD5LwkF0LO3HX6ebIczG6FDIoB3gqwV3tMJ2qgpcbmeU/7PQ68NIqfp98gZIMceHsHf7v8G/7idheyGM/h79ds4X3kWkuocVNVV4XrDTdz9qhWP24YxIrPBoA7RGPycrwBT0XXEpjYxQW2y3zd/4BLIVwBTgtcmtWaST4bpTvD/TcCuWWBmpw5YHYtwOycQCSTQ2y1DdsGfUVCex%2bfphvpbuHenE52PFBgetMGojcBLRZI5OB3bRCKxhZmZHxGPb2MqtoEIdYKBEBuP1/hozNpqBk8y%2brtmgV0FMHMWMB0OAQqauVXEslAH4jz3BBXQJOiMw%2b%2bJwGKhaVEdxJhrjtpf6gmox49NkbPTW4gRJifXEZ5Yp8FokzvKnU2OwXzN58eNdPfnE3qLVPFzsujvkr8wB7ACqFJPgAVJNnBIBIwq6QM0cqbSIFMFdsccOT1NdWCeUmGRqvYiN1yYDVLT4QZf0/m%2bQGgPko6nN0bSU6CwH7As7Aew4scnwVT0E8n9gEm%2bH8BG9sEB4yERoKAP0EdYrrHlcLcKWC2g4kRLomOMpEoREzrD1fSOUCBjRyi4G75AEv71pPQznE9VfpfgvJWcT0%2bBafkrlMKO0EC/4XAI6JaFIR8NpUngK8I0N0RQAhHhYM3RPDeWGS1Miak5YTVDEQIxO7%2bT19hmSspp184u0AIpbJ7L3kKyN1ko8qY4qXCaj%2bdsI4Q5L5cHMSIPoa9XJxBwwFT3KtiXgKGRCd5p6fQJvh9ntrBosJxkEWI5yio1FazkJqgvsAV/aJvyne36/IBQ5Eea9AgTDD8l8eMO2PVQ5Ad%2bb4Ce4xum1A2yd7HNVdZqu9yrVAeWiZAl%2bvYC2TBHaTBDNsX5CqBSp5dBqVTKwRxKHV812pnPpI6iB809aHnQg9aWPrS1DqC9bRAd7TI87hjCk8fP0PVkGN1dI%2bjplqO3h9A7StEYRX%2bfgmOgX8kxOKBKQplG8hpD6n72LH8Pva%2bH3ttN7%2b/qfEbfGqJvPkXHIxnZMIC2h/1kUy9avu/Gg%2b97cP/rZk5ARUUl3wavqKjY2RJnW97/CWwXiT1TVVWF8vJy/pudF/3xjx8gjfdfxgfv44N98d4vxMvvYt/Y99tJu86eFY5isZj/T4ChtrYWDQ0NqKureyXpSyUSVFfX4JOGa/TsZf4ORsa/Afc1xs9yvRFNAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1580\" alt=\"Navmesh\" data-srcset=\"/assets/static/navmesh.82a2fbd.5d07ee812d864b7c4981d7a1968d650a.png 480w, /assets/static/navmesh.cbab2cf.5d07ee812d864b7c4981d7a1968d650a.png 1024w, /assets/static/navmesh.00bdde2.5d07ee812d864b7c4981d7a1968d650a.png 1580w\" data-sizes=\"(max-width: 1580px) 100vw, 1580px\" data-src=\"/assets/static/navmesh.00bdde2.5d07ee812d864b7c4981d7a1968d650a.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/navmesh.00bdde2.5d07ee812d864b7c4981d7a1968d650a.png\" width=\"1580\" alt=\"Navmesh\"></noscript></p>\n<p>Now if you have all that set up and press play you sould see the AllyCharacter following the PlayerCharacter and if you sprint as the PlayerCharacter you'll notice that at a certain distance the AllyCharacter will also start to sprint to catch up to you and then it'll go back to walking when it's near the PlayerCharacter again.</p>\n<p>Of course this is pretty simple but it handles fluid AI movement without overlapping logic in <code>Tick</code>.</p>\n<h2 id=\"making-the-allycharacter-lead-the-playercharacter\"><a href=\"#making-the-allycharacter-lead-the-playercharacter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Making the AllyCharacter Lead the PlayerCharacter</strong></h2>\n<p>Now that we have the AllyCharacter following the PlayerCharacter, let's work on having the AllyCharacter lead the PlayerCharacter. We're going to accomplish this by setting up one or more waypoints that the AllyCharacter goes between. We'll also set it up so that if the PlayerCharacter gets too far away from the AllyCharacter then the AllyCharacter will stop and wait for the PlayerCharacter to get closer before proceeding.</p>\n<p>So to get started on this, we need to create the waypoints that the AllyCharacter will use for navigation when leading. These Waypoints will need:</p>\n<ul>\n<li>A <code>UBoxComponent</code> to act as a box collider so that the AllyCharacter knows when it has come to a waypoint.</li>\n<li>A variable that tracks what number waypoint this is. This is needed as the waypoints will be found automatically by the AllyCharacter and they will be sorted by their index.</li>\n</ul>\n<p>So let's get started by creating a new C++ class that has a base parent of Actor and name it WaypointActor and let's get into defining the properties and methods we need in the header file:</p>\n<p><strong>WaypointActor.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Actor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"WaypointActor.generated.h\"</span></span>\n\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FOLLOWLEADAI_API</span> AWaypointActor <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AActor\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Sets default values for this actor's properties.</span>\n\t<span class=\"token function\">AWaypointActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The `UBoxComponent` of this WaypointActor that lets the AllyCharacter</span>\n\t<span class=\"token comment\">// know when it has arrived at this WaypointActor.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UBoxComponent</span><span class=\"token operator\">*</span> WaypointBoxCollider<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The number waypoint that this WaypointActor is. The AllyCharacter will</span>\n\t<span class=\"token comment\">// follow waypoints in order.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Waypoint<span class=\"token punctuation\">)</span>\n\tint32 WaypointNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And in the cpp file we just create the box collider and set its initial extents:</p>\n<p><strong>WaypointActor.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"WaypointActor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/BoxComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets the default values for the WaypointActor.\n */</span>\nAWaypointActor<span class=\"token operator\">::</span><span class=\"token function\">AWaypointActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Create the box collider, set its default extents to something we can see,</span>\n\t<span class=\"token comment\">// and then attach it to the RootComponent.</span>\n\tWaypointBoxCollider <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UBoxComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WaypointBoxCollider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tWaypointBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetBoxExtent</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">90.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tWaypointBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>So now we'll need to hop back to our AllyCharacter and add some more variables. We'll need:</p>\n<ul>\n<li>A variable for the maximum distance away the AllyCharacter can be from the PlayerCharacter while leading before they stop and wait for the PlayerCharacter to catch up.</li>\n<li>A variable that keeps track of the WaypointActor that the AllyCharacter is currently moving towards.</li>\n<li>A variable that keeps track of the WaypointActor that the AllyCharacter should stop at.</li>\n<li>A boolean that keeps track of whether the AllyCharacter has made it to the current WaypointActor. This is used in instances where the AllyCharacter needs to go through multiple waypoints.</li>\n<li>A map that will be populated in <code>BeginPlay</code> by all of the WaypointActors in the current level.</li>\n<li>A boolean to remember if the AllyCharacter should wait for the PlayerCharacter for the current leading request.</li>\n</ul>\n<p>Let's go ahead and define these in the header:</p>\n<p><strong>AllyCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The maximum distance the PlayerCharacter can be from the AllyCharacter when</span>\n<span class=\"token comment\">// following before the AllyCharacter waits for them to catch up.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> Ally<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">float</span> MaxDistanceFromPlayerWhileLeading <span class=\"token operator\">=</span> <span class=\"token number\">500.f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The WaypointActor that the AllyCharacter is currently moving towards.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AWaypointActor</span><span class=\"token operator\">*</span> CurrentWaypoint<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The WaypointActor that the AllyCharacter is ending at.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AWaypointActor</span><span class=\"token operator\">*</span> EndWaypoint<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Indicates whether the AllyCharacter has arrived at the WaypointActor marked</span>\n<span class=\"token comment\">// as the `CurrentWaypoint` or not.</span>\n<span class=\"token keyword\">bool</span> bIsAtCurrentWaypoint <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A map of all of the Waypoints in the current level.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\nTMap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> AWaypointActor<span class=\"token operator\">*</span><span class=\"token operator\">></span> Waypoints<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Indicates whether the AllyCharacter should wait for the PlayerCharacter when leading.</span>\n<span class=\"token comment\">// This is set by the AllyAIController.</span>\n<span class=\"token keyword\">bool</span> bShouldWaitForPlayerWhenLeading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And then in the cpp file we'll start off by populating the <code>Waypoints</code> map by getting all of the WaypointActors in the level and then sorting the map by its keys. Lastly we'll add functionality to <code>OnComponentEnterBoxCollider</code> to check whether the AllyCharacter is the LEAD state and what they've collided with is a WaypointActor and if so we set <code>bIsAtCurrentWaypoint</code> to <code>true</code>.</p>\n<p>Also you'll have to include the WaypointActor header in the AllyCharacter cpp file:</p>\n<p><strong>AllyCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AllyCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../WaypointActor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/CharacterMovementComponent.h\"</span></span></code></pre>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the AllyCharacter is created.\n */</span>\n<span class=\"token keyword\">void</span> AAllyCharacter<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Get all of the WaypointActors in the level.</span>\n\tTArray<span class=\"token operator\">&lt;</span>AActor<span class=\"token operator\">*</span><span class=\"token operator\">></span> FoundActors<span class=\"token punctuation\">;</span>\n\tUGameplayStatics<span class=\"token operator\">::</span><span class=\"token function\">GetAllActorsOfClass</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> AWaypointActor<span class=\"token operator\">::</span><span class=\"token function\">StaticClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FoundActors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// For each WaypointActor we found we have to try and cast it as a WaypointActor</span>\n\t<span class=\"token comment\">// as they are found as Actors not WaypointActors. If we can successfully cast it</span>\n\t<span class=\"token comment\">// to a WaypointActor then we add it to the WaypointActors map.</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>AActor<span class=\"token operator\">*</span> FoundActor <span class=\"token operator\">:</span> FoundActors<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tAWaypointActor<span class=\"token operator\">*</span> Waypoint <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AWaypointActor<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>FoundActor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// If we can successfully cast the Actor to a WaypointActor then we add it to</span>\n\t\t<span class=\"token comment\">// the map with the WaypointNumber as the key and WaypointActor as the value.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Waypoint <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> Waypoints<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Waypoint<span class=\"token operator\">-></span>WaypointNumber<span class=\"token punctuation\">,</span> Waypoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// After all of the Waypoints have been added to the Waypoints map then we sort the</span>\n\t<span class=\"token comment\">// map by its keys, which are the WaypointNumbers.</span>\n\tWaypoints<span class=\"token punctuation\">.</span><span class=\"token function\">KeySort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> A<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> A <span class=\"token operator\">&lt;</span> B<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when a component enters the AllyCharacter's box collider.\n */</span>\n<span class=\"token keyword\">void</span> AAllyCharacter<span class=\"token operator\">::</span><span class=\"token function\">OnComponentEnterBoxCollider</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if anything is null so we can avoid a potential crash.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherComp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Try to cast the `OtherActor` to a WaypointActor.</span>\n\tAWaypointActor<span class=\"token operator\">*</span> Waypoint <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>AWaypointActor<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OtherActor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If the AllyCharacter is in the LEAD state and we were able to successfully cast the `OtherActor`</span>\n\t<span class=\"token comment\">// to a WaypointActor, then we set `bIsAtCurrentWaypoint` to `true`.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">==</span> AllyStates<span class=\"token operator\">::</span>LEAD <span class=\"token operator\">&amp;&amp;</span> Waypoint <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> bIsAtCurrentWaypoint <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>And that's it for the AllyCharacter for now. There's nothing to test yet so just make sure to save and compile before we move on to next part.</p>\n<p>Now since the PlayerCharacter is going to be the one issuing commands, we have to create the functionality so that the PlayerCharacter can tell the AllyCharacter to lead. This can be implemented anywhere not just the PlayerCharacter but for the purposes of this demo it'll be easier to show since we're just going to tie the lead action to an action input for the demo.</p>\n<p>So let's see what we need to add to the PlayerCharacter:</p>\n<ul>\n<li>A delegate that will be broadcast when we want the AllyCharacter to lead which in our case will be when the \"Lead\" action input is pressed.</li>\n<li>The above delegate is going to have 3 parameters. The <code>WaypointNumber</code> of where the AllyCharacter should start, the <code>WaypointNumber</code> of where the AllyCharacter should end, and whether the AllyCharacter should wait for the PlayerCharacter to be in <code>MaxDistanceFromPlayerWhileLeading</code> range before continuing or not.</li>\n<li>We also need to create a variable that we can use to broadcast the signal.</li>\n<li>Since we're going to ask the AllyCharacter to lead when we press the F key, we need to create a method to respond to the F key being pressed.</li>\n</ul>\n<p>Let's go ahead and define these two things in the PlayerCharacter's header. Note that the delegate goes outside of the class, I put it under the includes.</p>\n<p><strong>PlayerCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Creates a delegate that's used to tell the AllyAIController to make</span>\n<span class=\"token comment\">// the AllyCharacter lead the way.</span>\n<span class=\"token function\">DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams</span><span class=\"token punctuation\">(</span>FAllyLeadRequest<span class=\"token punctuation\">,</span> int32<span class=\"token punctuation\">,</span> StartWaypoint<span class=\"token punctuation\">,</span> int32<span class=\"token punctuation\">,</span> EndWaypoint<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span> bShouldWaitForPlayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Broadcast when the PlayerCharacter triggers an object in the level that</span>\n<span class=\"token comment\">// that makes the AllyCharacter switch to the LEAD state or when the PlayerCharacter</span>\n<span class=\"token comment\">// is deemed to be \"lost\".</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>BlueprintAssignable<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"StateEvents\"</span><span class=\"token punctuation\">)</span>\nFAllyLeadRequest OnAllyLeadRequest<span class=\"token punctuation\">;</span></code></pre>\n<p>Down where our other methods are defined:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the \"Lead\" action input is pressed.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LeadAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the cpp file we have to create the <code>LeadAction</code> method and register it with the <code>PlayerInputComponent</code>.</p>\n<p><strong>PlayerCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called to bind functionality to input.\n *\n * @param PlayerInputComponent An Actor component for input bindings.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span>UInputComponent<span class=\"token operator\">*</span> PlayerInputComponent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">check</span><span class=\"token punctuation\">(</span>PlayerInputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set up the methods to respond to the PlayerCharacter moving forward, backward,</span>\n\t<span class=\"token comment\">// left, and right.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MoveForwardBackward\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>MoveForwardBackward<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MoveLeftRight\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>MoveLeftRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the \"TurnLeftRight\" and \"LookUpDown\" axis inputs to control the yaw and pitch</span>\n\t<span class=\"token comment\">// of the camera.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TurnLeftRight\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>AddControllerYawInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LookUpDown\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>AddControllerPitchInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set up the methods to respond to the sprint action input being pressed and released.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sprint\"</span><span class=\"token punctuation\">,</span> IE_Pressed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>SprintStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sprint\"</span><span class=\"token punctuation\">,</span> IE_Released<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>SprintStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set up the method to respond to the AllyLead action input being pressed.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AllyLead\"</span><span class=\"token punctuation\">,</span> IE_Pressed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>LeadAction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the \"Lead\" action input is pressed.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">LeadAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Make the AllyCharacter lead the PlayerCharacter from the first waypoint to the</span>\n\t<span class=\"token comment\">// second waypoint and waiting for the PlayerCharacter to be in range.</span>\n\tOnAllyLeadRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Broadcast</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>And we're done with the PlayerCharacter and onto the final piece, the AllyAIController. Make sure that the above is saved and compiles and let's move on to that.</p>\n<p>Again our goal is to avoid the use of the <code>Tick</code> method so we're going to need to create a timer that runs the Waypoint movement logic. So with that said let's see what we need for the AllyAIController:</p>\n<ul>\n<li>A method named <code>MakeAllyLead</code> that'll respond to the PlayerCharacter broadcasting the signal indicating that the AllyCharacter should lead from waypoint A to waypoint B.</li>\n<li>A method named <code>MoveToWaypoint</code> that'll check to see if the AllyCharacter needs to wait for the PlayerCharacter and move to the current WaypointActor.</li>\n<li>A timer that will repeat and call the <code>MoveToWaypoint</code> method.</li>\n<li>We need to add on to the <code>OnMoveCompleted</code> method to see if the AllyCharacter is at the ending WaypointActor then it needs to put the AllyCharacter back to the FOLLOW state. If there are still more waypoints to go to then it sets the <code>CurrentWaypoint</code> property of the AllyCharacter to the next WaypointActor so it can walk to the next waypoint.</li>\n</ul>\n<p>Let's go ahead and define the above in the AllyAIController's header file:</p>\n<p><strong>AllyAIController.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The repeating timer used to make the AllyCharacter lead the PlayerCharacter.</span>\nFTimerHandle AllyLeadTimer<span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called to move the AllyCharacter to its `CurrentWaypoint`.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">MoveToWaypoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Called when`OnAllyLeadRequest` is broadcast to put the AllyCharacter in the LEAD\n * state and make them move to a waypoint.\n */</span>\n<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">MakeAllyLead</span><span class=\"token punctuation\">(</span>int32 WaypointA<span class=\"token punctuation\">,</span> int32 WaypointB<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bShouldWaitForPlayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>and now in the cpp file we create the methods defined above and add the logic we discussed:</p>\n<p><strong>AllyAIController.cpp</strong></p>\n<p>Make sure you have the following includes:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AllyCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../WaypointActor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../Player/PlayerCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Tasks/AITask_MoveTo.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Character.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Kismet/GameplayStatics.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Kismet/KismetMathLibrary.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Navigation/PathFollowingComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/CharacterMovementComponent.h\"</span></span></code></pre>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the AllyAIController starts.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set up the response to the PlayerCharacter's `OnAllyLeadRequest` delegate.</span>\n\tAllyCharacter<span class=\"token operator\">-></span>PlayerCharacter<span class=\"token operator\">-></span>OnAllyLeadRequest<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AAllyAIController<span class=\"token operator\">::</span>MakeAllyLead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Move the AllyCharacter to the PlayerCharacter from the start.</span>\n\t<span class=\"token function\">MoveToPlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when a move request has been completed.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>FAIRequestID RequestID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FPathFollowingResult<span class=\"token operator\">&amp;</span> Result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>RequestID<span class=\"token punctuation\">,</span> Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> AllyStates<span class=\"token operator\">::</span>FOLLOW<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Check to see if the AllyCharacter is moving with a simple velocity check.</span>\n\t\t<span class=\"token keyword\">bool</span> bIsAllyCharacterMoving <span class=\"token operator\">=</span> AllyCharacter<span class=\"token operator\">-></span><span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Velocity<span class=\"token punctuation\">.</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bIsAllyCharacterMoving<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// If the AllyCharacter is moving then it means that the PlayerCharacter is still moving</span>\n\t\t\t<span class=\"token comment\">// so we call `MoveToPlayerCharacter` to keep moving towards the PlayerCharacter.</span>\n\t\t\t<span class=\"token function\">MoveToPlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tUWorld<span class=\"token operator\">*</span> World <span class=\"token operator\">=</span> <span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>World <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Otherwise if the AllyCharacter is no longer moving then `OnMoveCompleted` will not run</span>\n\t\t\t<span class=\"token comment\">// again so we need to set up a repeating timer that checks to see if the PlayerCharacter</span>\n\t\t\t<span class=\"token comment\">// has started moving again and if so we cancel this timer and call `MoveToPlayerCharacter`</span>\n\t\t\t<span class=\"token comment\">// which just restarts this whole process.</span>\n\t\t\tWorld<span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span>AllyFollowTimer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AAllyAIController<span class=\"token operator\">::</span>CheckIfPlayerIsMoving<span class=\"token punctuation\">,</span> <span class=\"token number\">0.05f</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tWorld<span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ClearTimer</span><span class=\"token punctuation\">(</span>AllySprintTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> AllyStates<span class=\"token operator\">::</span>LEAD<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>CurrentWaypoint <span class=\"token operator\">==</span> AllyCharacter<span class=\"token operator\">-></span>EndWaypoint <span class=\"token operator\">&amp;&amp;</span> AllyCharacter<span class=\"token operator\">-></span>bIsAtCurrentWaypoint<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// If the AllyCharacter is at the last waypoint then we can clear the lead timer and set</span>\n\t\t\t<span class=\"token comment\">// them back to the FOLLOW state.</span>\n\t\t\t<span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ClearTimer</span><span class=\"token punctuation\">(</span>AllyLeadTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tAllyCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">=</span> AllyStates<span class=\"token operator\">::</span>FOLLOW<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Set the AllyCharacter to move to the PlayerCharacter again to keep the follow loop going.</span>\n\t\t\t<span class=\"token function\">MoveToPlayerCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>bIsAtCurrentWaypoint<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Otherwise we set the AllyCharacter to move to the next waypoint.</span>\n\t\t\tAllyCharacter<span class=\"token operator\">-></span>CurrentWaypoint <span class=\"token operator\">=</span> AllyCharacter<span class=\"token operator\">-></span>Waypoints<span class=\"token punctuation\">[</span>AllyCharacter<span class=\"token operator\">-></span>CurrentWaypoint<span class=\"token operator\">-></span>WaypointNumber <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tAllyCharacter<span class=\"token operator\">-></span>bIsAtCurrentWaypoint <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to move the AllyCharacter to a WaypointActor.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">MoveToWaypoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Make sure that this is only called when the AllyCharacter is in the</span>\n\t<span class=\"token comment\">// LEAD state.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">!=</span> AllyStates<span class=\"token operator\">::</span>LEAD<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If `AllyCharacter->bShouldWaitForPlayerWhenLeading` is true then we need to check</span>\n\t<span class=\"token comment\">// to see if the PlayerCharacter is too far from the AllyCharacter and if so then we</span>\n\t<span class=\"token comment\">// stop movement until the PlayerCharacter gets closer. Otherwise we just continue to</span>\n\t<span class=\"token comment\">// the WaypointActor.</span>\n\t<span class=\"token keyword\">float</span> AllyDistanceFromPlayer <span class=\"token operator\">=</span> AllyCharacter<span class=\"token operator\">-></span><span class=\"token function\">GetDistanceTo</span><span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>PlayerCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>bShouldWaitForPlayerWhenLeading <span class=\"token operator\">&amp;&amp;</span> AllyDistanceFromPlayer <span class=\"token operator\">>=</span> AllyCharacter<span class=\"token operator\">-></span>MaxDistanceFromPlayerWhileLeading<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">StopMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">MoveToActor</span><span class=\"token punctuation\">(</span>AllyCharacter<span class=\"token operator\">-></span>CurrentWaypoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Responds to the `OnAllyLeadRequest` to put the AllyCharacter in the LEAD\n * state and make them move to a waypoint.\n */</span>\n<span class=\"token keyword\">void</span> AAllyAIController<span class=\"token operator\">::</span><span class=\"token function\">MakeAllyLead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> WaypointA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> WaypointB<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bShouldWaitForPlayer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Put the AllyCharacter in the LEAD state.</span>\n\tAllyCharacter<span class=\"token operator\">-></span>State <span class=\"token operator\">=</span> AllyStates<span class=\"token operator\">::</span>LEAD<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Clear the AllyFollowTimer if the AllyCharacter was in the FOLLOW state before.</span>\n\t<span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ClearTimer</span><span class=\"token punctuation\">(</span>AllyFollowTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the AllyCharcter's `CurrentWaypoint` to `WaypointA` and `EndWaypoint` to `WaypointB`.</span>\n\tAllyCharacter<span class=\"token operator\">-></span>CurrentWaypoint <span class=\"token operator\">=</span> AllyCharacter<span class=\"token operator\">-></span>Waypoints<span class=\"token punctuation\">[</span>WaypointA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tAllyCharacter<span class=\"token operator\">-></span>EndWaypoint <span class=\"token operator\">=</span> AllyCharacter<span class=\"token operator\">-></span>Waypoints<span class=\"token punctuation\">[</span>WaypointB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\tAllyCharacter<span class=\"token operator\">-></span>bShouldWaitForPlayerWhenLeading <span class=\"token operator\">=</span> bShouldWaitForPlayer<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Move to the next WaypointActor which could be WaypointA, WaypointB, or a WaypointActor</span>\n\t<span class=\"token comment\">// in between.</span>\n\t<span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span>AllyLeadTimer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AAllyAIController<span class=\"token operator\">::</span>MoveToWaypoint<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now save and compile and let's get to the fun part, the testing. Go ahead and drag two WaypointActors onto the scene and extend their box extents out a bit so that they cover a bigger area. Make sure that you give one of them a <code>WaypointNumber</code> of 0 and the other a <code>WaypointNumber</code> of 1. Now if you press play you'll notice the AllyCharacter following you as usual but if you press the input action for \"AllyLead\" (probably F if you followed what I did) then you'll see the AllyCharacter walking towards the first WaypointActor. Now if you don't follow the AllyCharacter then it'll eventually stop because you're out of range and you need to get closer before it continues towards the WaypointActor. After it gets to the first WaypointActor it should start heading for the next one. Finally when the AllyCharacter is done with the waypoints it'll go back to following the PlayerCharacter.</p>\n<p><strong>Note:</strong> If your AllyCharacter is not going towards the WaypointActors then the changes might have not been picked up so the best thing you can do is start fresh by deleting the existing PlayerCharacter and AllyCharacter and drag out new instances of them. Then set the reference to the PlayerCharacter in the AllyCharacter and set the AIController class to AllyAIController class like we did above.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Conclusion</strong></h2>\n<p>Well that's all for this tutorial, I might come back to this in a future tutorial and expand it to show how the AllyAIController can be used to help the PlayerCharacter in combat but this is a good starting template for any projects you might have that need similar functionality. If you would like to see a specific topic for the next article don't hesitate to send me a message and I'll do my best to make it happen. Also make sure to check out the <a href=\"https://github.com/robertcorponoi/unreal-follow-lead-ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> for an example of everything we created in this tutorial along with animation classes and blueprints.</p>\n"}}]}}},"context":{}}