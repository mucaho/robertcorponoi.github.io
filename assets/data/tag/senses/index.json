{"hash":"305598f676ad909ff252c1b54486de318642fe7c","data":{"tag":{"title":"senses","belongsTo":{"edges":[{"node":{"title":"Unreal C++ Creating a Patrol AI With Hearing Sense","path":"/unreal-c-creating-a-patrol-ai-with-hearing-sense/","date":"6. August 2020","timeToRead":22,"description":"Learn how to create a patrol AI that responds to sound","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/testing.07cc2b7.7a3f36bec56885f4d37e9a6597d6a813.png","size":{"width":860,"height":380},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/testing.a67b0b2.7a3f36bec56885f4d37e9a6597d6a813.png 480w","/assets/static/testing.07cc2b7.7a3f36bec56885f4d37e9a6597d6a813.png 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 380' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-5ae1a365ddc8207087ee4aae6c7c5d2f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-5ae1a365ddc8207087ee4aae6c7c5d2f)' width='860' height='380' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAcCAYAAADRJblSAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAU/UlEQVRYw01Y91dUWbr173gza82sng4GJBZUjlQBRSgoMihBBHNAMKGioiICIkFEW1BBEUVAGwmmabTVtpPabQJEcs6gbU/PTPe8/fa5Zb/3fvjWuXXvperu/e29z3dZ8O3Tp2j75iEePX2MZ6/b8bj9GX7seIUXXZ3ofNODrq4%2bvO7qR9ebIbx%2bM4w3PaM8P4b2rjG8fC3WCXR2T%2bJN/zT6hmbROzSHju4JPH7Wg5u3H6Li3BUcOFyEnXsOY/uuQ9h/MA8lJ04jJ78EXz34AeMTbzE4NIXhkWmMjE5jdHRGWsXnoeFpXpvGwJDjeHTU8bm3fwp9A1MYGJxC/6BjHRgS5ybR0/%2bh%2bibRzXrD6uzhM/ZM8rkm8bp3Ci86RhAWvR6Llmqx4Muer3Cl7yoae1pwpfcqLvfV4%2b8993BtoAkve9rxurMHT398iZ%2bePcer9k6S0Yv%2b/iE%2b4DgfdApDI6Po6R3B02dduH33e1y41ISC4gpk7M3Fpi27sW7jDmzdmYVdmTnYsfswCcjH8bJyZOcW496DxxgjAQLc0MgMxsZmMD4%2bizFRY4KIGf7OjOP68Ix0T/8gCRgQYEn4oIMcUX3S%2bRn0sLrZjB6S1N0nakIioqtnDK862cTuEbxs7yUBa7HYWY8FHa%2b70UdA/f3D0vr6dS96uvvRyc6/ePUYb7rrMDDQzGuN6B%2b4xQ7cZDWhvaMG33xXi6aWo6isPorC47uwffchbNm%2bH%2bk7srBt1wFsy8gi6IPIyMzGnv15XHOQmZWHE6fO4lBOIR48fIyZmZ8xOTmLqak5TE3OYWLCQcDo2CyGR2cl0EMjsxgYnpVAD42SsNF36KfS%2bgYJtneCDSDI3nE%2b85CkVNGQru5BdPcM8vkH8OLlazx73sHV0cCXr14jNHIVlrgYseBVexd6egZ4Yx/6%2bgYJdJhAuzE42IqhoWaCvc4vusovqMM3357CtcajqKpOR9HxVALKIOCDSGeHhby3ZeRi647D2LU3j8Bzkbo1G1u2ZSNt%2b2GkbjuAtRt3IillE3aQnMNUwP2H32Nu7j0JmMP09Dymp%2bYxMTlPW8xRAYIEqoKE9PWP4fTZS6iovIwbtx/g4TdP0d7ZK4Hr6htG99AYbTGM5y86WR3ofN3DRvZIYH961o4fHj8n6C7pc0/voHSfLTQJTq4mLGjvfMOTA1L3R0bH%2baOUT%2b8oBDH37t9B682DuHBxI/IKEpGVvQ1H8otw%2bEguP29BfmEaKwOlJ1NxtHAN8o%2btZGeTse9AEjL2xBFoNDZstmPtBiti4oKg1ofBVWaCp9IP2zMO4v6Db/l7kyR5lICnMDIySbWNsgEjrFHmzyA6Xnaxs7383hIUFJ3CqYpqnCyvxpnzl3Guug5Pyk7jZUYmnrQ9lMjopGVftXeThF508FiQ8eZNP5s4IBEgVkGSzb4CTm4kQHRddP/HZy8pyR9wqbYcZadSUVi8hj%2bahpzcHHY7F8WlefRuKXLzy5DNh9l/KAWHjoQjNiEJ0cujEGS3wRoYAIvVCoPZh2WGj78ZZj8/WFh6kz%2bBB8JD7gcXmRnWoDi03XvIbk9JmTI4NMKH6yP5w3zQl/j%2b8RncvpSDpuPpaGs9wVxZi%2bLj6/B5xXZWNk5/vhWFZYdwIdqImzpvnD5agqqaOly9eh23brfh/v1HePL0Gbv/FI%2bf/ET5d0iEvKa1nz1v5/Mm0ALMgPIz1QR2Bjl5JQRcxLDKwu692wlyN/bsXYd1GzYjetlGemY1gsNWEuQyBNjiYfLxh9HHAlfPAFYgZIoQeKrs8FKHQq62SyVThrCCeU58DoFKL875w83TzPsDSHYjvT9D9Q2y48K/lPWbPvRSka/aX%2bB6XhHq0/ej7VIdjhTkU2FHcaaqEqcrTmNn%2bRVsOXsVxQWFOLb3MHKOlbFZxVK4HskvJqYKXLrSiL%2b3PcC33z3FM1qhvaOb9YakPENgSAJDUIcFIrBEMu/YRS9vP4BVa1exIrAsIY7ds0Op9eYD%2b8FD4Qc3Lx8e%2b8LVw8xOBrBskGuCpFJobVBobJS5HSqdXTrnpQ7kaiNwgteFQG0Ilb7HhTbwUPjjfHUD5mbfcXubov/p%2bdFJ5s6oZInhiRmczirAWrUVN%2bqbcaToJHOjCCVlZ6nQSoQWN0F59DZyPq9FfhHB51GdRx11tPAEySqlQoupnNMM3Spcqb%2bOtrsPqYqXtN53VOByLBYKMPvEIDAgAf7W5bAFJUGrMcHH4gKTUQkPd8rW0x8KBQGykwqlDV6qQHixi16qAAIMYGcdBEifeU2hDZaIEOeVPFbpQ6HUOQgQCvDk37p4GCUCyiurMTQ2gNYvb%2bBCbS0/V%2bHUmfOoqKjBlcoGlGbnYENQDMqPliM3Kx%2bH846hsOQUykrLELWvAoGZJcgprUDesVM4KhSQfxzZRwqRRzvkFxwnYSUk45RU2zL2oeFakxSCT54%2bpwXiaQEDFixS6bDQpMVikw6LvbVYajVjoc6ERQY9XP2McDNRAb5muPuy%2b5S8jAHmqbASoE0qAVqmdIAX4ETJeN1D7svVTzoW5CgklQRjqZteKvE3p8%2bdR/dgF8ovlSPvXCZqvj6C2q%2bzUFOThMb8fXh4thD3ygvRlkfQG7Io7wKUFJdi7dGLCCmtQxRtYMpvwc7cz3GssAx5hSe5HZ9GARWQRwLyCoQSTkqVujUTjU23OFdM4MefOhAQHM8Q5DbobtPCeZkKTnaSEKXGkmg1FvnJ8VmYDItiFVgSoYFzqAFLIw1YEqORgAkCBDABQqyeXN153sPL9wN4PwcBLC%2bl47pDHTYJvJObDu6878LFBkp/jlvuGHeBcQbiACbmWtDxqAoNB7fiUmYqc2AHLmaux/UDB3BgWxYSU7ZgZUk5Yi62QJ/XDPmOMwg5UIVVa7YhafU2Xk%2bjfddjecIGxCWlYvmKVCQkb%2bE2nUYFVFMBr1FzpR5671A4e3hjgSXQApO/L9xVLKUv3JQWLHYjEe4auHgZ4e7Ozrv5wN3NTzp2ZYILoAKwJzv7R/1hAQFe3CNX/58ihB3ENWEFNy8Llrrr%2bfdWnK26zKGHI2svZ5CBAfT2PeIEV4dbp3JRk5eJCxl7cOPIEVRkr8W5Q2uQGrkWAWEmRDCznFYVQbMmD57RGVDvKIfGL07KGJ05CkpaTecdCbN/AnwCkhBgT4a3XyBS0/dyC71JlZxkiIc5FOAUbIHHevp8TRBXdm2TBc6RRixJVMMpWQcvnaNzci1BSMHmKA920E0iguHo6SOVOBbEuMq8paR387TAncEpgk9GJQgChAKWuGjgxvuqLtRjdmYew0PjGB4YZ/h9jfZnDWgtKcC392%2bgJGMlylIjUHIsGqWFy3GBighNYO5sLYXP/s8RnFsB68qt0GdeQFDyPso6GcGRG%2bFrS4I1JBmBYatZa%2bATFA%2bFSoGVmxJRWHkMRWezYbKGOAgIiwzH2vVbkLRyO2WzCfYw%2bpXeVmmCoTHaoTaxjKESu1pTuMSwluxqTRE8Fy6VxhjBgAsjQDvJCmEoBlMVgVKXXUmSkNoSV71Uny6Rs7ywiMflVRcwPjuGjv6XeD74A7qma9FatQ/1FTvQOd6I0yXrkLXFCa1fLUNDowXntyYicdsmxOZmYE3RAaQcO4TorAPwPlgH24pdnO7WEHgKwS0j6ERHBa6ANSIGK/I8saFChiNfq1HWboAxzAInFw5CcrWREvVjd/2hFEGl9ueDWyTvanVh3BUIkvu4mt3TeodBYwqXyBDbnSgNj0W6Kz6kvEh9jTFcKkGSzjuKpEVLxOktMVSSjaSYoTRGoaAhA9//Wog7k3vROr0ZD39JRsvlWNx%2bEo2279Yib0MKDq%2bOR03xZlytD0VGdCj8YvfBbX0xFu%2bshsuWcmizGmDaWQFL8EpKPg4G31joLBEkIQZGazRnlXg2cRnMKQbsbVXgi7dG1E1ZYIn2wRJnEvBnlSf%2bHOyCj4Ld8XGUBz5ersTHAWqGIMMvyohF8WosXKGBU4SZpBAsOy7AKvUO4GKfV7LbKuFxccxzSl2wo6RtMIRkhEmeNHDL9eAu4uJl4kPFIu%2bLZDz6LQ1336bh/vt03J3fjhtfrsDjoVC0nt6LbyuO4%2bvKQnx/7jj2rd6AFI6v1tXZUGwqwtLtZ%2bG1qxLm47dh3lsFrYXKNJNwX7HaSX4UZOoImCODseGkCeXtWoL3xtU5My6NeUNtU%2bBvn8qxIKVMg6hUSiY0Ft72KPhGaRCb4oKAaBkC45chYuNqhKREIzxZjvgkHQJCbHyVXMdkTeMYvJmJuwny2LVwWrYOMm%2bSo3aEnaOCpa1PbaBSjKESEXJtIP1vhsoUjfwv1uO73/fj7twefPV%2bN%2b5N7MbnBzej6Voazh9eidLNK3BuYzpy4lbi%2bKo9yI3fiMCgFXCLSof7lpPwXF8A2Z4L8IpOg0LPucMoBjM7nGX%2b0IeZkX7OiJohb9z53R%2btvwThi9kgNM774zIJ8LS64U9/ccWCWkqiZtwXmdd1CF3PFxWVF2QyOXR6HUwWO/zoJz//MBjN9I1Fz05aYfTl8GRPhCWAxFlj4RUYBxmDxpOA3cVWKAYlSQ0OW4gQFVOhIELMEa5ybz4sCWhcRwIy0Ta/Ffd%2b3oK2mTRUlG3E5RP7cGljAUfcFE55IShdsRP1u/KREZEMHy13lqR9UGwshHr1IWiza2lhbr0KGxa6WqAJ1RO4BrWjBnz5Hx/ceO%2bHxlk/XJ%2bzonEuGE1v7WiYDoR3pJ80qi8o7XNGaf8SnJl0QtnwQuy65QT/zS74ROaBjz7VcFw08oHNLEqXI7GbSH0muFgFUA%2bWglugUuWYCt0Vjm1Q7AbSKCyNw2JaDJTsIMbgpTIDFIZIHLm6Co/%2bvQdtQgFvqYCft%2bLO1HrU3VyDkvAtuNa0Gk3DYShZtgGHlq%2bGQc8BTGuFftUBqGLSoEvcAXP6cSzx8och2oSMGjMaJv1x979DcPN9KJpmQ9A0L0AH4vo8FTATglu/BWPdCQaghx9VE8yXoRF3nBmV4dyoHOfHlah9p8SV9woUPZch8ZgM8iANPnM2SoHhLucMr/SW5gWZyiqNwp4shZC6ziF10W3HtucvzQdi/ePYk2Qs4RC02E0DOQP2YF0i7v66Ac3TCWidi0XTTBhafw3Gtb4wFCWmIH0nQy/JguywBMR42/FfH3MwczJjceQeOKfkcHqNhyGzErsbonF9NgD3/hOOmz9HoHk2Ai3zrLc8nreTgABcm7Hi9u9W7KrX4SMXvsBxh1KwIQvOjCpxdkyDc2NaVI3pUTVqxPkxE2rnGBi/mnB2SIP0y0qYEtT4xEWNjz/T8e2Pb3NqH5a/xKJCZyM4f8dL0QcyhPzFbiGyQMwPAryoxa5aLHRR8m9DkdcaiW%2bwHDffRuLGfBRJiMCNd3a0jkThwvZ9KKuJQWGbFaUp6ThWkoDVxTIs3%2bEFw3ob3DkVbq4OhankBJrfxePOL3YJeCuBt74V4MPR/NZG8FZ23opb//bH0Qd6fMb5ZaFHMAnw%2bYMALc6O6kkAwY8bqAIjLkyYUD3ujeoxM2qnLfjiH1znDDh8T42QbRyT5V74eJGBcvaB0hAkBZCXhuOwwsehDI1D9kq9YxcQZEhDFNUh7OPkoScZIUjODsaZVzY0Tgej7Tc7vvpPCNoQhFtdyShO2Isrj5bhznwIChJ3oenOBtyGJxWiQsOMAQU/puHmP2zYczcLDRMxJM5K0DZWEItkvA1lMfRmA3Hz1wBUdBjgarHgUzc7FvH13YWDm1wnWcCLBGglAirH2P1xEwkgeNbFSRNqJo24SGIuT%2blx7b2OZKhR%2bkKOhHwPuFg88NfPVJzszNIcIfzpqfGXyBAqkKZHteOtUZwTOSC2waUyo7QbuKgisETLmSLCF7F7/ehhCyo6zWh8noiWjHP44uvVqH9DD%2b88g%2ba7m9H43ogWArr9PpISXyWl%2bZ3369nxBIIWBASygj90P4K2CEfr%2b3DUjgfAO8EGJ0UcXHXRXMNJgK/UFBLgwQyQ0wZaEqChCtQkQU0S1KieVJMENWqmtLgkakKHy5MGXHunR/O/dDg/rEbaRRk0MTJ8tFSFv33Gt0l3AzxoDy%2btgwgxAv%2bRFwK0GLIWu2lpAQaa9zJ4WlLgouGrqWIFFsoj8SltEhQTiYbd%2bbj2IgaNI8G4kpmDlo5E3PynFTfehlDmawh6OWpG1Qy6VJ5bTdA%2brFCH72mppjmSMB%2bO6%2b9sCN1qg7MqGXKfJMiMK%2bCuj6cF/P8gQEUCNB9UoEDluJwkKHB%2bQkkVCAI0VIGGBOgkFdRO61A7ZUAtlXGVtmj5lxENb3XI/lKOgM3cOdw98Ke/emKRs47dNlMRQhWBUlgKayx05qC1xFPKDC8OQ14%2bKyH3TYTevh5K37VwNcVhV2U46kp2oXmMgKZDcPn4TrSMhuLGL4EEHsQiET8H4Oq0kd2NpfzjJLk7Qo/g58Ok7t/6lx1Jef5wUiZB4bsSHsZEgk%2bAuy5O2tFkKn8SMKxBxYggQPfBBmoHAeMqqkD1QQVakuBQwWUBftqAK9N6lglXaJN6erKFgdnyTyNOvlQjPlcJN18t/kJFfLJYyx8zkAShiiAs5fGnS2WOENVHw0WbREkmwsO0lvNEPPZdt%2bKr32PR8mAbbrCLrawbT1LROstwfCcIED4P%2bCD3IFxk88RW1/I2Wuq4AN84E8HhJxRplb5YqlnBzifD3ZAgdd/DwEFKu5zDkmMrX3CaMq4Y0X5QgU7Kgapx3QcVkIAJjcMGEgF6EqCTVCDA17EDdQRfP2NB/bQfBww/NL8PxK3fgylPX2yrMcKw3ISPnA346ydqOHuauAvoOYG5S8Q4c/fwjo9CwqEQHGqOwNkOG39Lhbpx%2bnw%2bgcMLAb8LxYN/rMOtdzEEGfIh4cOkjt/gtfpJO65MiPsiCD6SoReOOwzUQzf94WYiaBNl770Cnt7JcNNR%2bto4EhCHpR7i/5kWLPh8WAVhA0GCQwWCBAMJMH5QAa0wKUjQ/T8rUHqi%2b9Nmgg9gKttYgbjKgLo6E0wibLjOLt36jcMH19x7ZgSl6rFQYYCT3gXWNQuRXqlA2RM/yjgQd/4djC9/Y9d%2bjaZ3Q3BtnNvXZBi/x5cvLt5ongzFrbm4//W41G2S0czvFt2vHvEhWSEsO20SgeM/cEDzDSf4Vex%2bCrvvkL7MtJJrIlzUsXwV9uZbqgn/A7%2bZVphGWaelAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"content":"<h2 id=\"overview\"><a href=\"#overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Overview</strong></h2>\n<p>So as a warning this tutorial is going to be lengthy but in depth. There will be a table of contents after this so if you want to skip the setup or skip to a certain section then you are more than welcome to do so. We will cover setting up a patrolling AI character with waypoints and then we'll get into detecting the player.</p>\n<p>Also make sure to check out the <a href=\"https://github.com/robertcorponoi/unreal-cpp-patrol-ai-with-hearing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> for everything that was talked about in this tutorial plus more.</p>\n<p>Also also note that while all of the scripts will call <code>Tick</code> to make them consistent, we are going to do all this without writing any code in <code>Tick</code> so you can feel free to disable this in some components using <code>PrimaryActorTick.bCanEverTick = false;</code> in whatever script you want to disable it in.</p>\n<p>Last note will be that some of the assets are set up as C++ scripts but later we create Blueprints off of them. These assets (PlayerCharacter, PatrolCharacter, etc) have Blueprints just for the sake of the tutorial (easier to position the mesh, etc) but they can easily be ditched and converted to C++ as the Blueprints are maily used for positioning components and more easily adjusting test variable values.</p>\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Table Of Contents</strong></h2>\n<ul>\n<li><a href=\"#getting-started\">Getting Started</a></li>\n<li><a href=\"#player-character\">Player Character</a></li>\n<li><a href=\"#waypoints\">Waypoints</a></li>\n<li><a href=\"#patrol-character\">Patrol Character</a></li>\n<li><a href=\"#back-to-waypoints\">Back To Waypoints</a></li>\n<li><a href=\"#patrol-ai-controller\">Patrol AI Controller</a></li>\n<li><a href=\"#making-the-player-emit-sound\">Making the Player Emit Sound</a></li>\n<li><a href=\"#testing-the-hearing-sense\">Testing the Hearing Sense</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n<h2 id=\"getting-started\"><a href=\"#getting-started\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Getting Started</strong></h2>\n<p>To get started, let's see what we're going to need:</p>\n<ul>\n<li><strong>Player Character</strong> - The PlayerCharacter is going to be the main player and what the PatrolCharacter is going to interact with. We won't really cover the PlayerCharacter in here because it's just some basic moving and crouching which you can find in other tutorials but if you want to copy what I'm using then you're more than welcome to do so from the <a href=\"https://github.com/robertcorponoi/unreal-cpp-patrol-ai-with-hearing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a>.</li>\n<li><strong>Waypoint</strong> - Waypoints are going to be basic Actors that are going to be used as triggers to tell the PatrolCharacter where the patrol zones are.</li>\n<li><strong>Patrol Character</strong> - The PatrolCharacter is going to hold variables for different movement speeds and is going to keep track of the Waypoints it needs to patrol.</li>\n<li><strong>Patrol AI Controller</strong> - This is going to be the PatrolCharacter's AIController and is going to define how the PatrolCharacter responds to the PlayerCharacter through a hearing sense.</li>\n</ul>\n<h2 id=\"player-character\"><a href=\"#player-character\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Player Character</strong></h2>\n<p>As we talked about in the <a href=\"#getting-started\">Getting Started</a> section, the PlayerCharacter is really just a basic Character instance with some movement methods defined. Feel free to check out the one used in this tutorial in the <a href=\"https://github.com/robertcorponoi/unreal-cpp-patrol-ai-with-hearing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a>.</p>\n<h2 id=\"waypoints\"><a href=\"#waypoints\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Waypoints</strong></h2>\n<p>Let's start this off by creating the Waypoints that the PatrolCharacter will patrol between. Before we get into the code, let's see what we need the Waypoints to do:</p>\n<ul>\n<li>We need to give the Waypoint a <code>UBoxComponent</code> so that we can create a trigger for when the PatrolCharacter reaches the Waypoint.</li>\n</ul>\n<p>That's about it for Waypoints. As mentioned before the Waypoints are just for the trigger so go ahead and create a new C++ script with a base parent of <code>Actor</code> and name it <code>Waypoint</code>.</p>\n<p><strong>Waypoint.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Actor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Waypoint.generated.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">APatrolCharacter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Waypoints define the areas that PatrolCharacters patrol and they also update\n * the next waypoint for the PatrolCharacter to go to once the PatrolCharacter\n * has reached a waypoint.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PATROLAITUTORIAL_API</span> AWaypoint <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AActor\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Sets default values for this actor's properties.</span>\n\t<span class=\"token function\">AWaypoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The BoxComponent of this Waypoint which is used as a collision trigger to</span>\n\t<span class=\"token comment\">// know when the PatrolCharacter has entered it.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UBoxComponent</span><span class=\"token operator\">*</span> BoxComponent<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called when another component triggers this Waypoints collision and it</span>\n\t<span class=\"token comment\">// lets us handle the PatrolCharacter arriving to this Waypoint.</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">OnWaypointBeginOverlap</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Called when the game starts or when spawned.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Called every frame.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Waypoint.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Waypoint.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/BoxComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets the default values for the Waypoint. In our case it sets up the BoxComponent\n * and sets it to be a collision trigger.\n */</span>\nAWaypoint<span class=\"token operator\">::</span><span class=\"token function\">AWaypoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n \t<span class=\"token comment\">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>\n\tPrimaryActorTick<span class=\"token punctuation\">.</span>bCanEverTick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the BoxComponent, set it to be a collision trigger, define the method</span>\n\t<span class=\"token comment\">// to call when an actor enters the collision zone, and add it to the RootComponent.</span>\n\tBoxComponent <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UBoxComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Box Component\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxComponent<span class=\"token operator\">-></span><span class=\"token function\">SetGenerateOverlapEvents</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxComponent<span class=\"token operator\">-></span><span class=\"token function\">SetCollisionProfileName</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Trigger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxComponent<span class=\"token operator\">-></span>OnComponentBeginOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AWaypoint<span class=\"token operator\">::</span>OnWaypointBeginOverlap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxComponent<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>RootComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the game starts or when spawned\n */</span>\n<span class=\"token keyword\">void</span> AWaypoint<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called every frame.\n *\n * @param DeltaTime The time between the previous Tick and the current one.\n */</span>\n<span class=\"token keyword\">void</span> AWaypoint<span class=\"token operator\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>DeltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * When a component first enters the BoxCollider's collision area we try to\n * cast it to our PatrolCharacter and then set a timer so that the PatrolCharacter\n * can run its looking animation. Lastly we set the PatrolCharacter to move on to\n * the next Waypoint.\n *\n * @param OverlappedComp\n * @param OtherActor\n * @param OtherComp\n * @param OtherBodyIndex\n * @param bFromSweep\n * @param SweepResult\n */</span>\n<span class=\"token keyword\">void</span> AWaypoint<span class=\"token operator\">::</span><span class=\"token function\">OnWaypointBeginOverlap</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return if anything is null so we can avoid a potential crash.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherComp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>As you can see all we did was add a <code>UBoxComponent</code> and make it a trigger and se the <code>OnWaypointBeginOverlap</code> so we can do something when an Actor enters the trigger area. We'll add the functionality for this after we define the PatrolCharacter.</p>\n<p>At this point I created a Blueprint based off of this class so I could adjust the extents of the <code>UBoxComponent</code> and see it visually but you can easily do this in the constructor of the Waypoint if you wish.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 467 96' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-fbb71fc93452af0ffcc490a5ed665f89'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-fbb71fc93452af0ffcc490a5ed665f89)' width='467' height='96' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAANCAYAAAAZr2hsAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAD2klEQVRIx71V10qjQRTO49iNRqPRWGJZO1iS2LtmrehDiGD2UhTsCBYEEVdRBMuNotgvrFgfQEXwBb7Nd3Yn/Ptji%2bt68TEzZ87MnPOdMobg4GCEh4cjLCwMISEhCAoKkpFygnLu%2bwqeMxqNHzr7lTDQWYKL7OxsOJ1OJCUlISUlBcnJySLnfmhoqM8ggR8595UwBAQEID4%2bHrW1taiurkZLSwva29vR0dGB1tZWWCwWIYDR9AWKAGaCL%2bBZX/U/eoYwqBIwmUwioLNUes5xX9llOfn7%2b4Mkc1TgWg8lpz3vPePn54fAwEDvOwRlb73DN4zGPxnAhdlsRkxMDKKiomSuRi0oi42NfTd4H0ksLCyEw%2bFAcXGxoKioCHa7HQUFBX%2bBe/n5%2bVJ2SqekpETmvEOvT5SWliIrKwvp6emix/KlTM31%2bg6HU95hiZvNFrFTSoD1npubK0oVFRXIy8vzGsXLFFgq70FiYqIQVl5ejrm5OWxvb2N6ehozMzOyPjg4wMnJCY6Pj3F0dISzszMsLCxgamoKfX19WFxcxM7ODsbGxkSfa%2brqwfsmJiYwNDSE9fV1rK2tYWRkBPPz81hdXZV7eT91T09PsbGxjtnZn%2bjs7EC%2b3eQhIh4GphANTktLE6fr6uqEBM7ZE%2bhETU2NkBEXFycOcnwNCQkJiIyMRGVlJVZWVsQIOkLDlpeXcX5%2bjpubG1xfX8t4dXXlMWwWW1tb4gydJ0GTk5PiPJ25vLz0gmf29/e9jg4MDGBvbw%2bbm5sYHx/H0tKSx9kN0bu4uBDc3t4Kybu7u3C7f%2bBbuhE2m/V3CURHR4vhTFvOmbqcM/U5VzKtk4oIffSVzGq1Ckgg05KklpWVCVRaa0E9ks5srKqqEvIaGhrgcrlQX18vwdCCQWlsbPSmOvUYPJ6hPuf6M5S5XN%2bRmZnp8ccqdhrYQOgco8baYDaoOb9Fjgo8wD2to89lAOW8MycnB93d3YLe3l5JT0Z4eHhY5mpU8tHRUYlmV1eXvM1mrO1LWlDGLOM7hOpVlGn7lv4MwdpXtnsJ4ILNiky2tbVJE2JU%2bBUSzc3NIuc3SR0S8VwGqB4QEREhekxFpirr/unpCXd3d7i/v/fi4eFBRsofHx%2blVA4PD9HU1CTG2mw2eeszobVVCFAlwE0%2bSAe4Zgpzrgd1XusBKgPYofv7%2bwWMLKM8ODgoUHNmBvfVuqenRzKD2cM73tNz/gVCAFNCpb/WSUXGSyS8BUWE%2bhL1oJz9IDU1VVKUa9rCgKhg/G8IAXwsIyNDfoLPBP9n3vsSuO92u6XpsfmxOWn3Ptue5/ALTy5I0ifrnsYAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"467\" alt=\"Box Extents\" data-srcset=\"/assets/static/box-extents.ada1d13.ee444c8ad32f023134d4e1073fca0c8a.png 467w\" data-sizes=\"(max-width: 467px) 100vw, 467px\" data-src=\"/assets/static/box-extents.ada1d13.ee444c8ad32f023134d4e1073fca0c8a.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/box-extents.ada1d13.ee444c8ad32f023134d4e1073fca0c8a.png\" width=\"467\" alt=\"Box Extents\"></noscript></p>\n<p>Make sure this compiles and then let's move on to the PatrolCharacter.</p>\n<h2 id=\"patrol-character\"><a href=\"#patrol-character\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Patrol Character</strong></h2>\n<p>Now we need to create the PatrolCharacter. It's going to be fairly simple as movement is going to be handled by the AIController but the PatrolCharacter does need to have a mini state machine.</p>\n<p>Again, before we get into the code, let's see what we need the PatrolCharacter to do:</p>\n<ul>\n<li>We need to be able to switch between two states: Patrol and Chase.</li>\n<li>We need to hold a reference to the array of Waypoints that this PatrolCharacter needs to patrol.</li>\n<li>We want some variables that hold some customizable properties like walk speeds, delays, etc.</li>\n</ul>\n<p>Let's create a new C++ script that has a base parent of Character and name it PatrolCharacter.</p>\n<p><strong>PatrolCharacter.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Character.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PatrolCharacter.generated.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AWaypoint</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * The modes that the PatrolCharacter can be in. \n * PATROL - The PatrolCharacter is patrolling between Waypoints.\n * CHASE - The PatrolCharacter is chasing the PlayerCharacter.\n */</span>\n<span class=\"token function\">UENUM</span><span class=\"token punctuation\">(</span>BlueprintType<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">class</span> PatrolMode <span class=\"token operator\">:</span> uint8\n<span class=\"token punctuation\">{</span>\n\tPATROL <span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"PATROL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tCHASE <span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"CHASE\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * A Character that patrols around a set of Waypoints and keeps\n * an eye out for the PlayerCharacter.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PATROLAITUTORIAL_API</span> APatrolCharacter <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ACharacter\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Sets default values for this character's properties.</span>\n\t<span class=\"token function\">APatrolCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// We start the game assuming we can't see the player and so we</span>\n\t<span class=\"token comment\">// are in Patrol mode.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\tPatrolMode Mode <span class=\"token operator\">=</span> PatrolMode<span class=\"token operator\">::</span>PATROL<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The speed at which the PatrolCharacter walks between Waypoints.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> PatrolSpeed <span class=\"token operator\">=</span> <span class=\"token number\">100.0f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The speed at which the PatrolCharacter chases the PlayerCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> ChaseSpeed <span class=\"token operator\">=</span> <span class=\"token number\">500.0f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The Waypoints that the should be patrolled.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\tTArray<span class=\"token operator\">&lt;</span>AWaypoint<span class=\"token operator\">*</span><span class=\"token operator\">></span> Waypoints<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The index of the Waypoint in `Waypoints` to go towards.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\tint32 CurrentWaypointIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The distance away the PatrolCharacter can be from the Waypoint before </span>\n\t<span class=\"token comment\">// it registers the PatrolCharacter as being arrived at the Waypoint.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> DistanceBeforeArrivedAtWaypoint <span class=\"token operator\">=</span> <span class=\"token number\">5.0f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The amount of time, in seconds, that the PatrolCharacter should wait</span>\n\t<span class=\"token comment\">// at a Waypoint before moving on to the next one.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> WaypointDelay <span class=\"token operator\">=</span> <span class=\"token number\">5.0f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The distance away the PatrolCharacter can be from the PlayerCharacter</span>\n\t<span class=\"token comment\">// before it stops chasing.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> DistanceBeforeArrivedAtPlayer <span class=\"token operator\">=</span> <span class=\"token number\">100.0f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Indicates whether this PatrolCharacter is currently at a Waypoint or</span>\n\t<span class=\"token comment\">// not. This is used by the animation Blueprint to decide if the Looking</span>\n\t<span class=\"token comment\">// or Walking animation should be played.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">bool</span> bIsAtWaypoint <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Called when the game starts or when spawned.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Called every frame.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called to bind functionality to input.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UInputComponent</span><span class=\"token operator\">*</span> PlayerInputComponent<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called to change the PatrolCharacter's settings to patrol mode.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetPatrolMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called to change the PatrolCharacter's settings to chase mode.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetChaseMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>PatrolCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PatrolCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/CharacterMovementComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets the default values for the PatrolCharacter. In our case we don't do much\n * here except set up rotation and orientation so that the PatrolCharacter faces\n * the direction they're walking.\n */</span>\nAPatrolCharacter<span class=\"token operator\">::</span><span class=\"token function\">APatrolCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n \t<span class=\"token comment\">// Set this character to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>\n\tPrimaryActorTick<span class=\"token punctuation\">.</span>bCanEverTick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Helps orient the PatrolCharacter so that when it walks it doesn't face the</span>\n\t<span class=\"token comment\">// Waypoint but instead the direction that it's walking.</span>\n\tbUseControllerRotationPitch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tbUseControllerRotationYaw <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tbUseControllerRotationRoll <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>bOrientRotationToMovement <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the default rotation rate and the max walking speed.</span>\n\t<span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>RotationRate <span class=\"token operator\">=</span> <span class=\"token function\">FRotator</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SetPatrolMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the game starts or when spawned\n */</span>\n<span class=\"token keyword\">void</span> APatrolCharacter<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called every frame.\n *\n * @param DeltaTime The time between the previous Tick and the current one.\n */</span>\n<span class=\"token keyword\">void</span> APatrolCharacter<span class=\"token operator\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>DeltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called to bind functionality to input.\n *\n * @param PlayerInputComponent An Actor component that enables us to bind axis events and action inputs to methods.\n */</span>\n<span class=\"token keyword\">void</span> APatrolCharacter<span class=\"token operator\">::</span><span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span>UInputComponent<span class=\"token operator\">*</span> PlayerInputComponent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span>PlayerInputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Used by the `PatrolAIController` to set the properties of the PatrolCharacter to\n * the values they should be when the PatrolCharacter is patrolling Waypoints.\n */</span>\n<span class=\"token keyword\">void</span> APatrolCharacter<span class=\"token operator\">::</span><span class=\"token function\">SetPatrolMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>MaxWalkSpeed <span class=\"token operator\">=</span> PatrolSpeed<span class=\"token punctuation\">;</span>\n\tMode <span class=\"token operator\">=</span> PatrolMode<span class=\"token operator\">::</span>PATROL<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Used by the `PatrolAIController` to set the properties of the PatrolCharacter to\n * the values they should be when the PatrolCharacter is chasing the PlayerCharacter.\n */</span>\n<span class=\"token keyword\">void</span> APatrolCharacter<span class=\"token operator\">::</span><span class=\"token function\">SetChaseMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Set this to false so that the looking animation doesn't play while chasing</span>\n\t<span class=\"token comment\">// the PlayerCharacter.</span>\n\tbIsAtWaypoint <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetCharacterMovement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>MaxWalkSpeed <span class=\"token operator\">=</span> ChaseSpeed<span class=\"token punctuation\">;</span>\n\tMode <span class=\"token operator\">=</span> PatrolMode<span class=\"token operator\">::</span>CHASE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>So the code is mostly self-documenting but let's look into it a bit. In the header we:</p>\n<ul>\n<li>Create an enum for our mini state machine with our two states: Patrol and Chase.</li>\n<li>We need have a variable that lets us keep track of our current mode.</li>\n<li>Below that we have a couple variables that define the speed that the PatrolCharacter should walk at in each mode.</li>\n<li>Then we define an array of Waypoints that holds the Waypoints that should be patrolled between. Below that we have a variable that keeps track of what Waypoint in the array that we are currently moving towards.</li>\n<li>Below those are some variables that let you define how far away you can be from the Waypoint or PlayerCharacter before the AIController says that the move is complete. This let's you get closer or further to the PlayerCharacter or Waypoint depending on the values you provide.</li>\n<li>The two functions we have at the bottom let us switch between the two modes available.</li>\n</ul>\n<p>In the cpp file we:</p>\n<ul>\n<li>Set the controller rotation values to false so that the PatrolCharacter faces the direction they're going. Otherwise it would always face the direction of the Waypoint which is weird.</li>\n<li>We also have the functions that switch between modes. You're free to add anything else you want to these methods to differentiate how the PatrolCharacter acts in each mode but make sure that you leave the last line in each since that switches the <code>Mode</code> variable.</li>\n</ul>\n<p>At this point I created a Blueprint based off of this class so I could visually set the mesh and later the Waypoints. Again this is just for convenience and you can easily hardcode it all.</p>\n<p>Save and compile and lets move on to the AIController.</p>\n<h2 id=\"back-to-waypoints\"><a href=\"#back-to-waypoints\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Back to Waypoints</strong></h2>\n<p>Actually now that we've defined the PatrolCharacter, we can finish up the Waypoint script.</p>\n<p>In our cpp script we need to add the following includes:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PatrolCharacter.h\"</span></span></code></pre>\n<p>and then in the <code>OnWaypointBeginOverlap</code> we need to see if the Actor that triggered this is a PatrolCharacter and if it is then we set the PatrolCharacter's  <code>bIsAtWaypoint</code> variable to <code>true</code>.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> AWaypoint<span class=\"token operator\">::</span><span class=\"token function\">OnWaypointBeginOverlap</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return if anything is null so we can avoid a potential crash.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherComp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Try to cast the `OtherActor` to our PatrolCharacter because we only</span>\n\t<span class=\"token comment\">// want to work with the PatrolCharacter.</span>\n\tAPatrolCharacter<span class=\"token operator\">*</span> PatrolCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>APatrolCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OtherActor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PatrolCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the PatrolCharacter to be at the Waypoint so that it can play its looking around animation and then</span>\n\t<span class=\"token comment\">// call the `AfterWaypointTimer` method when the timer is finished.</span>\n\tPatrolCharacter<span class=\"token operator\">-></span>bIsAtWaypoint <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ok now save and compile this and now lets actually get into the AIController.</p>\n<h2 id=\"patrol-ai-controller\"><a href=\"#patrol-ai-controller\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Patrol AI Controller</strong></h2>\n<p>Now it's time for the fun part, making the AIController that'll respond to hearing the player.</p>\n<p>Before we get into the code lets see what the AIController with hearing sense is going to need to be able to do:</p>\n<ul>\n<li>Define a radius and max age for the hearing sense. This relates to how far away the PatrolCharacter can hear sounds and after a sound is heard how long until the PatrolCharacter forgets about it.</li>\n<li>Always move the PatrolCharacter to the next Waypoint unless the PlayerCharacter is detected and in that case we move towards the PlayerCharacter for as long as we can hear them.</li>\n</ul>\n<p>This is a pretty big simplification of it but let's get into the code as it's easier when you see it. Create a new C++ script with a base parent of <code>AIController</code> named PatrolAIController and lets get into it.</p>\n<p><strong>PatrolAIController.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"AIController.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Perception/AIPerceptionTypes.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PatrolAIController.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Configures the senses of the PatrolCharacter and responds to sensing the PlayerCharacter\n * set as the target in the PatrolCharacter instance.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PATROLAITUTORIAL_API</span> APatrolAIController <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AAIController\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Sets default values for this AI Controller's properties.</span>\n\t<span class=\"token function\">APatrolAIController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called when the game starts or when spawned.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called when the AIController is taken over.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>APawn<span class=\"token operator\">*</span> Pawn<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called every frame.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaSeconds<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called to get the control's rotation.</span>\n\t<span class=\"token keyword\">virtual</span> FRotator <span class=\"token function\">GetControlRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called when a move request has been completed. This can be</span>\n\t<span class=\"token comment\">// a move request to a Waypoint or to the PlayerCharacter.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>FAIRequestID RequestID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FPathFollowingResult<span class=\"token operator\">&amp;</span> Result<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Gets called when the perception component updates. This is</span>\n\t<span class=\"token comment\">// where check to see if the PlayerCharacter was detected.</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">OnPawnDetected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TArray<span class=\"token operator\">&lt;</span>AActor<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> DetectedPawns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Moves the PatrolCharacter to the next Waypoint.</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">MoveToWaypoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The TimerHandle used to delay the setting of the waypoint giving the</span>\n\t<span class=\"token comment\">// PatrolCharacter time to perform a looking animation.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tFTimerHandle TimerHandle<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The position to move to. This can be different than the PlayerCharacter's</span>\n\t<span class=\"token comment\">// position if a distraction was used.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\tFVector PositionToMoveTo<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">APatrolCharacter</span><span class=\"token operator\">*</span> PatrolCharacter<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// A reference to the hearing perception component.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> AI<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UAISenseConfig_Hearing</span><span class=\"token operator\">*</span> HearingConfig<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The range at which the PatrolCharacter can hear the PlayerCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> AI<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> AIHearingRange <span class=\"token operator\">=</span> <span class=\"token number\">1000.0f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The amount of time after the PlayerCharacter has been heard that the</span>\n\t<span class=\"token comment\">// PatrolCharacter will forget they heard the PlayerCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> AI<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> AIHearingMaxAge <span class=\"token operator\">=</span> <span class=\"token number\">5.0f</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Indicates whether the PatrolCharacter will be able to listen at the</span>\n\t<span class=\"token comment\">// start of the game or whether it will be enabled later manually.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> AI<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">bool</span> bAIHearingStartsEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Indicates whether the PatrolCharacter has seen the PlayerCharacter or not.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> AI<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">bool</span> bIsPlayerDetected <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If the PatrolCharacter has seen the PlayerCharacter then this is populated with how</span>\n\t<span class=\"token comment\">// far away the PlayerCharacter is from the PatrolCharacter.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> AI<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">float</span> DistanceToPlayer <span class=\"token operator\">=</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Let's go over this before we get into the cpp file:</p>\n<ul>\n<li>We have to add the <code>#include \"Perception/AIPerceptionTypes.h\"</code> as it's a struct and we can't forward declare that like we can with classes.</li>\n<li>We override the virtual methods provided with the <code>AIController</code> with the most important one being <code>OnPawnDetected</code> which will let us know when the PlayerCharacter has been sensed.</li>\n<li>We have a <code>FTimerHandle</code> because we're going to need to set a timer in between Waypoints to give the PatrolCharacter time to \"look around\". In the <a href=\"https://github.com/robertcorponoi/unreal-cpp-patrol-ai-with-hearing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> you can see that this is where I play the \"Looking Around\" animation for the PatrolCharacter.</li>\n<li>We need a reference to the PatrolCharacter so we can easily issue commands.</li>\n<li>We set up the <code>UAISenseConfig_Hearing</code> and it's default settings, the range and age which we talked about previously.</li>\n<li>We have a few helper variables such as <code>PositionToMoveTo</code> and <code>bIsPlayerDetected</code>.</li>\n</ul>\n<p>Ok hopefully that's a bit more clear so let's move on to the cpp file:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PatrolAIController.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Waypoint.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PatrolCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PlayerCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Tasks/AITask_MoveTo.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Kismet/GameplayStatics.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Kismet/KismetMathLibrary.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Perception/AISenseConfig_Hearing.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Perception/AIPerceptionComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Navigation/PathFollowingComponent.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets the default values for the PatrolAIController. In our case we create the necessary\n * perception components and setup the dominant sense.\n */</span>\nAPatrolAIController<span class=\"token operator\">::</span><span class=\"token function\">APatrolAIController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// We need this AIController to run its Tick method.</span>\n\tPrimaryActorTick<span class=\"token punctuation\">.</span>bCanEverTick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the hearing sense, and a AIPerceptionComponent and </span>\n\t<span class=\"token comment\">// set it as the default perception component of the AIController.</span>\n\tHearingConfig <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UAISenseConfig_Hearing<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hearing Config\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SetPerceptionComponent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UAIPerceptionComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Perception Component\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tHearingConfig<span class=\"token operator\">-></span>HearingRange <span class=\"token operator\">=</span> AIHearingRange<span class=\"token punctuation\">;</span>\n\tHearingConfig<span class=\"token operator\">-></span>LoSHearingRange <span class=\"token operator\">=</span> AIHearingRange<span class=\"token punctuation\">;</span>\n\tHearingConfig<span class=\"token operator\">-></span><span class=\"token function\">SetMaxAge</span><span class=\"token punctuation\">(</span>AIHearingMaxAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the hearing sense to detect everything. This should be changed to fit your needs</span>\n\t<span class=\"token comment\">// but it makes it easiest for the tutorial.</span>\n\tHearingConfig<span class=\"token operator\">-></span>DetectionByAffiliation<span class=\"token punctuation\">.</span>bDetectEnemies <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tHearingConfig<span class=\"token operator\">-></span>DetectionByAffiliation<span class=\"token punctuation\">.</span>bDetectFriendlies <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tHearingConfig<span class=\"token operator\">-></span>DetectionByAffiliation<span class=\"token punctuation\">.</span>bDetectNeutrals <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set hearing as the dominant sense.</span>\n\t<span class=\"token function\">GetPerceptionComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">SetDominantSense</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>HearingConfig<span class=\"token operator\">-></span><span class=\"token function\">GetSenseImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetPerceptionComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">ConfigureSense</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>HearingConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the game starts or when spawned\n */</span>\n<span class=\"token keyword\">void</span> APatrolAIController<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the method to respond when the perception component updates.</span>\n\t<span class=\"token function\">GetPerceptionComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>OnPerceptionUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APatrolAIController<span class=\"token operator\">::</span>OnPawnDetected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the reference to the PatrolCharacter.</span>\n\tPatrolCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>APatrolCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">GetPawn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the Waypoint index to the last Waypoint because the `MoveToWaypoint` method</span>\n\t<span class=\"token comment\">// of the PatrolAIController will increment by 1 on the first update so by setting</span>\n\t<span class=\"token comment\">// it to the last index we end up at the first.</span>\n\tPatrolCharacter<span class=\"token operator\">-></span>CurrentWaypointIndex <span class=\"token operator\">=</span> PatrolCharacter<span class=\"token operator\">-></span>Waypoints<span class=\"token punctuation\">.</span><span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Tell the PatrolCharacter to start moving to a Waypoint.</span>\n\t<span class=\"token function\">MoveToWaypoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the AIController is taken over.\n *\n * @param PatrolPawn The pawn that was taken over.\n */</span>\n<span class=\"token keyword\">void</span> APatrolAIController<span class=\"token operator\">::</span><span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>APawn<span class=\"token operator\">*</span> PatrolPawn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">OnPossess</span><span class=\"token punctuation\">(</span>PatrolPawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called every frame.\n *\n * @param DeltaTime The time between the previous Tick and the current one.\n */</span>\n<span class=\"token keyword\">void</span> APatrolAIController<span class=\"token operator\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaSeconds<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>DeltaSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Returns a zero rotator if GetPawn is null and the Actor rotation yaw\n * otherwise.\n */</span>\nFRotator APatrolAIController<span class=\"token operator\">::</span><span class=\"token function\">GetControlRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetPawn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">FRotator</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">FRotator</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetPawn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetActorRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Yaw<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * When the PatrolCharacter's perception detects a Pawn we check to see if\n * it is the PlayerCharacter and update the `bIsPlayerDetected` variable accordingly.\n *\n * @param DetectedPawns - The Pawns that the AIController has detected in its radius.\n */</span>\n<span class=\"token keyword\">void</span> APatrolAIController<span class=\"token operator\">::</span><span class=\"token function\">OnPawnDetected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TArray<span class=\"token operator\">&lt;</span>AActor<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> DetectedPawns<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Since `DetectedPawns` is an array of pawns that have been detected we</span>\n\t<span class=\"token comment\">// need to loop through and see if any of those are our PlayerController.</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>AActor<span class=\"token operator\">*</span> DetectedPawn <span class=\"token operator\">:</span> DetectedPawns<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Get the data from the latest hearing sensed.</span>\n\t\t<span class=\"token comment\">// FAISenseID HearingSenseID = UAISense::GetSenseID&lt;UAISense_Hearing>();</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>HearingConfig<span class=\"token operator\">-></span><span class=\"token function\">GetSenseID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> FActorPerceptionInfo<span class=\"token operator\">*</span> HeardPerceptionInfo <span class=\"token operator\">=</span> <span class=\"token function\">GetPerceptionComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetFreshestTrace</span><span class=\"token punctuation\">(</span>HearingConfig<span class=\"token operator\">-></span><span class=\"token function\">GetSenseID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// If the sense isn't active anymore then we return early. This happens when</span>\n\t\t<span class=\"token comment\">// the max age is hit for a heard event.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>HeardPerceptionInfo<span class=\"token operator\">-></span><span class=\"token function\">IsSenseActive</span><span class=\"token punctuation\">(</span>HearingConfig<span class=\"token operator\">-></span><span class=\"token function\">GetSenseID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// The hearing sense has been lost so we return the PatrolCharacter back</span>\n\t\t\t<span class=\"token comment\">// to patrolling Waypoints.</span>\n\t\t\t<span class=\"token function\">MoveToWaypoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Attempt to cast the current Pawn to our PlayerCharacter and return early</span>\n\t\t<span class=\"token comment\">// if it's not since we only care about the PlayerCharacter.</span>\n\t\tAPlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>APlayerCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>DetectedPawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PlayerCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">// At this point we can safely assume that the PlayerCharacter has been detected</span>\n\t\t<span class=\"token comment\">// and we can get the distance away they are from the PatrolCharacter.</span>\n\t\tbIsPlayerDetected <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\tDistanceToPlayer <span class=\"token operator\">=</span> <span class=\"token function\">GetPawn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetDistanceTo</span><span class=\"token punctuation\">(</span>PlayerCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Instead of just moving towards the PlayerCharacter we want to get the position that</span>\n\t\t<span class=\"token comment\">// the hearing event happened at. This is helpful if you're implementing a distraction</span>\n\t\t<span class=\"token comment\">// hearing event and don't want to create another Actor just for a distraction.</span>\n\t\tPositionToMoveTo <span class=\"token operator\">=</span> HeardPerceptionInfo<span class=\"token operator\">-></span><span class=\"token function\">GetStimulusLocation</span><span class=\"token punctuation\">(</span>HearingConfig<span class=\"token operator\">-></span><span class=\"token function\">GetSenseID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tPatrolCharacter<span class=\"token operator\">-></span><span class=\"token function\">SetChaseMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Finally we move to the location found above. If the location keeps moving, like if</span>\n\t\t<span class=\"token comment\">// the sound is the PlayerCharacter's footsteps, then this will keep moving to the new</span>\n\t\t<span class=\"token comment\">// location.</span>\n\t\t<span class=\"token function\">MoveToLocation</span><span class=\"token punctuation\">(</span>PositionToMoveTo<span class=\"token punctuation\">,</span> PatrolCharacter<span class=\"token operator\">-></span>DistanceBeforeArrivedAtPlayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// DEBUG</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GEngine<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tGEngine<span class=\"token operator\">-></span><span class=\"token function\">AddOnScreenDebugMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> FColor<span class=\"token operator\">::</span>Green<span class=\"token punctuation\">,</span> FString<span class=\"token operator\">::</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Investigating Sound At Location: %s For %f seconds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PositionToMoveTo<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> AIHearingMaxAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * When a `MoveToLocation` or `MoveToActor` action has completed this method is fired\n * and we either move to another Waypoint or we chase the PlayerCharacter.\n *\n * @param RequestID The Move Request ID for the move that was completed.\n * @param Result\n */</span>\n<span class=\"token keyword\">void</span> APatrolAIController<span class=\"token operator\">::</span><span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>FAIRequestID RequestID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FPathFollowingResult<span class=\"token operator\">&amp;</span> Result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">OnMoveCompleted</span><span class=\"token punctuation\">(</span>RequestID<span class=\"token punctuation\">,</span> Result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PatrolCharacter<span class=\"token operator\">-></span>Mode <span class=\"token operator\">==</span> PatrolMode<span class=\"token operator\">::</span>PATROL<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// DEBUG</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GEngine<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tGEngine<span class=\"token operator\">-></span><span class=\"token function\">AddOnScreenDebugMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> FColor<span class=\"token operator\">::</span>Green<span class=\"token punctuation\">,</span> FString<span class=\"token operator\">::</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Patrol At Waypoint: %s For %f seconds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token function\">GetNameSafe</span><span class=\"token punctuation\">(</span>PatrolCharacter<span class=\"token operator\">-></span>Waypoints<span class=\"token punctuation\">[</span>PatrolCharacter<span class=\"token operator\">-></span>CurrentWaypointIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PatrolCharacter<span class=\"token operator\">-></span>WaypointDelay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// The PatrolCharacter is in Patrol mode so we wait at the current Waypoint</span>\n\t\t<span class=\"token comment\">// for 5 seconds and then we call `MoveToWaypoint` to move to the next Waypoint.</span>\n\t\t<span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span>TimerHandle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APatrolAIController<span class=\"token operator\">::</span>MoveToWaypoint<span class=\"token punctuation\">,</span> PatrolCharacter<span class=\"token operator\">-></span>WaypointDelay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Moves the PatrolCharacter to the next Waypoint on its list.\n */</span>\n<span class=\"token keyword\">void</span> APatrolAIController<span class=\"token operator\">::</span><span class=\"token function\">MoveToWaypoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Check to see if the PatrolCharacter was in a chase previous to this being</span>\n\t<span class=\"token comment\">// called. If they were then change back to patrol mode and we don't increment</span>\n\t<span class=\"token comment\">// the Waypoint index because chances are they didn't make it to the Waypoint</span>\n\t<span class=\"token comment\">// before being interrupted so we don't want them to skip a Waypoint.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// If they were not in a chase then we increment the Waypoint index so they can</span>\n\t<span class=\"token comment\">// go to the next Waypoint.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PatrolCharacter<span class=\"token operator\">-></span>Mode <span class=\"token operator\">==</span> PatrolMode<span class=\"token operator\">::</span>CHASE<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Since the PatrolCharacter was previously chasing the PlayerCharacter we</span>\n\t\t<span class=\"token comment\">// can assume that they didn't make it to their Waypoint. To compensate for</span>\n\t\t<span class=\"token comment\">// this we set the Waypoint index back by 1.</span>\n\t\tPatrolCharacter<span class=\"token operator\">-></span><span class=\"token function\">SetPatrolMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PatrolCharacter<span class=\"token operator\">-></span>CurrentWaypointIndex <span class=\"token operator\">==</span> PatrolCharacter<span class=\"token operator\">-></span>Waypoints<span class=\"token punctuation\">.</span><span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// The PatrolCharacter is at the last Waypoint in the Waypoints array so we send</span>\n\t\t\t<span class=\"token comment\">// them back to the first Waypoint.</span>\n\t\t\tPatrolCharacter<span class=\"token operator\">-></span>CurrentWaypointIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// There's still more Waypoints the PatrolCharacter hasn't patrolled yet so we</span>\n\t\t\t<span class=\"token comment\">// send the PatrolCharacter to the next Waypoint in the Waypoints array.</span>\n\t\t\tPatrolCharacter<span class=\"token operator\">-></span>CurrentWaypointIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// The Waypoint exists, the PatrolCharacter is not currently waiting at a Waypoint,</span>\n\t<span class=\"token comment\">// and the PlayerCharacter has not been detected so we move towards a Waypoint.</span>\n\t<span class=\"token function\">MoveToActor</span><span class=\"token punctuation\">(</span>PatrolCharacter<span class=\"token operator\">-></span>Waypoints<span class=\"token punctuation\">[</span>PatrolCharacter<span class=\"token operator\">-></span>CurrentWaypointIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> PatrolCharacter<span class=\"token operator\">-></span>DistanceBeforeArrivedAtWaypoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// DEBUG</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GEngine<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tGEngine<span class=\"token operator\">-></span><span class=\"token function\">AddOnScreenDebugMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> FColor<span class=\"token operator\">::</span>Green<span class=\"token punctuation\">,</span> FString<span class=\"token operator\">::</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Patrol moving To Waypoint: %s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token function\">GetNameSafe</span><span class=\"token punctuation\">(</span>PatrolCharacter<span class=\"token operator\">-></span>Waypoints<span class=\"token punctuation\">[</span>PatrolCharacter<span class=\"token operator\">-></span>CurrentWaypointIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PatrolCharacter<span class=\"token operator\">-></span>CurrentWaypointIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tPatrolCharacter<span class=\"token operator\">-></span>bIsAtWaypoint <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ok that was quite a lot so lets break it down:</p>\n<ul>\n<li>In the constructor we create the hearsing sense, set it's settings from the <code>AIHearingRange</code> and <code>AIHearingMaxAge</code> variables and then set it so that it'll detect everyone. Lastly we set it as the dominant sense for the <code>AIController</code>.</li>\n<li>In <code>BeginPlay</code>, we set the method that responds to <code>OnPerceptionUpdated</code> which is our <code>OnPawnDetected</code> method. We then get the reference to the PatrolCharacter that the <code>AIController</code> is attached to and set the Waypoint index to the last Waypoint. We do this because when we call <code>MoveToWaypoint</code> right below it, it increments the Waypoint index by 1 and by default it would have the PatrolCharacter walk to the second Waypoint first. This way when it increments the Waypoint index it will go to the first Waypoint first.</li>\n<li>In <code>OnPawnDetected</code> is where all the magic happens. Since <code>DetectedPawns</code> is an array we need to loop through each element and get the hearing info. There's also a chance that the sense is inactive which means that the PlayerCharacter is no longer detected or the heard sound has reached its max age and expired. In this case we assume that the PatrolCharacter can no longer hear the PlayerCharacter and so we call <code>MoveToWaypoint</code> to make them patrol again. Otherwise if the sense is active we cast the detected pawn into our PlayerCharacter and set the PatrolCharacter to chase after the PlayerCharacter by continuously moving to the PlayerCharacter's latest noise location.</li>\n<li>The <code>OnMoveCompleted</code> method gets called every time a move command has finished. This means anytime that the PatrolCharacter has reached a Waypoint or has reached the location of the noise this method will be called. We don't really care about when the PatrolCharacter has reached the Player as that's always handled by <code>OnPawnDetected</code> but we do care about patrolling. If the PatrolCharacter has just finished moving to a Waypoint, which in the code we know by whether or not they're in Patrol mode, then we set a timer with a delay so that the PatrolCharacter can \"Look Around\". In the <a href=\"https://github.com/robertcorponoi/unreal-cpp-patrol-ai-with-hearing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> I use this time to perform a \"Looking Around\" animation.</li>\n</ul>\n<p>Next I created a Blueprint based off of this class so that I could easily mess around with the hearing radius and max age values which again you don't have to do but what you do have to do is assign this <code>AIController</code> to your PatrolCharacter.</p>\n<p>So in the PatrolCharacter Blueprint (or script) you have to change the Pawn settings so that:</p>\n<ul>\n<li><strong>Auto Possess AI</strong> - Placed in World or Spawned</li>\n<li><strong>AI Controller Class</strong> - PatrolAIController (Blueprint or script).</li>\n</ul>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 465 232' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-7bc9408785d0d170e1b8b176a604cb2f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-7bc9408785d0d170e1b8b176a604cb2f)' width='465' height='232' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAHL0lEQVRo3tWZWU8VSxDHz8cxiisg6zkgLuCCCyAqiLghiDuiAmqMuCBIjAsucY9K0ERRXFHU6JsJJia%2bmfDgNyn5lfkfh4k397KEzH2odHV1z0x31b%2bW7omlpqZabm6uZWdnO%2bXk5CRJsrFQZmbmuJ6fLIrNnDnTpk6daikpKTZjxgybMmWK07Rp07zP%2bFho%2bvTpY352MinGJpcuXWpbtmyx%2bvp627Fjh%2b3cudMqKystIyPDlTBr1qxRkxQwlmcnkxwB5eXltnDhQkskErZmzRpbtWqVLVq0yHCPsCX/hgpkYTmIkgKCc6JGsdmzZ/siaSEWrk2npaVZenq603/l1Z8zZ46/j3ehyLlz50aSYgSrZcuW2ZIlS2zFihXOFxcX28qVK52XjBY5PGPwEHJcSHLQs3z5cissLLRt27bZqVOnbO3atY4ovrF48eJIUSwrK8sZFt3Y2Gj79%2b/3eEAsaGhosL1793pMOHjwoB06dMjHkDFGv6mpyfbs2ePxo66uzscOHDjgMeTs2bP27ds327Vrl82bNy%2baCgABLKyoqMiVgBWxqKyLZZGLGGO%2b5tIKHbyDMVBATKmoqLDdu3dbSUmJI4DxqFEMf8U6BEByP4igLojH454n4YN1gcbCdQJ93sE4SuU9fIDNz58/38fy8vIiRzGCFhtikfjs5s2bPSts2LDBNm3aZFu3brWqqiqHN8QY83CF2tpa2759u23cuNHWrVvnGQQ5MpTS2tpqX758cRmK5oN8K0rkCsA6%2bfn5VlZW5htUQFy9erW3QJox%2bowBd/psGBk8MmBeWlpq69evdwSgoIsXL/o4fRTAt6JErgAWBnSVzoAwRRA8qUI8cxlTCtF8eOSQ5rFhUCCX4mNoPJIKgCEOkK7wWVkYHisT7ARxxghuWJ4%2bPAgBKTwPgpiL0sgcT58%2bTVaVkUUATEFBgfs7/s3mWTR9YgFUU1OTHAPi%2bDUxQXGD%2bSiDZ4gdoOLw4cP25s0bfz7SCpALKHoLumyCFmIDkE56komH5AbqA3kFvsi7AAslbZENQIOKI/rkdOVNxhYsWOAtfXjNIQiKR1FkBypBXIh%2b1DbvCiBoYRk2Asyp6vBhqj%2bqO6o4IE0q3Ldvn8Oe6E7FqD7ugAvwrKpBYgWb//r1q7sJyCDOkG3%2bjYKomTQX4IOyLovQBGRQkMfKVIhsCJ6Wd2iDzKEwompEMbgXBy4ORRySIB2cgqRxlDVZLjNCAUpxtLolUhpUalTVB3IUF1QdquXFPAdyjh8/bqdPn/ZzQXt7u3V0dHh74sSJEUTR1NbWZufOnXMkTpbLJGMAlgTKRHGiOZGb6K4sgD/jBmQBuYWqRSwetBYowJLXr1%2b33t5ee/LkiT179szu3Lljjx8/dvr%2b/bsNDQ3Zjx8/nH7%2b/Gn9/f1O9%2b7dc0QEkRimiULHiDoA3weyqvgIgihD%2bZ0W6ANtNk86RCE8G4z0IIr3njx50jdz%2bfJlu3DhgtOVK1fs2rVr1tfXZ69evbKXL186kS57enpcOWfOnHGE6X0iIezP5uPjzjAj0iBwlgsorQnmQRcQH0x3wcXC65iNolCqCKWhVBSqUlqkwgolC0lBAmm0v5XB4W38aEgqACJ9Ka2R0rjUwLoKfhB95GF4hhFAQAMBgvyLFy/s%2bfPn7g5YH5d4%2bPChV4oQcuYwRv/t27eOCrkFaGHO%2b/fvrampeXjz6cMoxXDjRIDSIJvn7A7h%2b/g88YCTHamNlvSHlUh/KEhH4LAiUAAx4NKlS%2b73uMDt27ftxo0bdvfuXbt//74rgODIGG7CeHd3t8txk6tXr/rzjMtt4FFKW1u7JfJSraqagm34nJGXCLnGGBCgNCcEqDgKooIWBCjt/U3zUgCuRB1x/vx5RwJRnpbaACITEPWR0UqO/5M5jh075mPKIJ2dndbV1eWKwDC4YX7%2bn%2b8pJojicfXHUAoHy2GVvGGZLkfCvq%2bWd1EMEQPIHiJlFeKBZPAKqgRiZRhQyEGLd7IGUKXLGV2%2b0LIH1sOms7MTyc3/bkeRBQhMuhDldKeTIXJkuu6CkBML/gkBvBcrf/jwwWE7MDBg7969s9evX7uvf/z40fvQ58%2bfPT58%2bvTJBgcH3RXIDPj%2bo0ePHE24IK6H8vkuKCDIogTQUlFROfzdLCstyx1uR4kA1QH4ONEYC1C%2bqhbg4/TZOBYC2shIi%2bE4EHSBo0eP2oMHD5LwxR3wYy5J8GuKHiB98%2bZNVxZ%2bz%2baPHDniLfGC2ECc4mTJHHjWQLmNIlDArVu3PE5lZmZYWXnWsDFzR%2b8CLFyXF6oCw/8INSZ5MC8HiRcD2erqaleCbo%2bhlpYWb5E1Nzcnecm5mWaz8FgWo8g9FbB1XpDy%2bZbz8YRnhVFfiSmlBc/rYX60Z3ldsKqUDrd/44NzdOPEO7QGrTPsduO5Z3AFhC0%2bEYTFaFXBjYcmcl1higX/303kT8f/y8/RX5QRvyutmoVNAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"465\" alt=\"Patrol Character Settings\" data-srcset=\"/assets/static/patrol-character-settings.12b3014.08e30215fef674cda370c730f0795ff2.png 465w\" data-sizes=\"(max-width: 465px) 100vw, 465px\" data-src=\"/assets/static/patrol-character-settings.12b3014.08e30215fef674cda370c730f0795ff2.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/patrol-character-settings.12b3014.08e30215fef674cda370c730f0795ff2.png\" width=\"465\" alt=\"Patrol Character Settings\"></noscript></p>\n<p>Save and compile this and let's move on.</p>\n<h2 id=\"making-the-player-emit-sound\"><a href=\"#making-the-player-emit-sound\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Making the Player Emit Sound</strong></h2>\n<p>If you attempted to set up a level now you would see that the PatrolCharacter doesn't react to the PlayerCharacter. This is because the PlayerCharacter needs a <code>UPawnNoiseEmitter</code> component to be able to make noise that the PatrolAIController can hear.</p>\n<p>In your PlayerCharacter header file you need to add:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The NoiseEmitterComponent.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UPawnNoiseEmitterComponent</span><span class=\"token operator\">*</span> PlayerNoiseEmitter<span class=\"token punctuation\">;</span></code></pre>\n<p>and then in the cpp file you need to set it up in the constructor:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Create a NoiseEmitterComponent so that we can make noise and have the</span>\n<span class=\"token comment\">// PatrolCharacter respond to it.</span>\nPlayerNoiseEmitter <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UPawnNoiseEmitterComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Noise Emitter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPlayerNoiseEmitter<span class=\"token operator\">-></span><span class=\"token function\">SetAutoActivate</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Also make sure that in the cpp file you have the includes for it:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/PawnNoiseEmitterComponent.h\"</span></span></code></pre>\n<p>Now whenever you want to make noise, you can call:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">PlayerNoiseEmitter<span class=\"token operator\">-></span><span class=\"token function\">MakeNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetActorLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Which will make noise at the current location. The middle parameter, <code>1.0f</code>, is used to determine the loudness of the noise and can be a value between 0.0 and 1.0. For a reference of how loudness works if your <code>AIHearingRadius</code> is set to <code>1000.0f</code> and you make a noise with a loudness of <code>0.5f</code> then the PatrolCharacter will only hear if you're within a <code>500.0f</code> radius.</p>\n<p>For the demo I would set the above to happen when an action key is pressed so you can observe the PatrolCharacter walking to a spot where you made noise at. Afterwards you can include it in your character's walking to simulate the PatrolCharacter hearing footsteps.</p>\n<h2 id=\"testing-the-hearing-sense\"><a href=\"#testing-the-hearing-sense\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Testing The Hearing Sense</strong></h2>\n<p>Go ahead and make a decently sized scene and drag out like 3 or 4 Waypoints onto the level. Make sure that the box extends of these Waypoints is a decent size that can capture the PatrolCharacter. Then drag out your PatrolCharacter and in the details assign these Waypoints in any order to the Waypoints array. Also make sure that your PlayerCharacter is set as the default pawn so it'll spawn when the game starts and make sure they're not near the enemy so that you can observe the enemy patrolling to the Waypoint. Lastly make sure that your level has a nav mesh so that the PatrolCharacter can actually walk around.</p>\n<p>If you set it up correctly and play then you'll notice the PatrolCharacter moving towards the Waypoints one by one and if you go near the PatrolCharacter and make a noise then they'll immediately stop patrolling and go investigate the noise. Once the noise has expired (after the <code>AIHearingMaxAge</code> has been reached) then they'll go back to patrolling the Waypoint that they were on the way to before they got interrupted.</p>\n<p>As a challenge you can try having another Actor emit a noise such as simulating a rock being thrown, just follow the same instructions as what we did with the PlayerCharacter and make noise at a specific location. You can even modify the last parameter in the make noise we used above to make the noise at another location but be aware that it's in relation to the PlayerCharacter so you'll have to add/subtract from the PlayerCharacter's location.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 876 387' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-5ae1a365ddc8207087ee4aae6c7c5d2f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-5ae1a365ddc8207087ee4aae6c7c5d2f)' width='876' height='387' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAcCAYAAADRJblSAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAU/UlEQVRYw01Y91dUWbr173gza82sng4GJBZUjlQBRSgoMihBBHNAMKGioiICIkFEW1BBEUVAGwmmabTVtpPabQJEcs6gbU/PTPe8/fa5Zb/3fvjWuXXvperu/e29z3dZ8O3Tp2j75iEePX2MZ6/b8bj9GX7seIUXXZ3ofNODrq4%2bvO7qR9ebIbx%2bM4w3PaM8P4b2rjG8fC3WCXR2T%2bJN/zT6hmbROzSHju4JPH7Wg5u3H6Li3BUcOFyEnXsOY/uuQ9h/MA8lJ04jJ78EXz34AeMTbzE4NIXhkWmMjE5jdHRGWsXnoeFpXpvGwJDjeHTU8bm3fwp9A1MYGJxC/6BjHRgS5ybR0/%2bh%2bibRzXrD6uzhM/ZM8rkm8bp3Ci86RhAWvR6Llmqx4Muer3Cl7yoae1pwpfcqLvfV4%2b8993BtoAkve9rxurMHT398iZ%2bePcer9k6S0Yv%2b/iE%2b4DgfdApDI6Po6R3B02dduH33e1y41ISC4gpk7M3Fpi27sW7jDmzdmYVdmTnYsfswCcjH8bJyZOcW496DxxgjAQLc0MgMxsZmMD4%2bizFRY4KIGf7OjOP68Ix0T/8gCRgQYEn4oIMcUX3S%2bRn0sLrZjB6S1N0nakIioqtnDK862cTuEbxs7yUBa7HYWY8FHa%2b70UdA/f3D0vr6dS96uvvRyc6/ePUYb7rrMDDQzGuN6B%2b4xQ7cZDWhvaMG33xXi6aWo6isPorC47uwffchbNm%2bH%2bk7srBt1wFsy8gi6IPIyMzGnv15XHOQmZWHE6fO4lBOIR48fIyZmZ8xOTmLqak5TE3OYWLCQcDo2CyGR2cl0EMjsxgYnpVAD42SsNF36KfS%2bgYJtneCDSDI3nE%2b85CkVNGQru5BdPcM8vkH8OLlazx73sHV0cCXr14jNHIVlrgYseBVexd6egZ4Yx/6%2bgYJdJhAuzE42IqhoWaCvc4vusovqMM3357CtcajqKpOR9HxVALKIOCDSGeHhby3ZeRi647D2LU3j8Bzkbo1G1u2ZSNt%2b2GkbjuAtRt3IillE3aQnMNUwP2H32Nu7j0JmMP09Dymp%2bYxMTlPW8xRAYIEqoKE9PWP4fTZS6iovIwbtx/g4TdP0d7ZK4Hr6htG99AYbTGM5y86WR3ofN3DRvZIYH961o4fHj8n6C7pc0/voHSfLTQJTq4mLGjvfMOTA1L3R0bH%2baOUT%2b8oBDH37t9B682DuHBxI/IKEpGVvQ1H8otw%2bEguP29BfmEaKwOlJ1NxtHAN8o%2btZGeTse9AEjL2xBFoNDZstmPtBiti4oKg1ofBVWaCp9IP2zMO4v6Db/l7kyR5lICnMDIySbWNsgEjrFHmzyA6Xnaxs7383hIUFJ3CqYpqnCyvxpnzl3Guug5Pyk7jZUYmnrQ9lMjopGVftXeThF508FiQ8eZNP5s4IBEgVkGSzb4CTm4kQHRddP/HZy8pyR9wqbYcZadSUVi8hj%2bahpzcHHY7F8WlefRuKXLzy5DNh9l/KAWHjoQjNiEJ0cujEGS3wRoYAIvVCoPZh2WGj78ZZj8/WFh6kz%2bBB8JD7gcXmRnWoDi03XvIbk9JmTI4NMKH6yP5w3zQl/j%2b8RncvpSDpuPpaGs9wVxZi%2bLj6/B5xXZWNk5/vhWFZYdwIdqImzpvnD5agqqaOly9eh23brfh/v1HePL0Gbv/FI%2bf/ET5d0iEvKa1nz1v5/Mm0ALMgPIz1QR2Bjl5JQRcxLDKwu692wlyN/bsXYd1GzYjetlGemY1gsNWEuQyBNjiYfLxh9HHAlfPAFYgZIoQeKrs8FKHQq62SyVThrCCeU58DoFKL875w83TzPsDSHYjvT9D9Q2y48K/lPWbPvRSka/aX%2bB6XhHq0/ej7VIdjhTkU2FHcaaqEqcrTmNn%2bRVsOXsVxQWFOLb3MHKOlbFZxVK4HskvJqYKXLrSiL%2b3PcC33z3FM1qhvaOb9YakPENgSAJDUIcFIrBEMu/YRS9vP4BVa1exIrAsIY7ds0Op9eYD%2b8FD4Qc3Lx8e%2b8LVw8xOBrBskGuCpFJobVBobJS5HSqdXTrnpQ7kaiNwgteFQG0Ilb7HhTbwUPjjfHUD5mbfcXubov/p%2bdFJ5s6oZInhiRmczirAWrUVN%2bqbcaToJHOjCCVlZ6nQSoQWN0F59DZyPq9FfhHB51GdRx11tPAEySqlQoupnNMM3Spcqb%2bOtrsPqYqXtN53VOByLBYKMPvEIDAgAf7W5bAFJUGrMcHH4gKTUQkPd8rW0x8KBQGykwqlDV6qQHixi16qAAIMYGcdBEifeU2hDZaIEOeVPFbpQ6HUOQgQCvDk37p4GCUCyiurMTQ2gNYvb%2bBCbS0/V%2bHUmfOoqKjBlcoGlGbnYENQDMqPliM3Kx%2bH846hsOQUykrLELWvAoGZJcgprUDesVM4KhSQfxzZRwqRRzvkFxwnYSUk45RU2zL2oeFakxSCT54%2bpwXiaQEDFixS6bDQpMVikw6LvbVYajVjoc6ERQY9XP2McDNRAb5muPuy%2b5S8jAHmqbASoE0qAVqmdIAX4ETJeN1D7svVTzoW5CgklQRjqZteKvE3p8%2bdR/dgF8ovlSPvXCZqvj6C2q%2bzUFOThMb8fXh4thD3ygvRlkfQG7Io7wKUFJdi7dGLCCmtQxRtYMpvwc7cz3GssAx5hSe5HZ9GARWQRwLyCoQSTkqVujUTjU23OFdM4MefOhAQHM8Q5DbobtPCeZkKTnaSEKXGkmg1FvnJ8VmYDItiFVgSoYFzqAFLIw1YEqORgAkCBDABQqyeXN153sPL9wN4PwcBLC%2bl47pDHTYJvJObDu6878LFBkp/jlvuGHeBcQbiACbmWtDxqAoNB7fiUmYqc2AHLmaux/UDB3BgWxYSU7ZgZUk5Yi62QJ/XDPmOMwg5UIVVa7YhafU2Xk%2bjfddjecIGxCWlYvmKVCQkb%2bE2nUYFVFMBr1FzpR5671A4e3hjgSXQApO/L9xVLKUv3JQWLHYjEe4auHgZ4e7Ozrv5wN3NTzp2ZYILoAKwJzv7R/1hAQFe3CNX/58ihB3ENWEFNy8Llrrr%2bfdWnK26zKGHI2svZ5CBAfT2PeIEV4dbp3JRk5eJCxl7cOPIEVRkr8W5Q2uQGrkWAWEmRDCznFYVQbMmD57RGVDvKIfGL07KGJ05CkpaTecdCbN/AnwCkhBgT4a3XyBS0/dyC71JlZxkiIc5FOAUbIHHevp8TRBXdm2TBc6RRixJVMMpWQcvnaNzci1BSMHmKA920E0iguHo6SOVOBbEuMq8paR387TAncEpgk9GJQgChAKWuGjgxvuqLtRjdmYew0PjGB4YZ/h9jfZnDWgtKcC392%2bgJGMlylIjUHIsGqWFy3GBighNYO5sLYXP/s8RnFsB68qt0GdeQFDyPso6GcGRG%2bFrS4I1JBmBYatZa%2bATFA%2bFSoGVmxJRWHkMRWezYbKGOAgIiwzH2vVbkLRyO2WzCfYw%2bpXeVmmCoTHaoTaxjKESu1pTuMSwluxqTRE8Fy6VxhjBgAsjQDvJCmEoBlMVgVKXXUmSkNoSV71Uny6Rs7ywiMflVRcwPjuGjv6XeD74A7qma9FatQ/1FTvQOd6I0yXrkLXFCa1fLUNDowXntyYicdsmxOZmYE3RAaQcO4TorAPwPlgH24pdnO7WEHgKwS0j6ERHBa6ANSIGK/I8saFChiNfq1HWboAxzAInFw5CcrWREvVjd/2hFEGl9ueDWyTvanVh3BUIkvu4mt3TeodBYwqXyBDbnSgNj0W6Kz6kvEh9jTFcKkGSzjuKpEVLxOktMVSSjaSYoTRGoaAhA9//Wog7k3vROr0ZD39JRsvlWNx%2bEo2279Yib0MKDq%2bOR03xZlytD0VGdCj8YvfBbX0xFu%2bshsuWcmizGmDaWQFL8EpKPg4G31joLBEkIQZGazRnlXg2cRnMKQbsbVXgi7dG1E1ZYIn2wRJnEvBnlSf%2bHOyCj4Ld8XGUBz5ersTHAWqGIMMvyohF8WosXKGBU4SZpBAsOy7AKvUO4GKfV7LbKuFxccxzSl2wo6RtMIRkhEmeNHDL9eAu4uJl4kPFIu%2bLZDz6LQ1336bh/vt03J3fjhtfrsDjoVC0nt6LbyuO4%2bvKQnx/7jj2rd6AFI6v1tXZUGwqwtLtZ%2bG1qxLm47dh3lsFrYXKNJNwX7HaSX4UZOoImCODseGkCeXtWoL3xtU5My6NeUNtU%2bBvn8qxIKVMg6hUSiY0Ft72KPhGaRCb4oKAaBkC45chYuNqhKREIzxZjvgkHQJCbHyVXMdkTeMYvJmJuwny2LVwWrYOMm%2bSo3aEnaOCpa1PbaBSjKESEXJtIP1vhsoUjfwv1uO73/fj7twefPV%2bN%2b5N7MbnBzej6Voazh9eidLNK3BuYzpy4lbi%2bKo9yI3fiMCgFXCLSof7lpPwXF8A2Z4L8IpOg0LPucMoBjM7nGX%2b0IeZkX7OiJohb9z53R%2btvwThi9kgNM774zIJ8LS64U9/ccWCWkqiZtwXmdd1CF3PFxWVF2QyOXR6HUwWO/zoJz//MBjN9I1Fz05aYfTl8GRPhCWAxFlj4RUYBxmDxpOA3cVWKAYlSQ0OW4gQFVOhIELMEa5ybz4sCWhcRwIy0Ta/Ffd%2b3oK2mTRUlG3E5RP7cGljAUfcFE55IShdsRP1u/KREZEMHy13lqR9UGwshHr1IWiza2lhbr0KGxa6WqAJ1RO4BrWjBnz5Hx/ceO%2bHxlk/XJ%2bzonEuGE1v7WiYDoR3pJ80qi8o7XNGaf8SnJl0QtnwQuy65QT/zS74ROaBjz7VcFw08oHNLEqXI7GbSH0muFgFUA%2bWglugUuWYCt0Vjm1Q7AbSKCyNw2JaDJTsIMbgpTIDFIZIHLm6Co/%2bvQdtQgFvqYCft%2bLO1HrU3VyDkvAtuNa0Gk3DYShZtgGHlq%2bGQc8BTGuFftUBqGLSoEvcAXP6cSzx8och2oSMGjMaJv1x979DcPN9KJpmQ9A0L0AH4vo8FTATglu/BWPdCQaghx9VE8yXoRF3nBmV4dyoHOfHlah9p8SV9woUPZch8ZgM8iANPnM2SoHhLucMr/SW5gWZyiqNwp4shZC6ziF10W3HtucvzQdi/ePYk2Qs4RC02E0DOQP2YF0i7v66Ac3TCWidi0XTTBhafw3Gtb4wFCWmIH0nQy/JguywBMR42/FfH3MwczJjceQeOKfkcHqNhyGzErsbonF9NgD3/hOOmz9HoHk2Ai3zrLc8nreTgABcm7Hi9u9W7KrX4SMXvsBxh1KwIQvOjCpxdkyDc2NaVI3pUTVqxPkxE2rnGBi/mnB2SIP0y0qYEtT4xEWNjz/T8e2Pb3NqH5a/xKJCZyM4f8dL0QcyhPzFbiGyQMwPAryoxa5aLHRR8m9DkdcaiW%2bwHDffRuLGfBRJiMCNd3a0jkThwvZ9KKuJQWGbFaUp6ThWkoDVxTIs3%2bEFw3ob3DkVbq4OhankBJrfxePOL3YJeCuBt74V4MPR/NZG8FZ23opb//bH0Qd6fMb5ZaFHMAnw%2bYMALc6O6kkAwY8bqAIjLkyYUD3ujeoxM2qnLfjiH1znDDh8T42QbRyT5V74eJGBcvaB0hAkBZCXhuOwwsehDI1D9kq9YxcQZEhDFNUh7OPkoScZIUjODsaZVzY0Tgej7Tc7vvpPCNoQhFtdyShO2Isrj5bhznwIChJ3oenOBtyGJxWiQsOMAQU/puHmP2zYczcLDRMxJM5K0DZWEItkvA1lMfRmA3Hz1wBUdBjgarHgUzc7FvH13YWDm1wnWcCLBGglAirH2P1xEwkgeNbFSRNqJo24SGIuT%2blx7b2OZKhR%2bkKOhHwPuFg88NfPVJzszNIcIfzpqfGXyBAqkKZHteOtUZwTOSC2waUyo7QbuKgisETLmSLCF7F7/ehhCyo6zWh8noiWjHP44uvVqH9DD%2b88g%2ba7m9H43ogWArr9PpISXyWl%2bZ3369nxBIIWBASygj90P4K2CEfr%2b3DUjgfAO8EGJ0UcXHXRXMNJgK/UFBLgwQyQ0wZaEqChCtQkQU0S1KieVJMENWqmtLgkakKHy5MGXHunR/O/dDg/rEbaRRk0MTJ8tFSFv33Gt0l3AzxoDy%2btgwgxAv%2bRFwK0GLIWu2lpAQaa9zJ4WlLgouGrqWIFFsoj8SltEhQTiYbd%2bbj2IgaNI8G4kpmDlo5E3PynFTfehlDmawh6OWpG1Qy6VJ5bTdA%2brFCH72mppjmSMB%2bO6%2b9sCN1qg7MqGXKfJMiMK%2bCuj6cF/P8gQEUCNB9UoEDluJwkKHB%2bQkkVCAI0VIGGBOgkFdRO61A7ZUAtlXGVtmj5lxENb3XI/lKOgM3cOdw98Ke/emKRs47dNlMRQhWBUlgKayx05qC1xFPKDC8OQ14%2bKyH3TYTevh5K37VwNcVhV2U46kp2oXmMgKZDcPn4TrSMhuLGL4EEHsQiET8H4Oq0kd2NpfzjJLk7Qo/g58Ok7t/6lx1Jef5wUiZB4bsSHsZEgk%2bAuy5O2tFkKn8SMKxBxYggQPfBBmoHAeMqqkD1QQVakuBQwWUBftqAK9N6lglXaJN6erKFgdnyTyNOvlQjPlcJN18t/kJFfLJYyx8zkAShiiAs5fGnS2WOENVHw0WbREkmwsO0lvNEPPZdt%2bKr32PR8mAbbrCLrawbT1LROstwfCcIED4P%2bCD3IFxk88RW1/I2Wuq4AN84E8HhJxRplb5YqlnBzifD3ZAgdd/DwEFKu5zDkmMrX3CaMq4Y0X5QgU7Kgapx3QcVkIAJjcMGEgF6EqCTVCDA17EDdQRfP2NB/bQfBww/NL8PxK3fgylPX2yrMcKw3ISPnA346ydqOHuauAvoOYG5S8Q4c/fwjo9CwqEQHGqOwNkOG39Lhbpx%2bnw%2bgcMLAb8LxYN/rMOtdzEEGfIh4cOkjt/gtfpJO65MiPsiCD6SoReOOwzUQzf94WYiaBNl770Cnt7JcNNR%2bto4EhCHpR7i/5kWLPh8WAVhA0GCQwWCBAMJMH5QAa0wKUjQ/T8rUHqi%2b9Nmgg9gKttYgbjKgLo6E0wibLjOLt36jcMH19x7ZgSl6rFQYYCT3gXWNQuRXqlA2RM/yjgQd/4djC9/Y9d%2bjaZ3Q3BtnNvXZBi/x5cvLt5ongzFrbm4//W41G2S0czvFt2vHvEhWSEsO20SgeM/cEDzDSf4Vex%2bCrvvkL7MtJJrIlzUsXwV9uZbqgn/A7%2bZVphGWaelAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"876\" alt=\"Testing\" data-srcset=\"/assets/static/testing.82a2fbd.7a3f36bec56885f4d37e9a6597d6a813.png 480w, /assets/static/testing.3acc6db.7a3f36bec56885f4d37e9a6597d6a813.png 876w\" data-sizes=\"(max-width: 876px) 100vw, 876px\" data-src=\"/assets/static/testing.3acc6db.7a3f36bec56885f4d37e9a6597d6a813.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/testing.3acc6db.7a3f36bec56885f4d37e9a6597d6a813.png\" width=\"876\" alt=\"Testing\"></noscript></p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Conclusion</strong></h2>\n<p>Hopefully that cleared up questions anyone had on how to make an AI respond to sound and more importantly respond to sound without the use of the intensive checks in the <code>Tick</code> method. Also make sure to check out the <a href=\"https://github.com/robertcorponoi/unreal-cpp-patrol-ai-with-hearing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> for a full sample.</p>\n"}}]}}},"context":{}}