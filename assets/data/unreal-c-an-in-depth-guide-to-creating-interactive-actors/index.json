{"hash":"85a87da2caa6a3c8ae7647f17d7dfc4c0f704337","data":{"post":{"title":"Unreal C++ An In-Depth Guide to Creating Interactive Actors","path":"/unreal-c-an-in-depth-guide-to-creating-interactive-actors/","date":"12. August 2020","timeToRead":26,"tags":[{"id":"unreal","title":"unreal","path":"/tag/unreal/"},{"id":"interactive","title":"interactive","path":"/tag/interactive/"}],"description":"Learn how to create interactive actors that the player can interact with.","content":"<h2 id=\"overview\"><a href=\"#overview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Overview</strong></h2>\n<p>In this tutorial we're going to go over ways that you can create system for making objects that the player can interact with. We're going to go over a pure C++ way and then we'll also go over how to migrate some of the functionality to Blueprints so that you still get the power of C++ in the complex parts but ability to easily iterate or pass off work for the interaction parts.</p>\n<p>If at any point you get stuck or want to see the example you can clone or download the <a href=\"https://github.com/robertcorponoi/unreal-cpp-an-in-depth-guide-to-creating-interactive-actors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> and launch it in Unreal.</p>\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Table Of Contents</strong></h2>\n<ul>\n<li><a href=\"#getting-started\">Getting Started</a></li>\n<li><a href=\"#player-character\">Player Character</a></li>\n<li><a href=\"#interactive-actor\">Interactive Actor</a></li>\n<li><a href=\"#adding-interactive-objects\">Adding Interactive Objects</a></li>\n<li><a href=\"#implementing-interaction\">Implementing Interaction</a></li>\n<li><a href=\"#multiple-interactiveactors\">Multiple InteractiveActors</a></li>\n</ul>\n<h2 id=\"getting-started\"><a href=\"#getting-started\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Getting Started</strong></h2>\n<p>To get started, let's see what we're going to need:</p>\n<ul>\n<li><strong>Player Character</strong> - The PlayerCharacter is going to be the main player of the game is going to be what interacts with the interactive objects. This is mainly going to be a standard third person controller but we're going to add some methods to help it interact with the objects.</li>\n<li><strong>Interactive Actor</strong> - This is going to be the main controller for our interactive objects. All of the interactive pieces will be components of this Actor and this will handle the majority of the functionality.</li>\n</ul>\n<p>And that's it. Other than the above you'll need the meshes that you want to be interactive and what I'm using in the <a href=\"https://github.com/robertcorponoi/unreal-cpp-an-in-depth-guide-to-creating-interactive-actors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> is the <a href=\"https://www.kenney.nl/assets/furniture-kit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kenney Furniture Kit</a>. You can also use the material I used to give static meshes an outline to highlight when the player is looking at them. You can find this mesh in the <a href=\"https://github.com/robertcorponoi/unreal-cpp-an-in-depth-guide-to-creating-interactive-actors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> under the Materials folder or you follow the tutorial I used to create it <a href=\"\">here</a>.</p>\n<p>Also if you're using the highlight material make sure that you add a Post Process Volume Actor in the scene and set it to have the highlight as a post process material and also make the bounds infinite. You can see an example of it in the <a href=\"https://github.com/robertcorponoi/unreal-cpp-an-in-depth-guide-to-creating-interactive-actors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> if you've never done it before.</p>\n<h2 id=\"player-character\"><a href=\"#player-character\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Player Character</strong></h2>\n<p>As explained in the section above, the PlayerCharacter is just the third person character script from the third person character demo project so if you want to see the script for it either check out the <a href=\"https://github.com/robertcorponoi/unreal-cpp-an-in-depth-guide-to-creating-interactive-actors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> or just copy Unreal's third person character. When we add the bit to interact with objects we'll add a few lines to it but character movement is out of scope for this tutorial.</p>\n<h2 id=\"interactive-actor\"><a href=\"#interactive-actor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Interactive Actor</strong></h2>\n<p>Before we get into the code let's see what we'll need the InteractiveActor to do:</p>\n<ul>\n<li>We need to know all of the meshes that can be interacted with.</li>\n<li>We need a box collider so that we only run repetitive functions when we know the player is in range to interact with the object.</li>\n<li>We need some text to let the player know that they can interact with the object they're looking at.</li>\n<li>We need a timer and a function that will be run by that timer whenever the player is in interaction range.</li>\n</ul>\n<p>So create a new C++ class with a base of Actor and name it <code>InteractiveActor</code>. Let's get into the code and we'll go over it in detail afterwards:</p>\n<p><strong>InteractiveActor.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"GameFramework/Actor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"InteractiveActor.generated.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UStaticMeshComponent</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Represents a series of interactive objects that the PlayerCharacter can\n * interact with.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">INTERACTIVEOBJECTS_API</span> AInteractiveActor <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AActor\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Sets default values for this actor's properties.</span>\n\t<span class=\"token function\">AInteractiveActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The RootComponent of this Actor.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">USceneComponent</span><span class=\"token operator\">*</span> Root<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The BoxComponent used as a collision trigger that lets us know when the</span>\n\t<span class=\"token comment\">// PlayerCharacter is close enough to interact with objects in this Actor.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UBoxComponent</span><span class=\"token operator\">*</span> BoxCollider<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The TextRenderComponent that appears above this Actor when the PlayerCharacter</span>\n\t<span class=\"token comment\">// is able to interact with a part of it.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">UTextRenderComponent</span><span class=\"token operator\">*</span> NoticeText<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The StaticMeshComponents that the PlayerCharacter can interact with.</span>\n\t<span class=\"token comment\">// If you're only using one interactive object and you don't need the</span>\n\t<span class=\"token comment\">// array then you can omit this as we'll add the interactive objects later.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\tTArray<span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">*</span><span class=\"token operator\">></span> InteractiveObjects<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// The interactive StaticMeshComponent currently being looked at.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n\tUStaticMeshComponent<span class=\"token operator\">*</span> ObjectCurrentlyBeingLookedAt<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Used to create a timer that runs a function every so often to check if</span>\n\t<span class=\"token comment\">// PlayerCharacter is looking at an object that can be interacted with or not.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tFTimerHandle PlayerLookTimer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Called when the game starts or when spawned.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token comment\">// Called every frame.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called when the PlayerCharacter enters the BoxCollider's trigger area.</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">OnComponentEnterInteractionArea</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called when the PlayerCharacter leaves the BoxCollider's trigger area.</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">OnComponentLeaveInteractionArea</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AActor</span><span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called when the PlayerCharacter interacts with an object in this Actor.</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Called when the PlayerCharacter has entered the BoxCollider's trigger</span>\n\t<span class=\"token comment\">// area and is looking around for objects to interact with.</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">LookForInteractions</span><span class=\"token punctuation\">(</span>APlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>So in the header file we:</p>\n<ul>\n<li>Declare the base components we'll need. These include a <code>USceneComponent</code> as the Root Component (without this scaling and transforms of other components is tricky) and a <code>UBoxComponent</code> to use as a trigger collision box.</li>\n<li>Define an array to hold all of the objects that can be interact with. This array can be omitted if you only want a single interactive object as we'll add the interactive objects later.</li>\n<li>Define a variable to hold the interactive object the PlayerCharacter is currently looking at, if any.</li>\n<li>Define the timer that manages running the <code>LookForInteractions</code> method on a loop.</li>\n<li>Define two functions <code>OnComponentEnterInteractionArea</code> and <code>OnComponentLeaveInteractionArea</code> that are called when the PlayerCharacter enters and leaves the BoxCollider's trigger area.</li>\n<li>Define the <code>Interact</code> function that handles what happens when the PlayerCharacter presses the action to interact with an interactive object.</li>\n<li>Define the <code>LookForInteractions</code> function that is run on a loop when the PlayerCharacter is inside of the BoxCollider's trigger area.</li>\n</ul>\n<p>That was mostly just definitions so lets get into the cpp file:</p>\n<p><strong>*InteractiveActor.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"InteractiveActor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"PlayerCharacter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/BoxComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/SceneComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/StaticMeshComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Components/TextRenderComponent.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Camera/CameraComponent.h\"</span></span>\n\n<span class=\"token comment\">// To help us see what the PlayerCharacter is looking at.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"DrawDebugHelpers.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets default values.\n */</span>\nAInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">AInteractiveActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n \t<span class=\"token comment\">// Set this actor to call Tick() every frame. You can turn this off to improve performance if you don't need it.</span>\n\tPrimaryActorTick<span class=\"token punctuation\">.</span>bCanEverTick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the Root and set it as the RootComponent.</span>\n\tRoot <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>USceneComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SetRootComponent</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the BoxComponent and set it to be a collision trigger and then</span>\n\t<span class=\"token comment\">// attach it to the RootComponent.</span>\n\tBoxCollider <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UBoxComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BoxCollider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetGenerateOverlapEvents</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetCollisionProfileName</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Trigger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the TextRenderComponent and add a generic \"Press E to Interact\"</span>\n\t<span class=\"token comment\">// message and set it to be invisible so the PlayerCharacter can't see it</span>\n\t<span class=\"token comment\">// and lastly attach it to the RootComponent.</span>\n\tNoticeText <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UTextRenderComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NoticeText\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetText</span><span class=\"token punctuation\">(</span>FText<span class=\"token operator\">::</span><span class=\"token function\">FromString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press E to Interact\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetTextRenderColor</span><span class=\"token punctuation\">(</span>FColor<span class=\"token operator\">::</span>Blue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetVisibility</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the game starts or when spawned.\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// Set the methods that are used to respond to when the player enters or</span>\n\t<span class=\"token comment\">// leaves the BoxCollider's trigger area.</span>\n\tBoxCollider<span class=\"token operator\">-></span>OnComponentBeginOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AInteractiveActor<span class=\"token operator\">::</span>OnComponentEnterInteractionArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span>OnComponentEndOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AInteractiveActor<span class=\"token operator\">::</span>OnComponentLeaveInteractionArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called every frame.\n *\n * @param DeltaTime The difference in time between the last frame and this one.\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> DeltaTime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>DeltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * When a component enters this Actor's BoxCollider trigger area we check to\n * see if that component belonged to the PlayerCharacter and if so we start\n * the timer that runs the method that checks to see what the PlayerCharacter\n * is looking at.\n *\n * @param OverlappedComp\n * @param OtherActor\n * @param OtherComp\n * @param OtherBodyIndex\n * @param bFromSweep\n * @param SweepResult\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">OnComponentEnterInteractionArea</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if anything is null so we can avoid a potential crash.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherComp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Try to cast to `PlayerCharacter` to see if it was the PlayerCharacter</span>\n\t<span class=\"token comment\">// that entered the interaction area. If not we can return early.</span>\n\tAPlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>APlayerCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OtherActor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PlayerCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create a FTimerDelegate so that we can pass the PlayerCharacter object to</span>\n\t<span class=\"token comment\">// our `LookForInteractions` method.</span>\n\tFTimerDelegate PlayerLookTimerDel<span class=\"token punctuation\">;</span>\n\tPlayerLookTimerDel<span class=\"token punctuation\">.</span><span class=\"token function\">BindUFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LookForInteractions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PlayerCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set a timer that runs the `LookForInteractions` method every 0.1s which</span>\n\t<span class=\"token comment\">// checks to see if a Player is looking at an object that can be interacted with.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span>PlayerLookTimer<span class=\"token punctuation\">,</span> PlayerLookTimerDel<span class=\"token punctuation\">,</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * When a component leaves this Actor's BoxCollider trigger area we check to see\n * if it was the PlayerCharacter and if so we stop the timer and hide the notice text.\n *\n * @param OverlappedComp\n * @param OtherActor\n * @param OtherComp\n * @param OtherBodyIndex\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">OnComponentLeaveInteractionArea</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AActor</span><span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if anything is null so we can avoid a potential crash.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherComp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Try to cast to `PlayerCharacter` to see if it was the PlayerCharacter</span>\n\t<span class=\"token comment\">// that left the interaction area. If not we can return early.</span>\n\tAPlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>APlayerCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OtherActor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PlayerCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Stop the timer that checks for the player interacting with objects as</span>\n\t<span class=\"token comment\">// the player is no longer in range to do so.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ClearTimer</span><span class=\"token punctuation\">(</span>PlayerLookTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Run on a timer when the PlayerCharacter enters the BoxCollider's trigger area\n* and it checks to see if the PlayerCharacter is looking at any objects that can\n* be interacted with by sending a trace from the PlayerCharacter's camera and\n* checking for blocking collisions.\n* \n* @param PlayerCharacter The PlayerCharacter that entered the BoxCollider's bounds.\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">LookForInteractions</span><span class=\"token punctuation\">(</span>APlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tFHitResult OutHit<span class=\"token punctuation\">;</span>\n\tFCollisionQueryParams CollisionParams<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the start of the trace to be the player's camera.</span>\n\tFVector Start <span class=\"token operator\">=</span> PlayerCharacter<span class=\"token operator\">-></span>PlayerCamera<span class=\"token operator\">-></span><span class=\"token function\">GetComponentLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tFVector ForwardVector <span class=\"token operator\">=</span> PlayerCharacter<span class=\"token operator\">-></span>PlayerCamera<span class=\"token operator\">-></span><span class=\"token function\">GetForwardVector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the end of the trace to be 1000.f units from the start in the direction</span>\n\t<span class=\"token comment\">// the player is facing.</span>\n\tFVector End <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ForwardVector <span class=\"token operator\">*</span> <span class=\"token number\">1000.f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// DEBUG</span>\n\t<span class=\"token function\">DrawDebugLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Start<span class=\"token punctuation\">,</span> End<span class=\"token punctuation\">,</span> FColor<span class=\"token operator\">::</span>Green<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If there's no collision or the collision wasn't a blocking collision then</span>\n\t<span class=\"token comment\">// we can return early.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">LineTraceSingleByChannel</span><span class=\"token punctuation\">(</span>OutHit<span class=\"token punctuation\">,</span> Start<span class=\"token punctuation\">,</span> End<span class=\"token punctuation\">,</span> ECC_Visibility<span class=\"token punctuation\">,</span> CollisionParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>OutHit<span class=\"token punctuation\">.</span>bBlockingHit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If there's no component then we also return early because we only deal</span>\n\t<span class=\"token comment\">// with the components of the InteractiveObjects.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>OutHit<span class=\"token punctuation\">.</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Attempt to cast the component to a UStaticMeshComponent and return early</span>\n\t<span class=\"token comment\">// if we can't.</span>\n\tUStaticMeshComponent<span class=\"token operator\">*</span> InteractiveComponentHit <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OutHit<span class=\"token punctuation\">.</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>InteractiveComponentHit <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * When this Actor is interacted with we...\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Nothing here yet.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Alright that was quite a bit so lets break it down:</p>\n<ul>\n<li>We have to make sure we include all of the header files of the components we forward declared in the header file. We also include <code>DrawDebugHelpers.h</code> so we can see the trace we perform.</li>\n<li>In the constructor we set up the components we defined in the header. This includes the Root Component, the BoxCollider, and the NoticeText and all of their default values.</li>\n<li>In <code>BeginPlay</code> we assign the methods that are meant to respond to a component entering/exiting the BoxCollider's trigger area which are <code>OnComponentEnterInteractionArea</code> and <code>OnComponentLeaveInteractionArea</code>.</li>\n<li>Now in <code>OnComponentEnterInteractionArea</code>, which again is called when a component enters the trigger area, we check to see if it is the PlayerCharacter and if so we bind the <code>LookForInteractions</code> method to run on a timer every 0.1 seconds. We need to use <code>FTimerDelegate</code> since we want to pass a parameter to <code>LookForInteractions</code> which is the PlayerCharacter. The <code>true</code> at the end of <code>SetTimer</code> means that this timer will loop every 0.1 seconds and keep calling <code>LookForInteractions</code> until it is stopped. We also set the NoticeText to be visible.</li>\n<li>In <code>OnComponentLeaveInteractionArea</code>, which is called when a component exits the trigger area, we check again check to see if it is the PlayerCharacter and if so we cancel the timer we set in <code>OnComponentEnterInteractionArea</code> so that <code>LookForInteractions</code> is no longer being called as the PlayerCharacter is no longer in range of any objects they can interact with. We also set the NoticeText to not be visible again.</li>\n<li>In <code>LookForInteractions</code>, which is set to be run on a loop every X seconds once the PlayerCharacter has entered the BoxCollider's trigger area, we send out a trace from the PlayerCharacter's camera and see if it collides with anything. If there's a collision we check to see if that collision is one of the interactive objects in the <code>InteractiveObjects</code> array and if so we don't do anything yet. We'll be adding that functionality in soon.</li>\n<li>Lastly, <code>Interact</code> is going to be called when the PlayerCharacter presses the button to interact with an object but we're not ready to do that yet.</li>\n</ul>\n<p>So that was a bit much but just make sure you get a good understanding of it before moving on. Also make sure that the above compiles for you and lets get to adding interactive objects to our Actor.</p>\n<h2 id=\"adding-interactive-objects\"><a href=\"#adding-interactive-objects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Adding Interactive Objects</strong></h2>\n<p>If you drag out the <code>InteractiveActor</code> onto the scene you'll see...nothing. This is because we haven't added any meshes or anything we can see yet. In this section we're going to add a simple block and smaller block to act as a makeshift lever that our PlayerCharacter is going to interact with to move.</p>\n<p>So back in the <code>InteractiveActor.h</code> script add the following below the definition for the <code>Root</code> component:</p>\n<p><strong>InteractiveActor.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The RootComponent of this Actor.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">USceneComponent</span><span class=\"token operator\">*</span> Root<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A non-interactive desk.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\nUStaticMeshComponent<span class=\"token operator\">*</span> Desk<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// An interactive drawer in the desk that the PlayerCharacter can interact with.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\nUStaticMeshComponent<span class=\"token operator\">*</span> DeskDrawer<span class=\"token punctuation\">;</span></code></pre>\n<p>Now lets setup the meshes in the cpp file and position them so that the drawer is positioned in the correct place in the desk.</p>\n<p><strong>InteractiveActor.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Load the meshes used for the Desk and Drawer.</span>\n<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UStaticMesh<span class=\"token operator\">></span><span class=\"token function\">DeskMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StaticMesh'/Game/Models/Furniture/Desk/desk_desk.desk_desk'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UStaticMesh<span class=\"token operator\">></span><span class=\"token function\">DeskDrawerMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StaticMesh'/Game/Models/Furniture/Desk/desk_drawer.desk_drawer'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create the Root and set it as the RootComponent.</span>\nRoot <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>USceneComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">SetRootComponent</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create the BoxComponent and set it to be a collision trigger and then</span>\n<span class=\"token comment\">// attach it to the RootComponent.</span>\nBoxCollider <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UBoxComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BoxCollider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetGenerateOverlapEvents</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetCollisionProfileName</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Trigger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Update: Change the box extent and the position so that it extends mostly</span>\n<span class=\"token comment\">// in front of the lever.</span>\nBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetBoxExtent</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">150.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create the component for the Desk, set its mesh and position and then</span>\n<span class=\"token comment\">// attach it to the Root.</span>\nDesk <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Desk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDesk<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110.f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">40.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDesk<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeRotation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FRotator</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDesk<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeScale3D</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDesk<span class=\"token operator\">-></span><span class=\"token function\">SetStaticMesh</span><span class=\"token punctuation\">(</span>DeskMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDesk<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create the component for the Drawer, set its mesh and position and</span>\n<span class=\"token comment\">// attach it to the Desk.</span>\nDeskDrawer <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DeskDrawer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDeskDrawer<span class=\"token operator\">-></span><span class=\"token function\">SetStaticMesh</span><span class=\"token punctuation\">(</span>DeskDrawerMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDeskDrawer<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>Desk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Note:</strong> As mentioned earlier, these assets are from the <a href=\"https://www.kenney.nl/assets/furniture-kit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kenney Furniture Kit</a>. I just copied over the desk fbx into a Models folder and it imports both the desk and the desk drawer. These are the same assets used in the <a href=\"https://github.com/robertcorponoi/unreal-cpp-an-in-depth-guide-to-creating-interactive-actors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a>.</p>\n<p>The component tree will look something like this (mine looks a bit different as it's a copy from the repo and it has extra elements):</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 505 222' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-949e0b5d60919cbf13be18a723663837'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-949e0b5d60919cbf13be18a723663837)' width='505' height='222' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAcCAYAAADRJblSAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAFIUlEQVRYw9WYyVIqWRCG653sCJmUGRUVBAFxKAQUBSeccV64uBu7DQ2NXri4L9C7fhLfKLu%2bpJMmsG/3rrtYZNSZKCrz/Pnnf45TKBTk7u5OZmdnJZ/Py9LSkuRyOVlYWNAnfdqso8%2babDYri4uLUiwWda5cLsvy8vKgz2%2bYn5%2bfH/wmlUpJJpPxnTmHh4fy%2bfmpH318fCwXFxfS6/Xk5uZGut2unJ6eyuXlpdzf3%2bv82dmZjrdaLbm6utJ1t7e30ul0dB3vY%2b319bXs7e3pXLvd1j8jIATPT%2bYkEglJJpP6gXNzc/qRtvvsIm2McfrYMDJsjY2P/pbdp%2b83xwcBiMfjGgCe%2bWJe28lEUqLRqMRiMSFAZjaGTU9PSzqd7q//B7MAkwL/tva/NPsehwb53T3uyvffv8vPH7/IXmdfTk5OFLoYkAfa5%2bfnOn50dKSpQkrMzMxoJEHPcGTpj4M57CIwLZVK4m658u31UarlZXE3NmR1bU1WV1fFdV1ZWVmRWq0m6%2bvrOra1tSUb3hpSBwLFCAZG26%2bQ/5ICwBn4R6MxiYTCkq00pbx3KflCUXJeHqe8AJHvOArLWxUAObQZG%2bYNWzOaPn41Z2pqSjByOhKalFzzVoq9X8VtbMqZVwFIARi%2b0Wgo/GF%2bUqFarcr%2b/r5WBVJhZ2dHx0kNUBIOh8Xe7WdzcPwvm5JQOCI/TUYkEJhUJyKRiD6xUCgkwWBQx1jPC%2bgzzjxt0IRZUP1ugwDA8Di2VPYgvjSr%2bX5wcCDb29tqzWZzQIrGAcyDjN3dXUUDKAAtQIsA8E7fB8B2znY2HPH64aAyJFAmp4G71XOchwMgRRQgFcSUIERKG%2bcDgcDgvX42ByfZSVRbfbMu1bWq1Ft12dzclDWvClABYHsQQR8DDfzOqgNoQBmCFEMB7xsHcyCu9/d3eX5%2b1gC0j9tSP6xr3ceheqPfRubiOI4Cd5wkSKTE09OTvL29yevr68BeXl7GwhwceXx8VP3Os3fVk1qjpozPIYlzAc4TKPQ9fZieMYw%2blYE5jLMBfX778PDgexvoAEzbsbgs5BekddKSUqUk7d32gPBQhKQDfaBOm1QwRJAmIMRSAEEEEdr7/WjOaF2EFBOphMyX5iWRTigB4li9XleH6dMG/pAe5AgXEAj4AU6gMvAbxJLf9YDzt%2bUhOi3ZXFYjhAIEGVQIDg/WZmfpI315kSk/nshrtME4aIEvAYh4QiiTzUi9W5dCqSA7rR3NeRQf9Z48J/fZbcZJC9IDjjAjBcZOCJnph3sIiCajEgwFB2LGhNLwumGIM4fRBhkWAL8H4isCgHomKbV2TRbzi7Kx3tcAVu9pVyoVFTyMUSoRR6YPaPMkdQjO2CBgcCAK9wOQX81LejYtlXJFHTfneUJyVgFwFmJkDHJknjG4YWwCMAxXK1vwAG3IzGQtT0uJYchr5fAI0NZYWoxdCuAAatBtuuIeuFIsF6Xm9g9FCBx2FrMjMWTHpSnEiFok940vRpE1FgGY8o7DCKFY3BNEmbgEQgHJzvUvPxA1lDe747P7Pox8Z274kGFIsCD4NRDO6AcqpENhSaVT8vHbh6pCHOS0B%2bnZjQ95D/HZaREzXmAcvkAg%2bZ0HvihBC0I8EZfOZUfiqbg6jgaw2yGcRAPgJKxPJcB55ows9XTpkeIoCsZDCf5pExMTg3sCIA0h0jaVZzdFdltkZGltv1yK8A0/%2bg5n2IlRM4EzejX2I7PKMLzersv%2bL7NrPLPR7/kD3qYk/ThNlXIAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"505\" alt=\"Component Overview\" data-srcset=\"/assets/static/component-overview.ef45299.d6c2eb0a818489cf10a145f9708ddc10.png 505w\" data-sizes=\"(max-width: 505px) 100vw, 505px\" data-src=\"/assets/static/component-overview.ef45299.d6c2eb0a818489cf10a145f9708ddc10.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/component-overview.ef45299.d6c2eb0a818489cf10a145f9708ddc10.png\" width=\"505\" alt=\"Component Overview\"></noscript></p>\n<p>Alright so a bit more than in the header but it's pretty simple. Since we're actually adding things we want to change the extents of the box collider so that we have a decent area in front of the desk where the PlayerCharacter can see that it's interactive. Then we just create the Desk and DeskDrawer meshes and setup their location/position so that the drawer is a part of the desk.</p>\n<p>Now we have to add the DeskDrawer to the <code>InteractiveObjects</code> array. We can do this in the constructor but I prefer do it in <code>BeginPlay</code>:</p>\n<p><strong>InteractiveActor.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called when the game starts or when spawned.\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// Set the methods that are used to respond to when the player enters or</span>\n\t<span class=\"token comment\">// leaves the BoxCollider's trigger area.</span>\n\tBoxCollider<span class=\"token operator\">-></span>OnComponentBeginOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AInteractiveActor<span class=\"token operator\">::</span>OnComponentEnterInteractionArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span>OnComponentEndOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AInteractiveActor<span class=\"token operator\">::</span>OnComponentLeaveInteractionArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Add the DeskDrawer to the `InteractiveObjects` array.</span>\n\t<span class=\"token comment\">// If you just have a single interactive object and therefore don't have</span>\n\t<span class=\"token comment\">// an `InteractiveObjects` array you can omit this.</span>\n\tInteractiveObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>DeskDrawer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>At this point you might be wondering why <code>InteractiveObjects</code> is an array if we only add one thing. If you only plan to have 1 item be interactive then you don't need an array and you can just check for that single item as I'll show below. This tutorial shows how to use multiple interactive pieces as that's more complex and is useful in situations like a control panel where you might have multiple buttons and levers and you can check out the <a href=\"https://github.com/robertcorponoi/unreal-cpp-an-in-depth-guide-to-creating-interactive-actors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> for a more complex example.</p>\n<p>Now let's add the functionality that loops through the <code>InteractiveObjects</code> array and looks to see if the Player is looking at any of them. So in the <code>LookForInteractions</code> method, which again runs while the PlayerCharacter is near the <code>InteractiveActor</code>, we can do:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Run on a timer when the PlayerCharacter enters the BoxCollider's trigger area\n * and it checks to see if the PlayerCharacter is looking at any objects that can\n * be interacted with by sending a trace from the PlayerCharacter's camera and\n * checking for blocking collisions.\n * \n * @param PlayerCharacter The PlayerCharacter that entered the BoxCollider's bounds.\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">LookForInteractions</span><span class=\"token punctuation\">(</span>APlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tFHitResult OutHit<span class=\"token punctuation\">;</span>\n\tFCollisionQueryParams CollisionParams<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the start of the trace to be the player's camera.</span>\n\tFVector Start <span class=\"token operator\">=</span> PlayerCharacter<span class=\"token operator\">-></span>PlayerCamera<span class=\"token operator\">-></span><span class=\"token function\">GetComponentLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tFVector ForwardVector <span class=\"token operator\">=</span> PlayerCharacter<span class=\"token operator\">-></span>PlayerCamera<span class=\"token operator\">-></span><span class=\"token function\">GetForwardVector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the end of the trace to be 1000.f units from the start in the direction</span>\n\t<span class=\"token comment\">// the player is facing.</span>\n\tFVector End <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ForwardVector <span class=\"token operator\">*</span> <span class=\"token number\">1000.f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// DEBUG</span>\n\t<span class=\"token function\">DrawDebugLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Start<span class=\"token punctuation\">,</span> End<span class=\"token punctuation\">,</span> FColor<span class=\"token operator\">::</span>Green<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If there's no collision or the collision wasn't a blocking collision then</span>\n\t<span class=\"token comment\">// we can return early.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">LineTraceSingleByChannel</span><span class=\"token punctuation\">(</span>OutHit<span class=\"token punctuation\">,</span> Start<span class=\"token punctuation\">,</span> End<span class=\"token punctuation\">,</span> ECC_Visibility<span class=\"token punctuation\">,</span> CollisionParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>OutHit<span class=\"token punctuation\">.</span>bBlockingHit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If there's no component then we also return early because we only deal</span>\n\t<span class=\"token comment\">// with the components of the InteractiveObjects.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>OutHit<span class=\"token punctuation\">.</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Attempt to cast the component to a UStaticMeshComponent and return early</span>\n\t<span class=\"token comment\">// if we can't.</span>\n\tUStaticMeshComponent<span class=\"token operator\">*</span> InteractiveComponentHit <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OutHit<span class=\"token punctuation\">.</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>InteractiveComponentHit <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If the component that the PlayerCharacter is looking at is not part of the</span>\n\t<span class=\"token comment\">// array of interactive objects then we can return early.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>InteractiveObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>InteractiveComponentHit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ObjectCurrentlyBeingLookedAt <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Set `RenderCustomDepth` to be false so that the object isn't highlighted anymore.</span>\n\t\t\tObjectCurrentlyBeingLookedAt<span class=\"token operator\">-></span><span class=\"token function\">SetRenderCustomDepth</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Set the NoticeText to be invisible since the player can no longer interact with</span>\n\t\t\t<span class=\"token comment\">// with this object anymore.</span>\n\t\t\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetVisibility</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Lastly since the PlayerCharacter is no longer looking at a valid interactive object</span>\n\t\t<span class=\"token comment\">// then we set `ObjectCurrentlyBeingLookedAt` to a nullptr and return.</span>\n\t\tObjectCurrentlyBeingLookedAt <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Loop through all of the objects marked as interactive and if the player</span>\n\t<span class=\"token comment\">// is currently looking at one of them then highlight it and set it as the</span>\n\t<span class=\"token comment\">// new value for `ObjectCurrentlyBeingLookedAt`.</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>UStaticMeshComponent<span class=\"token operator\">*</span> InteractiveObject <span class=\"token operator\">:</span> InteractiveObjects<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>InteractiveObject <span class=\"token operator\">==</span> InteractiveComponentHit<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Set the `InteractiveComponentHit` to be the new value of `ObjectCurrentlyBeingLookedAt`</span>\n\t\t\t<span class=\"token comment\">// since that's what the PlayerCharacter is currently looking at.</span>\n\t\t\tObjectCurrentlyBeingLookedAt <span class=\"token operator\">=</span> InteractiveComponentHit<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Set `RenderCustomDepth` to be true so that the highlight is</span>\n\t\t\t<span class=\"token comment\">// added to the object.</span>\n\t\t\tObjectCurrentlyBeingLookedAt<span class=\"token operator\">-></span><span class=\"token function\">SetRenderCustomDepth</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Set the NoticeText to be visible so the player knows that they can interact with it.</span>\n\t\t\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetVisibility</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Break out of the loop early since we only want to deal with one</span>\n\t\t\t<span class=\"token comment\">// interactive object at a time.</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// For a single interactive object you could do:</span>\n\t<span class=\"token comment\">// if (InteractiveObject != InteractiveComponentHit)</span>\n\t<span class=\"token comment\">// {</span>\n\t<span class=\"token comment\">//   DeskDrawer->SetRenderCustomDepth(false);</span>\n\t<span class=\"token comment\">//   NoticeText->SetVisibility(false);</span>\n\t<span class=\"token comment\">//   return;</span>\n\t<span class=\"token comment\">// }</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// DeskDrawer->SetRenderCustomDepth(true);</span>\n\t<span class=\"token comment\">// NoticeText->SetVisibility(true)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now here we added a bit more. The first check is to check if what the PlayerCharacter is currently looking at is in the array of interactive objects and if not we turn off the notice text and highlight for the previous value of <code>ObjectCurrentlyBeingLookedAt</code> if there was one and return early.</p>\n<p>After that we loop through all of the interactive objects to see if the PlayerCharacter is currently looking at one of them and if they are then we set that as the new <code>ObjectCurrentlyBeingLookedAt</code> and we set it to be highlighted.</p>\n<p>If you compile this and drag out the <code>InteractiveActor</code> onto the scene and hit play you'll notice two things. When you get in range of the InteractiveActor's BoxCollider trigger area you'll see the traces being run from the PlayerCharacter's camera to check what the PlayerCharacter is looking at. Now use those traces to help you guide the camera towards the DeskDrawer and when you look at it you should see it highlighted. You should also see the NoticeText pop up and let the PlayerCharacter know they can interact with the DeskDrawer but that doesn't do anything yet until we add it in the next section.</p>\n<h2 id=\"implementing-interaction\"><a href=\"#implementing-interaction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Implementing Interaction</strong></h2>\n<p>So as of right now our PlayerCharacter can get in range of the InteractiveActor we'll see the traces and if they look at an interactive object, like the DeskDrawer, they'll see a highlight around the item letting them know that they can interact with it but now we have to implement the actual interaction. This is going to involve changes to the PlayerCharacter and the InteractiveActor.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 562 386' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4322ff632dd7c023b3c0628a08a0c8de'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4322ff632dd7c023b3c0628a08a0c8de)' width='562' height='386' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAsCAYAAADVX77/AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAYVUlEQVRo3p1Z51%2bUZ9bm2/thN8USFbCAhaiAIEgv0svAVKYBM8wMDL0o0kRFDWq6MRpT1iRq1NUoKjZs2DWWrDGaaJqJJdnsbnY3%2b%2b7%2bBdd7znmeGTDRJPt%2buH73M88Mz9zXOde5zrmHgNtf/w23v/HhB3w9HHcexDc/w99/jrs/wZ1h60OhPOvrh2HYXm4LaI9fD%2bErH24z/ir4kvGVD38RfMH4UsHnX36Pz7/4Hp%2bpCPjvyT%2bE8C%2bRvPuTwDwiAI8MxANB%2bNsvBOFhAfirQv4hAfj8wQD8N5n/BfJ3f6MCfiUQv6qCb367Cn4egAdVIAH4r8nf/QXJPwL%2b5z1SET88uiR%2bSync/hUVPDoAj87%2bL5K/%2b9/h/rf/wj3CL5fD33%2b1FG7/UikMD8JvDcD/q%2b5/M4aecenyx7jy4XXcGaaGn2f4bw9gOFFF6n9VMDzTtx9udl8Mq3Uh%2b/mf/bgl%2bA63PvsOAf6HEoZH9MHuoGB4kJggk7l77x%2b4e/8fuHf/n37c//ZHwb1v/4nv//IfXL9xG2vXvYb169%2bgL70v97797l/47s//O4Tv//3A629VDL8WfKdC3vv30OthuM8gtfnAyrt3/0Hcvfcj7f9HBHynPsgP2sifGbRJwff/kdd8n7/0/nf8wB/pAf%2bkQPwdn1G0b1JEb1I0P731LW58eg8f37hLuIOr127j40/u4vCRc3juuZfwwouv4PiJy/jTR7fxwaWbhFu4QOu5Czdw5tzHOHf%2bOs6cvYbTZ67i9NmPcPL0VRw9fhnHBi/j8NGLODhwDgcOncW%2bA2exe%2b8J7Nh5GNvfH8CWbQeweUs/Nr23F%2b9s3I23392NDe/04c0NO7H%2bjT9i3etbsfa1LVi9ZiOefeENrHpuPXpXrsXy3jUIeP2tHfSBbXh13Ra8svY9vLj6XfSuWk9vrkXP8jVY1PMyupe8hM7u59He9SyW0L2lz6zFoqWr0btiLXbv2I097xNo7fvjTsL76Nu2A3t37MSe7Tuw7/2deGP9m1j2zCosWboCWzduwtH%2bfhzs68PA3j04TNeHdu8m9OEwvyYc6d%2bLo/v6ceLQQSxetBK28kZUeFrhcLX4UVbRBIvdC5PFTfD4UWIl0GotrYW9vAHWsjq5tpTWwGyvgclaBb2pAlp9mSDAbK%2bDD9ayBuhLKpFbYENeoR15GjvyBaWyanQO2B2N9OXNsNBnO9p7cP3ccVw/P4iblwZx68oJ3LhwAp98MIRbl0/h3JF%2bvLV%2bHZF/E1dODeCra2fx2YdnCOfwxdXzuH39A3x57SK%2b%2bfQSvrp%2bCbdvXKb1Cu7cvIprH5xBe2cPKmtaUFXTBo93gR9uLwWlgvbjrEOZo5aIemE0u2G2VsJQUkEBqqbAUcDczRS0ZpS7mlDOnyfYyykotkoElFM0GQ73PFkNJR7ojC6Kkpuu3fLaaKYHmpWoOj3zUVE5n7LSgFW9z%2bPTiyfx8fnjOLH3KI7sOoJPLg4Krl84jmvnjuGjM0dx4%2bIp7N99FJtfH8CfTg1icO8RXDk5iI8vnMT5oydwZPcgrp49hQPbB3HpxGlcPnUGV06fxaVTZ3Hj0mXs3LwfuTmLaNP1QrbUQSivVUjYmbSHruvQUN%2bBV15Yh2P7D2Nf334s7Oqlz9bTvquFrFmgqsTqEfUEMFmG1lAhEiklaZU6myTLDF%2bAnBQgs62aPlshX5hfVIoXVz2Pz66cIcLHsKSxH62u3Vi9ZB9WtvXjxe5%2brO7ZS%2bsevLpiD15ZfRDVpf0SlA7vXiys3YO1vQexb%2btRzKvYi47qftRa96KxfC9aXHvxUs8htNPn5lfuwZpnjsFt3kREFBKcaYu9itRYg7raVry0cjWO9w/gzie38MPXd/Dl5Y8w%2bN4uvNrUA08pBYsyzkEosbr9UErHhQCNrhwabTmKDU4h71MCrz5w1nlV1FEhyigsLsMf1q0jiZ8WBbz98kEcIVPauv4QEd%2bHdb19tO7A8wt3YP2K7Ti6qx8bXjhAijiOfVuOYstrAzi4/Rhl/CT2bzuOY7tPYmDnCezbdhIn9p8hZZzH4V1nMbjvPE4PXCAlfISNb79Lm%2bcAVMFC68qWZbh65BR%2b%2bOI2bl%2b6imOb3sf61mew2FiN%2bTllaMt1oMFcDTtJv8zZCFtZrZp5F0xmFyWyAgGF2jIwLBQph3s%2byocRF4jkW6X2tRQkLQWAg1BMgdu9dRM%2b//A81f923L3xNr65vgl3rr%2bLr69twM0PXseti2tw8%2bJ6XB48SJk/QoFi6Q/Q9WG6PoyrZwZw%2bcQh/On0IfKGg/iQcOXUAVwcPIALx/bTuh8fHN8vHnJmYB9OHSB1NLXBRLJvLKnHYm0Tess78BoFYpmlHm15DkFHkQudxW500uqyVKGE1GKxVYlqjES8hFRk4bIgBBiovvWUWZPVS29UPwIkOap/G9Ugg2vRTrW1evkzeOv5FzC4qxsbVy%2bmrPfg1WWL8UJ3l2BVZwf2bpqPlxZ1YGV7J57rWkjoxLMd9B69XtlG99va0dvahmfmL8Cyllb0NM2jcmpBd10DOqvr0F5Vg1Z3FZWJB41lTpRRGVTbG7BI14yF%2bmYi6UV7frmQ7dJ6iLgL7RonOgqdaC6ukEyXsNwl4y7JPq9mCgh7mpggB6CwuJRKoUzKgcuiSOBAkV6B3dEgSnB65glYHQ3eJnTV1KNvQwNtnroCbbiruhpd3iqqXy%2bWVzdjcMMqHN68HovqmtBW6aX6rxF0VtcK%2bLrdW422qmos8FRhvrsS81we%2bmw13a%2bRlQOwwFOJKkel1G67vhKLdbVYqCVQpruIdIemQsDk2widFAC3zgmDVSEvsidwd%2bBVb3JI2wxg4%2bMSELJ%2bwk4UMwzKqjO5VF8YQhm1lWpvi2Srf2MjepobiUw9Wmra0VC3BJ01jejW1%2bG9hfNxY%2bdmbO5dAZepBLW2UlRb7QSbwGuxorLEAg%2b95zIY4dDqUE6oL69Aq4dq2e1Fk9ODFqcLpbYK2Ml/FusoAJTtriIm7VQxFIB2It9GinDQDGDimjcrxBmcfZ3RIWuxvhQBTLZwWOZ98AWDr7k8uPX5sq8ooEUCsLC2Gfs2NeLgliZRwvZ3O/HHzcuw5%2b1m7HrZi741HqytqsPqJuokBgPcRpMQrWDoDQKnTi/ES4uKYS0ohF1TjFq7gwLglSA0O91oKHPAZnfDS3PKUm0lulnumooHyPN1u5r9ej25Pdc5%2bQUPPsrQRO2PpG%2byViqDE63SBYrVjHMrVEzOJVnnWYBhpoGCTdDnATaKLE9W5dSHFzU0YWlzA5a3eKl%2bK7Gk3oVFtQ50uhzoMZRhKT2vu7AcLXozZVYLZ3ExHMNQXqSgTFMEe2EhbAR7oYaUYadSIOlX1lBrrKCAlJOZ1aCBiC8lBbD0O9Xsd/4kAFz/NuJlJPnrjQ4pmxJrlZQxe5lV3T8jwEY3mRz3foHa/8tcQzMAB6RIAuUQiD/oSRklTglAcwXVWV4RLBo9bEVGlNBqIpSmFcATn4WyxByY8nUoKdLLe7o8DYqyC6AhFGTmIz8zD7lzc5FDSIlPQ0ZyBpxGC80DHiwgb%2bAyselNKCDybUVuLNEp8u98iPw5%2b80aB02DbpE6k9cZylUT9EgCeZ5hA%2bSgBAwfenzEfeTZ6DhqRULc6Q%2bAntSRp7EhKiYTXbX1cJhsCJ0ai5mR6YiIzsLcZA0MuTakR2cgJWQ6ipNykJSowfTwdEyYmoigSTF4KiicMBOjA2dg1LgZGDEmDI%2bNCMX//H48xk0Ih8lgRwNNbTVEurdmAd55eQ35Ajk/EV2kVbI/FAAl622EjgIHqk0eFDN5f72zqsvJA5wyKltpHuAgsP8FDGW%2b6cEg0OpQpz8l40Te4KDSqEBahh7jQ2Np8xFUo1Uo01vx%2bMgwjAychegZ6WRSVWjOccCdQqaXYcDG5oXY2dmLtzuWY1ZkBkYFRmHU2Bl%2bjBwznZ4VjnQqla5V69DWtRJ1pga4UyvQpm3Eh%2b8fwCE6zXUbarCIHL%2bbMETeQaZXTuQdooIu8gcbmbeOyLLpcQB41RrKZWXjU%2brfq5RAqZPl3yinq5%2bqwdci2Sd4%2bOE2GRmTjaeCZ1HWIjAmKBK1pQ44DBY8%2bdR0jJ0Yi/gZKaidqycpkovnlVNmqC/nO5XX%2bRYkRGVgzMR4jKFncAAZHISkvAroXd1wtTyHZzf0YevuY1i94i1sXr4O1/oOoLmoFk3ZpZR96vcs%2bUJ2e4dAiBd7JPAdumoYjHx%2bcapk3bRv%2bwNrYbFNgmC0VA6VACuACT8o/0bpBjwBpmcZEBKWSMQjSbrK5keOnUnkzeTuZjw2KgxTpyRgXkEZ6tOL0ZKlx/xsE1pzzSRLO1pzStCSY8Q8oxuBIQkYO2G2%2bpxIBE6KxVxqmVn5LtQX1cBlpY7TtAI9a7diz5GzOH1wEO3GBrRkW5XMq8R5%2bOmmjC/SeQVLKACtBnL%2bsnohyBnm4y%2bbOK880JVQ5n3X7AkB7IhmOztjvbrWiVNyfbBh8KQYl1yMoFDe9BzafDzGTZxD11THwbNhyCuGy2jGSCITPT0FHbklyA5PRF54AmpT8lCdko/KhCxkzoiDN6UACwptRDxS/j44NFGey0gvrsGq17bh5B46MW7ZhePvbkdP14uoaOzFhr6jeOH5t9CYaUZ7Qbl0gEVEdrHeq4ADQOtSWpsMXpK/S6ZVcXzV9ZmPVeaCKln5hCseUEATIM8BD6wErvtCrROzE7QInpxK5pWGidPSMX5qKsZPSaF7SRgzIQ4acnHu4ZMmJ8KbRQNNYjYeHzUN0yZGkhKKsIAyr5udit%2bNnIbUaTHo0ZZiDpnlE2PD6TnJEoTASfGYGpEDi3cx3nx/AKdPf4Cbhwdxb/Ak9m3YhrLqHtjnvwR3Ebk/BaCHvGCJj7yKHlYAreXFNMeQ9Pm3AB7jOYlM2rdyUPxqIEgA8ovsCnk64mpUw4tLKsSksHQETU4h8koAxk9RyDOCaOPjaOMREamIjkrFjLAUNM7VUvaTMT0sAUnT4zA7OIzIJ%2bFZMsq0OVmYFRqDzlwjCuNy8fiYmQiiUggOTZJ1LKmKn5laWIneddswcPICLg0cx7cnT%2bPVVeuRbGyFSd%2bAbiqBHpI5k16ir8YyAquhxUgHHNp3odYmo25BkdXv9j5Fl1iVMw3/tsHlwafbgPwim5DnrHOLy8ozY9rMFIwZHyOEhfw0lfxUBcGTWQHJsuGxkxIwmpQQOiUJlpg0ZEUkSh/WRqdiVvDTiA%2bJQFV6Ng4sW4mc2EwYZyUhYkocniT/CJykkA4KSRRfkNIiIw2PK0bj4jXYdeQMrp2/REfsTciyLoCRfKCb%2bj8HYKlOCUA9HXisNJPoqdXlFVn8Jsfurzc5xeg4%2b7yK9GllZXAXkAD4JJ9JtcsOHxwyh9rULMpunBBXMp/yoAIkCMkqkmTzISRnS2wG2vJLyKWdcCZpkUs%2bkB4Wg9KEPLxkr0NLrgmW6BQ8HTqHAhBOQY6WZ/Dfs7cw2BuC6Jmh4TnQ2OdjY99h9L78DlINTbAV0xhc7Ba3n2ckWVPC8om0QTJOq4mdv0zcnmf9vEKz%2bjuhVxTAYE8zkwr0dKbgIASw/BNSiij6s4k4OXxwNCFKNuard0UBKaoC0hCsloGogDbLQXhqYhxSwlPQnFWCytRidBWWUjDKMJ8Gok7qDF6610Tv6WdnIJBMcOS4cPkeJs8qUDpDLD03CTOTbcgyt2DB0pdRXr8MJVVLkG1thVvjQou2AqU0i%2bhLHJRxImjm9mwT4pzxfI2ignyNlbqXQ/p/IfkOm7xBNT7JPpWBmGBqho4mr9kYHRQlG2KMGT%2bbNpUkZH2SH68qINivgBS/CnwERtBs4EwpliDUpGpQl6ZBLYGvGzOMcKdphfwIyv5o6hocBP47RQXxiq9QGQRTO02jNvfiH7ai/ZlXEJ/jRLapEZk5dhnBNUQ2N9%2boZryUjNvqzzgffDgY7AEciNwCszoNeoQ0y5/buslSJSN%2bQHh0pmyGwdkfTfIfQzKcQI7vI8vXigKGSmKoG6ilQJt/fMwMRJDRVSfnwhaTjok07oYEh8Mem46qpFyET47BY/QZ7v%2bsNg46fxebqaKAGKX8xkchikzT5JoHvbsD0akmzIwvQkPHCmzb2Y/WjqVkYl6VbLkYmpEHG9Xc9NQGfTMAtzuLKnl%2bnwPjC0p2nhEBE8mQRqtZ961jSc5DmaH6nJQgimBfGNrsHHFuli3/jZQOGWdoSBzKibCJap3VNHH8LFiiEmGOnUvPUf5%2bHD1fUU6SXPvUwINVYGg8tGWNWPn6FjQtW4%2boTBciUmiCLPCgffkreHPzThw8cQ7Hz13GO1v7UFnbJoMOtzSeaE2q07PhseStYoBVApZ8DnlUka5UjDKLOlJAyNNzFbJqhlmGEgzKjmSJSPivg6Jks8q1svJIzJsfRRhBg1FiRBYq6fRXEJkg2Q0LjYOOOwOZbMgUnh1ipXyU2k%2bS7/U9bwSpY2acBoUVi6F1dSI2w0Lvx2Hi9DQUOrrRsWItpkWmIT3PCldtO15%2bfRMa5i2WYzwf2qS%2biSifcH1u7zM8XjkIfMzXGZ1E3iA%2bEeAjHkjEpa6HbYiz6idOgRglpaIGhAPgAwXBF4C0WdlU9zrUZhtEAfHTk9GabYEzVSf1HSjzQ5yfPAdijEhfMUY%2bI0wIS8akafF0vgjD70eEyGBlr12MN7YfQBFtPiYugw5kRTK/MDnu92xyRjXjJaQIyb5qfL7sc82LB9C5hgPAXhHgy4SS/SSRtZDl7D4QBCI//FpVhbJxNQBB0YidkYbFNAc46Ej8BJ0bosOS0JVnQX5MDkZR2YwjBQh5KgEuB/YSXkeKMUaJQY6g0%2bGY4EhRxAg6KP3uyVAUW2uw5eAZLHp2LZmhXo64LGUmzWcWH0khXeKRX7mZLP%2bgoww/lZL9EluNrDzzcLsMkOzLIJIoZvcUyZ8J%2bYj7WuPDrpUyUEqAMZoUEEIe0EgjcAoNU78fG4FpITGoTMrDVCqFUfS3SsdIVMlT0CkQ7Dkc3JFqOSmBmClB4deTw%2bKQQTNEfdezqG5dSgSUfp9TUCLm5/ufn02td/YBDoSv1/P7nHW%2b5vf5t06%2bLiAFBbAkfdnnTXEAfFkVsmJQyvVo9Xq0/364uDbf42yNJhMMpEmuNC6baj8Wj3EAaLXF5WA83R/DCpioGGEwtVRf4Pn7mbQSxCg1oBFy70n2hah0ce30TK0YF7u/mBkFge9rSdrKYa5GGXPl0OOVo7zSATwUNLf8pCY/%2bZEC%2bH0e%2bQP8m5iiSlHNgI%2bgr%2baVa6UkFOKREgjJFMufNhxEk11hFJkgDVYTJ0bjccrgzCnxaCMDNMzJlS7BAQhUVeDzAV4l8GqAfeT9yqL7U2ckiWmZ7VVCvoBGeP51h6950OH/VbLMTdZqCQBL3/e/DiZt9GWfSPPK6uBzT0CQ2uoUKc7xb4Az69uQj%2bxIlnvgUHn4g0Xr4089jcnUwlx0iPKkaBBCkn%2bCnjGT5oLGdA0KoufS30YNa6nx8p3%2bdkj35fnqd/v3wXugQD5Jh6ew8FRkkLnm0bSnDD4WCYDB7JKf6TgAHAjuADqp/Tol%2b6r5Se0blFLgMhAFyHSnGpJickOkR6mtbuS4SLXuZw2Znlxz65opxsX3nqTXc8i9jdFpMlA9QffCpyZibpjS6wPVQ4%2b0QnWq5PqXa%2bpA/u/l5/Iz/SarKI7vhUyLg3KAsyObyHNLK6Cenp1X4jc%2bzric/uhaMi4/gngl43qzRxTAB0CZBHkzQWoWuN58Ne6Tn1L7kWJ2fHgRUKsaOyFazg%2bBhHEk9%2bAQPj0mYtLUJERRpqbPykTo0yky3UXOzsG0iEw5YTJhn/Gy4oYbIf/AopCfKeT9ZqiWAV%2bz2hJptOaJjhXAk2AujcA83Rlk3K2kw1Gl/LjDKmAF%2bEyQ4QsQB4M/GxAek4cZUdmELDwdkSa1No0QMTsL4dEZmDErDbPj8xCbmI9ZMZmYQ2tyuk7W%2bOQCpGcZkZapQxQddTm7s%2bYUQEv1lUbnAZ7v%2bbkxiRo5MI1T5S9K4LlDrf9x9HccCA4I/7bo6zJ8zVnnoDxB15wgViUnIDYhV8qA639utl4OPvyDrULMo/y7j7KsNSr/4crX2JRzBL3PyuFJkFUUYLDwyagKGTkmIZSQUihIz9JTrVlFbjkUXb4u0pXJyq%2bL5WFl8rCcAgsNLkSIPKDYQPVY4qUzQzImkwIiYwuJYKK0SJ/X8OCj/ACizB1ijlSCrEY2Q1mDlVWUQfcmkLpCnk6Te6Np3khI06sSd/qPuso/dxzSGeZm6zA3Syenwex8E1LSC4m0VQ5MyWmF5B0m4mLG/wE9Q8SDaRYP3wAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"562\" alt=\"Highlighted Object\" data-srcset=\"/assets/static/highlighted-object.ebd9f33.f1915bcacda483750905f47420e62088.png 562w\" data-sizes=\"(max-width: 562px) 100vw, 562px\" data-src=\"/assets/static/highlighted-object.ebd9f33.f1915bcacda483750905f47420e62088.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/highlighted-object.ebd9f33.f1915bcacda483750905f47420e62088.png\" width=\"562\" alt=\"Highlighted Object\"></noscript></p>\n<p>First lets get into what we have to add to the PlayerCharacter as it's pretty minimal.</p>\n<ul>\n<li>We need to add a variable that is populated by the InteractiveActor the PlayerCharacter is looking at.</li>\n<li>We need to add an <code>Interact</code> method that is called when the interact action key is pressed.</li>\n</ul>\n<p><strong>PlayerCharacter.h</strong></p>\n<p>Where your other properties are declared:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// The InteractiveActor that the PlayerCharacter is nearby.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadOnly<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AInteractiveActor</span><span class=\"token operator\">*</span> InteractionArea<span class=\"token punctuation\">;</span></code></pre>\n<p>and then later down where you declare the methods:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Called when the \"Interact\" action is used.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now in the cpp file we have to bind the action to the method and declare it like so:</p>\n<p><strong>PlayerCharacter.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Called to bind functionality to input.\n *\n * @param PlayerInputComponent An Actor component that enables us to bind axis events and action inputs to methods.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span>UInputComponent<span class=\"token operator\">*</span> PlayerInputComponent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">SetupPlayerInputComponent</span><span class=\"token punctuation\">(</span>PlayerInputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// When the mouse is moved we turn the player.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>AddControllerYawInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LookUpDown\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>AddControllerPitchInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// When the \"Move_ForwardBack\" or \"Move_LeftRight\" axis is used we call the methods to make</span>\n\t<span class=\"token comment\">// that happen.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Move_ForwardBack\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>MoveForwardBack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Move_LeftRight\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>MoveLeftRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// When the \"Interact\" action is used we call the `Interact` method.</span>\n\tPlayerInputComponent<span class=\"token operator\">-></span><span class=\"token function\">BindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Interact\"</span><span class=\"token punctuation\">,</span> IE_Pressed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>APlayerCharacter<span class=\"token operator\">::</span>Interact<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * When the player presses the interact action button we check to see\n * if `InteractionArea` is populated. If it's not populated then we return\n * as there's nothing to interact with otherwise we call that InteractiveActor's\n * `Interact` method.\n */</span>\n<span class=\"token keyword\">void</span> APlayerCharacter<span class=\"token operator\">::</span><span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>InteractionArea <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tInteractionArea<span class=\"token operator\">-></span><span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>So all we did above was use <code>BindAction</code> to bind the interact button being pressed with the <code>Interact</code> method being run. Note that mine also contains the bindings for turning and moving and if you used a different Character script yours might look slightly different but it doesn't matter as long as the interaction action is bound.</p>\n<p>Below that we declare the <code>Interact</code> method which checks to make sure we're near an <code>InteractiveActor</code> and if so we run that <code>InteractiveActor</code>s <code>Interact</code> method.</p>\n<p>So now we head on over to InteractiveActor where we have to do the following:</p>\n<ul>\n<li>Set the <code>InteractionArea</code> property of the PlayerCharacter when they are in the BoxCollider's trigger area.</li>\n<li>Define what should happen when the PlayerCharacter calls this InteractiveActor's <code>Interact</code> method.</li>\n</ul>\n<p>All of this takes place in the InteractiveActor.cpp file.</p>\n<p><strong>InteractiveActor.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * When a component enters this Actor's BoxCollider trigger area we check to\n * see if that component belonged to the PlayerCharacter and if so we start\n * the timer that runs the method that checks to see what the PlayerCharacter\n * is looking at.\n *\n * @param OverlappedComp\n * @param OtherActor\n * @param OtherComp\n * @param OtherBodyIndex\n * @param bFromSweep\n * @param SweepResult\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">OnComponentEnterInteractionArea</span><span class=\"token punctuation\">(</span>UPrimitiveComponent<span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> AActor<span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> UPrimitiveComponent<span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFromSweep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FHitResult<span class=\"token operator\">&amp;</span> SweepResult<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if anything is null so we can avoid a potential crash.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherComp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Try to cast to `PlayerCharacter` to see if it was the PlayerCharacter</span>\n\t<span class=\"token comment\">// that entered the interaction area. If not we can return early.</span>\n\tAPlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>APlayerCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OtherActor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PlayerCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set this InteractiveActor to be the value of the PlayerCharacter's</span>\n\t<span class=\"token comment\">// `InteractionArea` so if they press the interact button we know they want</span>\n\t<span class=\"token comment\">// to interact with an interactive object in this InteractiveActor.</span>\n\tPlayerCharacter<span class=\"token operator\">-></span>InteractionArea <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create a FTimerDelegate so that we can pass the PlayerCharacter object to</span>\n\t<span class=\"token comment\">// our `LookForInteractions` method.</span>\n\tFTimerDelegate PlayerLookTimerDel<span class=\"token punctuation\">;</span>\n\tPlayerLookTimerDel<span class=\"token punctuation\">.</span><span class=\"token function\">BindUFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LookForInteractions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PlayerCharacter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set a timer that runs the `LookForInteractions` method every 0.1s which</span>\n\t<span class=\"token comment\">// checks to see if a Player is looking at an object that can be interacted with.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTimer</span><span class=\"token punctuation\">(</span>PlayerLookTimer<span class=\"token punctuation\">,</span> PlayerLookTimerDel<span class=\"token punctuation\">,</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * When a component leaves this Actor's BoxCollider trigger area we check to see\n * if it was the PlayerCharacter and if so we stop the timer and hide the notice text.\n *\n * @param OverlappedComp\n * @param OtherActor\n * @param OtherComp\n * @param OtherBodyIndex\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">OnComponentLeaveInteractionArea</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OverlappedComp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AActor</span><span class=\"token operator\">*</span> OtherActor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UPrimitiveComponent</span><span class=\"token operator\">*</span> OtherComp<span class=\"token punctuation\">,</span> int32 OtherBodyIndex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Return early if anything is null so we can avoid a potential crash.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherActor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>OtherComp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Try to cast to `PlayerCharacter` to see if it was the PlayerCharacter</span>\n\t<span class=\"token comment\">// that left the interaction area. If not we can return early.</span>\n\tAPlayerCharacter<span class=\"token operator\">*</span> PlayerCharacter <span class=\"token operator\">=</span> Cast<span class=\"token operator\">&lt;</span>APlayerCharacter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>OtherActor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PlayerCharacter <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Set the InteractionArea of the PlayerCharacter to be a nullptr so that</span>\n\t<span class=\"token comment\">// they can't interact with this InteractiveActor when not in range.</span>\n\tPlayerCharacter<span class=\"token operator\">-></span>InteractionArea <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Stop the timer that checks for the player interacting with objects as</span>\n\t<span class=\"token comment\">// the player is no longer in range to do so.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">GetWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetTimerManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ClearTimer</span><span class=\"token punctuation\">(</span>PlayerLookTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>So what we did above was just set and remove the <code>InteractionArea</code> for the PlayerCharacter when they enter and leave the BoxCollider trigger area of this InteractiveActor.</p>\n<p>Now finally to the <code>Interact</code> method. This part is highly customizable and we'll go about a couple different ways to do this. Since we're having the PlayerCharacter interact with a drawer we'll just have its Y position change to simulate it being opened.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * When this Actor is interacted with we check to see what object it is and\n * perform the interaction for that object.\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ObjectCurrentlyBeingLookedAt <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If you only want 1 interactive object per InteractiveActor or you want to do the</span>\n\t<span class=\"token comment\">// same thing for every interactive object you can you can just check to see if</span>\n\t<span class=\"token comment\">// `ObjectCurrentlyBeingLookedAt` is null or not and if not you can do the interaction</span>\n\t<span class=\"token comment\">// logic like so:</span>\n\t<span class=\"token comment\">// FVector CurrentLocation = ObjectCurrentlyBeingLookedAt->GetRelativeLocation();</span>\n\t<span class=\"token comment\">// ObjectCurrentlyBeingLookedAt->SetRelativeLocation(FVector(CurrentLocation.X, -20.0f, CurrentLocation.Z));</span>\n\n\t<span class=\"token comment\">// Otherwise if you have multiple interactive objects you can check their name</span>\n\t<span class=\"token comment\">// and perform a different action for each one.</span>\n\tFString InteractiveComponentName <span class=\"token operator\">=</span> ObjectCurrentlyBeingLookedAt<span class=\"token operator\">-></span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>InteractiveComponentName <span class=\"token operator\">==</span> <span class=\"token function\">FString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DeskDrawer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// If the PlayerCharacter is interacting with the desk drawer then we want to</span>\n\t\t<span class=\"token comment\">// move the desk drawer to that it looks like it was opened.</span>\n\t\tFVector CurrentLocation <span class=\"token operator\">=</span> ObjectCurrentlyBeingLookedAt<span class=\"token operator\">-></span><span class=\"token function\">GetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tObjectCurrentlyBeingLookedAt<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span>CurrentLocation<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">20.0f</span><span class=\"token punctuation\">,</span> CurrentLocation<span class=\"token punctuation\">.</span>Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In the example above I included a snippet that shows how to implement this if you only plan on having 1 interactive object per <code>InteractiveActor</code> or if you want to do the same thing for every interactive object. If you're using an array of interactive objects then you want to take the second approach and check to see what the name of it is if you want to do a different action for each object.</p>\n<p><strong>Note:</strong> Make sure you set an action in the Input map marked as \"Interact\"</p>\n<p>So now if you compile this and hit play and you go to desk and look at the drawer it will be highlighted like before but now if you press the button you set for interact you'll see the desk drawer being opened.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 573 390' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-5f447820ee3f988d9f06013181520196'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-5f447820ee3f988d9f06013181520196)' width='573' height='390' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAsCAYAAADVX77/AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAalElEQVRo3q1Z51sV97bmL7jPPSliAwWNNYkNRSxRQaWJSC8bNhvYnU0vmy5NEAN2MaIxRrFE0aixm1iCXbGgKFiwG2Ny7un3fnzvWmtmtnrPeZ775XxYzwwzs2fmfde73rV%2bg9vT538ExzOJ//rnePF%2bPP83htxTnqO8w9NnHL/jCcdTJfgYX/fi5Z/w8tWf8eqXv%2bDV67/il1//hte//h2v3/wdL%2bkYX/eo71f09L7Eza4%2bdJy/hRu3HtG1f5NzD%2bnco8dv3kbfGznm9paAfz9wBaBCroB7/jbkuAaMAPxCoF4zqDcKqF/f/EOCzz0mInrvv8LtO09w7fp9nO24icPHzmN3%2bwls/vZ7rG3ZjiVLW1Bc1ois3MUw25xINebB7ijFps3tuN39VEhjQh8%2bei3gFRJUAv4/8P8yNGDPlay9C4rBa9n65de/4tff/o7ffv9vvPn9H3jzGwP7u4B9/vLPkoXuu8/QeeMBzl%2b8gxM/Xsa%2bA6fwDQFbteZbNCz7CpVVy1FYXI%2bMrHJY7CWwZVbA6ignoCUwWp2uSDPlIyUtmyILhvRsJBsciNdZYM8sw5at%2b9F977lC6JPf8ICIeE8B78Wzt3JUQgH3/B0pcsYYyG8E6vc//o%2bAe/3mb3L8BZ1nhvmBN249xLkLXQTsEvbt/wlb2w6g5asdaGxqRXXtalTVrkFZ5XLkF9XDkVMFe1aFAGRwKWk50KcymBzKaC7SzXkSRksBbI4yun6xEtmVRE6F/JYJ4ms50sz5dG0hDLSfZMhGvrNeVNNDanrx6i/oIyLcWBYKuD/Ji7/S5EjgOFuSOdqyhJ4TeL7%2b/sNfpL4Y2PGTlyRjO3cfIznux%2bp1bVjWvAnNKzehrmEtCksa5WUZjIGCM8Sgkg0cmQQuF5aMUgJdjpyCGopaZOcr26y8ajpXLIDfC2shTBRWuq/JWkSk5FP28wQ0k8XPMBhzYKJS4HtrkWYuhD4tF0X0TvsOnMa9nhdwYyNh8H2Usd4HVGfdT3Dpyj2cOtOJHw53YNee4y5gi2tWoaCoXthmptNMBfSwXCQmZ8h%2bBmXCRJmra1iFnbt2YPuOHSgoXkIPLxN5MvB0elGrvQhZOWUoLKpC5eIGrFy5HutbvqFMchbLJawZJRIM0GQrkuxqwc9R9qkkMpSMs%2bzfDX1qpkIwnTPKPYolzPTeBmM%2bEZWP3II6uC1dtgEVVSuQV7gEuYX1xH4dPaCKMlIJc0Y5/bhEQJntpSSjLCQk2ZGodyCBQHPwflIKPSw1m2qtHNm5VVjWtAbfbNmCDa2bsHrVemz86hvs2LoD3%2b/eg5NHjuDCmdO4dfUSHnR34emDHrzou49fXzzBnu/apXY1qaeZctXIE2Nj4C7w9CxWDW9ZCSz1FPqtPi1Lal%2bLpJQMISLNXCBJYsWlUHAykui4W2SsEdHxFsQkWJFuYaYXU/CDFktNZuZWixR5nx9ituQjh7JXWlKNupqlWNW8Gps3bMSe7dtx/OABXPjpJLZva0PL%2bg1Ys7aFwP6Ilw/u4GlvF148vEtxD88f3CPgFPfv4QkHkfDkYS/evHyG3bvaFaWQrDUiUlUi0rn2GbSqBN7n8rI6SkUJXPMpQmCBKI5Bp9M7K1FESsmHLoWMMckq5sgEuWmZjKfMskQyxIgqXaE9ZHfbDgJ3HJdPn8CtC2fRc%2b0C%2bm5fxZM7nXhMwdu%2b29fwpLsT35H0V65agxUrVuPHo4fQ130dvbeu4X7XdTy4cxOP7nbh0b3bFN1CAKvg2aNePCMl/PH1c%2bzd004gMonwPJcC0sxKsBK4/JgMBplK51g1HCz9JALI56xU8yx3RfpOKQMOxQdyiAArdHo73HSqfFPS6UZGlkieGAUfY8knUzbidDYc2duO5/duoPf6Jdy/cQk9nRdxj0iQ4H3tb9reuXIO7bv24MzxIwT%2bCh4SMX13r%2bPxvZt40tOFPgL/7GE3Xj9TlPDica8Q0Nfbi947vbjf/RDV5Xswf249KZDanqPclXmbKnmt7qVLqK0vgTKb6XAimWSfoM%2bQ1sgEMHBWAAcTwFuDkXFmw83i4BtWSLaZGQabkGwXY0ukm3CdxCRY0Lp2PR51XUE3gWOgPZ0X8ODmRSJDAd9z/SKRc5Guof1bV/FTRyeuXLmFa2cv4W7nVdy4cBW3r3bi3o2buNpxA3u%2bvYz2bZexqv4C1jdfwMqG89jaehlVRWfQXHcO2zd2oap8F5We0vcz1LrXap%2bDJc%2bZT%2bJap2y2rtmIB9fo/qc6sKymiQixiUoYMJOhEZDK84IkPA9uViGgXB7CmddMjsErBucQAqoXL8GjW5dx99p5Ac9gr3ecx53LF6gELuFhl0LElVPncHTvTzhy8DTad3TAaf8R965fwbKKM2goPY11jT/j9OGraKo%2bi3VfnsOm1RfwTcslHDtwA50X7%2bHK%2bR70dvfh2eMn%2bPPvr7Br1z5pYa6ap6GGg1XApZlM/T2DusqPB47idc8DvL7/EF3HzmBdVg1SGAepQQBTchkL42Ji2ANiEkyaAjQCWAFW8QMmgpWgox%2bwKnIoE7cvnhXwD29dwIUT51BqP4l650l8vfwUKjJPYEnREZTYDiJLvx8NzsP4%2bUgHGkpO4T4p4ujeSzi0%2bzKunL2Bxz3d5AP38JKk/%2bppL36heNJ7G71dV9F1pQPnTx7FkT3fYfemTWhtXg5HllYC5S5P4rCQ%2ba1oXo%2b7l67ht4d9eN7dg5Obd2OZLh/FuhxlQlSlz9lOJDyxBDqOwMcmmhETb1IUwCRwr2ZZMKO8TTUVyI/ZSNhh%2bSX4xe5fZ9mfw7ljP6Oh%2bCRO7D2DLatPo6XhBG0PYmfrIRzadQQXfzyLx3dvUP1fpyCDvHsND7ou4ebF03Kfnw7uw8Htbdi5YQM2NTVjXd0SLC%2bvRH1BEWqy81CVlYPFjiykpVilhi3qTCCOTtJPoj5fTu26%2b9RFvHnUh0edt7CnYT2WxGWjPjEXDjPJ3UVAoUv%2bXNKxCWbEEQFRsWlsglkidc56mrTByn8K7r08mh5ubyenvyLyf3DzMh5QSbzovYZHty9RZzhGpBzA6R/24af9e3D20F4c3tmGvZs3om3tGrQ2LsPamjqsrKxCc2k5GouKUZ9fiLq8Aona3HzUUFQR%2bApHNhZnZaOC9q00CXKbUwapTCXSaMAhj6pLLMZSXRnaqluw2dmI2phMyn4eylKofao1n64SwOC1YIPnVrgoKgVusYlWkT1v%2baSNAFszlZJQolwMiOX0zfpW9F47R3V%2bHGeo5/%2bwfQe%2ba92IzctXYG1tLWWxAmtqi2ifQBEYLWollKyW2TNQZLYgx5AKe6IOtoREFBjNVE4OKqNslBP4Ujtll/4ucuSKzG2OEkpEmYy4LFt%2b%2bWJdIRoTy1AXX0zAc1Efn42lSXloSMyBhVScbnO%2bB54VzVuZAnkgoi1jJgJsUuNxKgH2f0EAm46ZjKisoBzramrQVFaMTcsKsH1NHna2ZKN9Yza%2b/yYbJ3c6cffoWry8uQVbV1agIM2CbL0eGQTUEhcHU0w0jNHRSI%2bKQlpUJPSLIqBbuAi2xCQ4zVYCn4XKzBxRQInFhmybMs9n0/jd9NVOfPf9cbR83YZCKoeGOAZbTOFEIwPX5WIZSb8kiUgieTNZWsY1%2bStEFEqJc7DyXQQwG3zSJsOPAv7d%2bdtGkZ1RgErKylcNBTjRXoBVVTYsKzFRZo0oNKehgVjdbKvDTyu/QuehLynLBphiY5EWGw99dBziF8UgYkEUguYtxKxZoRj72XSMHOOHuNgU5KaZUGK1E3iFgPy0dFiMmUgyOhEcn4eolCJYCxrR1LobrZUr0BBlRWNCtmRci6VEQjonM8mCeCKB611pecpcI52NjJDdPy7RgvBIvVICHNzqmABRgEMZNtgAlempAHq6SXoqv2AuSTwPW9YVQR9lgVlnglFnhpFkWZmYiSUxDtRGZOLommLYzSmYNiMC4yfOwYixMzBkuC8GDpmEfoPG46MBn%2bGD/mPp7/EIi0iG0WBBYboJZRkOIiIDuQYj8nLLEEagkjOqUVregLhkB2Jj7aiJycCyhCwsjc9ygW9MyEE51b6OQMsymiJVlTpPfez%2bMfFGcX82PyYhPDJFGYV54uMZQLoAMcXTIQ9C3Arjk2zSNhKSbdAR2GKrA0vys3BkVwVK8sqRqrPDTlNZfhbVIjG8QkfmFGHBnrpKlDn1%2bHAggR7qI6D7e0zAAM9JEkzEAM%2bJ%2bHjg5xjvE0DZscKSakQpZb0gMgdba1vw8Eon6vIbUFWzFodOduDrHXtRQyXZRMAbmYB3FLCUIoucP5Vqnqc/1%2bSntkBu51Gx6Yr7x6WLlyyKMtAckFGmzAEyCeYSUyQfkhEDl6B9HQ0T80MSMHz0TJJxAsptmTiwtYj6/G60fLkCG8kEt9Hip6WuCaYZYTBMDkRTgQWNtYlCgPeoL4iEye/FgCE%2bQoT74PF0zaeklBDYYzPhjChASWQRzu06jKsHf0RxeC4OrNuGvW37sLXte6zNrsbS6AyFgEQmgMyPsl%2bfQgs1/irkWgARGWr9sxJ4n/Fw5pmI6DgjFkWrBAgJ6iTI5RDvyrxVVk/BYUnwGOaL/%2bj3GWbPDEFVZh6WlifjwJYarKqswLrqQhzZ2YqbF/ZjeZkO6xcn4PbJpTi7%2b0skRpjhNWo2/d5PAT1EBa%2bGu8dEjBw%2bDcWOGmxpakO9pR6FYTm4uPswTrcdQMY8Ow6v34m/PO7DsY3bqbwsivwpGhKUEmhKKkRVejGBVGYXBqwAz1eHoHwhgLdsfKwALoOI6FS4mZkArvn/QwBv2TTCIgzwGjlDXvzjwRPhO3kuanMKYEmORtt6A9Y0pqBthQ2HV5fiq0Ibmq0WbM4rwv6KZdhXSgMOdRDvkbPgOWIWBnv7ERHT4TGc/OCTL%2bBB8cmoOTCmUbk0bcO6747iRMc17N9xBJcPn8ato6dRtJAGIl0xbtJ4u7t2lYsADfyy5EIs1xfBSWaZwp/ASAUKAU5qd7wkVgngjze05eCSj4hJlRAFmN9TgMUFPjw6DcPHzEJ/Aj/Iy5cImIAxn86knp6LyOBFZGo%2b8BoxHTF%2bC1G90IKq8AyUL7BhcbgNNZF2VC8yoSIiFXFBCfhw0ERSwhx4j54L7zFz4TU6AJ6fzMK4qZEIN1YhTV%2bCWudyFFa1oGnz9zjy81X00GzfvuE7ZC7IRFkUyT2e/CfaRi3QITX/pb4QzXonlqc4YdbTqjYtx0UAAxfpmwpdZsjBGHnVm6DnNY6ZFGAvfYeAPOkGvAaIjDVh9LgAuHtSzRJ4VkA/ImDIsCkotdGCKTwG/9l/HMaMmknjpxUlofGoDE8i0HoiIBk1i1KQERBB9WqEMzIdfxg4Hh6kAO8x8zB0lL%2bQ4DF8Jj7zpVkgsxE/HDqFp9duoOvkWWxZvwNFFWtR3rQFh85ewcGjHSilTFcuMKA2mtofy56y3kytsTm5CLl66v0JRnF7Tfba4JOiyl8Z75VvgjwIJafmyL7iAeqSOJkOMCvR8WZ8OnE%2bZX4KBg%2bbhkHeHH6y9aC/HckGpETG4yOPSfh05DRUhungN2oqJpIiKkLj6O8k2KnPDyKHD/xsBprpxWZPDRUVDB0520WCBP09O8yKJet24dSlm%2bi5fRevbtzCw46LaN%2byF7nFy7F47U7UrNgGZ7hRFNBMGW8mAlj69ngq2WQrmVq6fA9gd9cyzuMwE8BqYMBMQrysdjNI/mmyJhAP0L758QX8%2bdhvVjTVrD/JlKRKL8svzPtDRsyWuk2JpKmOhpuPPKcgasYiVBHg8aP84D9lHgzTgmCbHY6qmEQ4aMCZPGYGqul8sj8pZuAEIZDvpRHgOeILInk6hn8ehDhTBTaRD1zqpJVh5028unYd98%2beRz6REOlogpXG36U0Byw3FAv4LJ0DEbGpSCTgkVTPTADXNQ9ACuBcGfJcgKkFLozQSwcIW5REiTbCLZFqh52Rvwsyc8FUt15jAuE9dj6GfRokWy/JWIC8sAfVrZ9vIGZMJYV4T0fwlBBkBYQjc6EeS/R2%2bAylljZsAsLH%2b%2bF4fSPW5ZTCQNfO/NwfH5KJDhw6RWqfSWVC5Z5kil6j/TFmWiIWJDlRsvRr7Dvegc7OLjztvIH9W/ciLL0WJkMZmqj3s/wzkzMRFa/09USaUXhm4eGH55hU9bMXT3vc6znTvJXhhxZArBIevsQDWO6RMenS7/2DdAQ4UABr4L3HKAR4qbIdMnIOBn8yG4OGfYFBVMNjyQNssxagJsqIkjByVh9/zPt0KqJ85tKkZkMLqao0NAHjRvjhY/KTAZ4%2bknFNAXw/JmDkhBCM809FUf0GAv8zctkMN7bj6q1utH69B6EGWpVGUf%2bnWcGW5EBSuvL/BW2B89b93/Z9VkF0vEkAszJ4n6c/VsACUoB8EOGvwiyROfNipVUpmQ9WpM8ESAQq5aCG8vJz5HovChNJviLMQOaXhuoIE0oX6NEYY0XZghQCn4KkmeFioP2JgP6e3P9JBZR9r9Hz5B58P/YXLxqYZgYmoHBxE6qaNmB6iBHZlWthdq5AjKUWXxY1YHFeFVJtRfJtgCc8nvq4dI3alus%2bPU/qPkV1/UgafJgAHoBYATwDuAjggWfO/FgZVFjewz8LxlBqUYoCAl0loKmBX1YjwYvKYiDX7/CpMM6JgDMoDmXUDbLofsYvwlAcHI%2bCoHgMoVH4YzLM/hQDqATcaTuIVTBSuReXhGKwUzHJdz4MtA7R5y3DpLkGzAwzIyKtAlZnE3YfO43DHVewYdteqe907QOniRXwlgAGzQbIps6jcAKtITjrETT5hVMpMBkLxAOIgLn0gl4jZ0q78ySD8xrzVgEK8EBXWTAx3mODxA/kxSWLAVTbkzDMyweO2Qug9wvAII9x%2bNh9DFJ8/ZEXFINhRNCHA8fJPMGdZaCXn5QBx0DqLv1pIvxo0ASM91uA%2bnXforX9BALiCvH5zDhMD89GUUMrAkKTMJ98Jo5MOstZJ%2b2OwRrUtqf1fd7XExE8CCVRCWgdgL1hIcmfx99F0UxAsmKCHjSGMvgBQ33F4Tnz0qffAe4lPqAQI5nXTJHAs5G5E6hPKHuZc%2bMIcBy8vSZi2NBJsM6OREFIEkbRJNmfQHOmxQDpvvxblj%2brgYlxp3VBYBwtyIrWYJHBSdfMphXjGIyflYj6De3IdNbCb3qQuDcvzN6VP3cxaXdq/Su9XwHOBPBXL54BeMDjbsA%2bwATwSOzGD%2beMcH0OJlNTDDBY6nMoT22UcQbPLz2EwDNBck66QoDImH83kBY1%2bSF6lJMXeHv7YhhF9aI0OAJ1dP9pYnaiGLWMhkqLnS/Esyp4TTCUPGD05IU0Ok/DH0hBf%2bg3Bp5EXu3abdi87zhNb3ZydpO8OK9YlbrPly3LnsuAl%2b0Mlqc9Psb7TAAPP8rnv0wiMVm6AHuDG7%2bAOxsTK0AImE9AA97JeICqBPVvzjqBYQAiYSaPstiPtrovImAPiCJAvAT2JUVEIcQnkM5NJ6XMUn43in9PClOVxr4j5siTJt9n0DhaM/iKafajttnfYzxiU3OxYc9x5JQ1ypo%2bQnq%2bTQByhlnuWv1L1i1OmWrly4/8OyxbCGAvYMK48zEBshbQapKlyJn0Vs1PiFBflLcew7%2bQ82xWXLf9VOny1p1e9gMPH/hPmIeEaQvEE/rRkBTvF4L5kwLJKGcorY%2bHKTY%2bUUGASm6QKEBUQInQtv1IEbz4%2bnzSXERzH6eXjqLgcZdXcfxdkDPIZsfZ1kogOTVXCOCBjkEzETr50p0vBLA/8JZHfvkewA9zF3eeKs7MPsBSFbD0t/ZyfF7J1BRVMVNd0mUD8yZ3t86JoYVRKI3Iyvn46WEomB%2bPKWPnYBDNDlwuniPmuAjQDJWf9R4BQu4UIddr5HQEhibKpMf/y2PwbF7cvdjR2dwYpKz61Blf6p5Ai/xpy2aoAdfLOMwfgXJohM6A22DKjqc64vL%2bAK%2bp8iLuqiy5NBiMBlqpWV85rxDniw/I4YdRq8udG4uE6QvhPpQV4oO4qSGwzgqnBRO1OZI6q0gDPVQts/dUwM9US1IjgO/DC7FJU4NJ/mbJOptgJK/nydCYCAaWTvWfJONvvgBPJI8wqPXPx7glMmC%2bJirOJGUQQQOgm2ZGXtTnuR657pgExRsmqwpQjFJAS8eY6lIGX%2b9O8QHJ3n/cHIROnIt%2b7AE0JvuPD8CEUUTq8FnSLYaowJlwxV/muogYxOTzMz18XM91EcHPoGOjaZyeFxwnZcDZ5w82UdTfwyMNSrtTTU%2bvrml4Gozj/3DJRxCT/IaJC6QFG3sAh5vUNwHnl2AVaA/m0EArbeptD9fqX7l2slz7Ia38hpCUR9BMP5B8QjoDlZDnSHV8Vg3WlXmeI%2bi4ZrT8Hm8NeariLe94Am8/pCX16HH%2bkr1wme3NLlC8hI9nk%2bOPoCRx/q7B14UsTJQJkAefkIU6mQSDFsTLlo%2b5Ka0uUEjgLGjANOal/tWyeFv/Sllo55kEfuEBRA4bHmeawTGhLoK591PGFbIDXW2Qj4kiPgsRkt41V36OUgaT1Oco58aO90doeBK1NLsMNcoHHAdi5fO%2bRUAvjNSLy/N1TFBwWIJknK9nBfCqMJQIcdP6M7s9v9zH/PVWJcAFjsuCZf9Ofb5rhPylSBumtMxKRxmrAOX7K9s5igeMnvseKUNlrpgrv1HIVruL%2bmxRIP39Eb%2bbkDIZ08lwU2gYSqC%2bLoMQ1TkbHquCQfOYy5Nf8IIEIYCzH0agOevzQ2JFOXydm6dKAA85bIL9Ndb5we/4AJuRlmV3yZDPe56gtK5JLjBDOLMyJNF4LaD5u0KArCf4uEaEnB%2bjEqGSwEDdh7wtPS4pLr1PfUIxclwwvZcfZs/XyQDEbY/Njo1Q2h7Vf3BYomSaBx7OdCSZJYNmBbAygmi9wudYCaoJaiUw3cW8llkGqmXeXev7nH3OlEqKu6oUvm6Q2lWGk6Q/%2bTwIYyeFYrxvOKbOisb0AJ1MmvwsJmTIKH%2bXHzBwPsYJYZIHU/nwvWR2oOOfTw5F8MJUIiCIymwm5oUaxOiYAO4A7Paa%2bXFJsAKYiBAKzjaXAG%2b5/ucFx6gK0OF/AQETv59LwN48AAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"573\" alt=\"Desk Drawer Open\" data-srcset=\"/assets/static/desk-drawer-open.794a8e9.4007a5bdcc1220971e8d179d461b5b88.png 573w\" data-sizes=\"(max-width: 573px) 100vw, 573px\" data-src=\"/assets/static/desk-drawer-open.794a8e9.4007a5bdcc1220971e8d179d461b5b88.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/desk-drawer-open.794a8e9.4007a5bdcc1220971e8d179d461b5b88.png\" width=\"573\" alt=\"Desk Drawer Open\"></noscript></p>\n<h2 id=\"multiple-interactiveactors\"><a href=\"#multiple-interactiveactors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Multiple InteractiveActors</strong></h2>\n<p>This current setup works great if you just have a specialized InteractiveActor but what if you want more? Like if you want an interactive desk and a dresser and a control panel? This can be solved by script or Blueprints and we'll go over how to do that next.</p>\n<p>If you want to keep a pure C++ solution then we can achieve multiple InteractiveActors by making InteractiveActor generic like so:</p>\n<ul>\n<li>Remove the Desk and DeskDrawer meshes from the header and cpp file as they are unique to each InteractiveActor.</li>\n<li>Changing the definition of the <code>Interact</code> method to be virtual.</li>\n<li>Removing most of the functionality of the <code>Interact</code> method.</li>\n</ul>\n<p><strong>InteractiveActor.h</strong></p>\n<p>Removing the following lines:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// A non-interactive desk.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\nUStaticMeshComponent<span class=\"token operator\">*</span> Desk<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// An interactive drawer in the desk that the PlayerCharacter can interact with.</span>\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\nUStaticMeshComponent<span class=\"token operator\">*</span> DeskDrawer<span class=\"token punctuation\">;</span></code></pre>\n<p>Change the following lines:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Change this:</span>\n<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// To this:</span>\n<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>InteractiveActor.cpp</strong></p>\n<p>Remove anything about Desk and DeskDrawer from the constructor:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">AInteractiveActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n \t<span class=\"token comment\">// Set this actor to call Tick() every frame. You can turn this off to improve performance if you don't need it.</span>\n\tPrimaryActorTick<span class=\"token punctuation\">.</span>bCanEverTick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the Root and set it as the RootComponent.</span>\n\tRoot <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>USceneComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SetRootComponent</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the BoxComponent and set it to be a collision trigger and then</span>\n\t<span class=\"token comment\">// attach it to the RootComponent.</span>\n\tBoxCollider <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UBoxComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BoxCollider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetGenerateOverlapEvents</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetCollisionProfileName</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Trigger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetBoxExtent</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">150.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the TextRenderComponent and add a generic \"Press E to Interact\"</span>\n\t<span class=\"token comment\">// message and set it to be invisible so the PlayerCharacter can't see it</span>\n\t<span class=\"token comment\">// and lastly attach it to the RootComponent.</span>\n\tNoticeText <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UTextRenderComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NoticeText\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetText</span><span class=\"token punctuation\">(</span>FText<span class=\"token operator\">::</span><span class=\"token function\">FromString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press E to Interact\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetTextRenderColor</span><span class=\"token punctuation\">(</span>FColor<span class=\"token operator\">::</span>Blue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetVisibility</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tNoticeText<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Remove any items added to the array in <code>BeginPlay</code>:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Remove any items being added to the array in `BeginPlay` so it looks like this.</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// Set the methods that are used to respond to when the player enters or</span>\n\t<span class=\"token comment\">// leaves the BoxCollider's trigger area.</span>\n\tBoxCollider<span class=\"token operator\">-></span>OnComponentBeginOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AInteractiveActor<span class=\"token operator\">::</span>OnComponentEnterInteractionArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBoxCollider<span class=\"token operator\">-></span>OnComponentEndOverlap<span class=\"token punctuation\">.</span><span class=\"token function\">AddDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AInteractiveActor<span class=\"token operator\">::</span>OnComponentLeaveInteractionArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Remove everything in <code>Interact</code>:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Modify this method to remove everything.</span>\n<span class=\"token keyword\">void</span> AInteractiveActor<span class=\"token operator\">::</span><span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>By making the <code>Interact</code> method virtual we can override it in the next script we create.</p>\n<p>Now go back to Unreal and right click the <code>InteractiveActor</code> script and choose \"Create C++ Class Derived from InteractiveActor\" and name it \"InteractiveActor_Desk\".</p>\n<p>In the header file for this we're going to add the Desk and DeskDrawer mesh definitions and also the <code>BeginPlay</code> and <code>Interact</code> overrides so we can add the Drawer to the <code>InteractiveObjects</code> array and then respond to what happens when it's interacted with.</p>\n<p><strong>InteractiveActor_Desk.h</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"InteractiveActor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"InteractiveActor_Desk.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Creates an interactive desk with a drawer.\n */</span>\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">INTERACTIVEOBJECTS_API</span> AInteractiveActor_Desk <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> AInteractiveActor\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Sets up the default values.</span>\n\t<span class=\"token function\">AInteractiveActor_Desk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// A non-interactive desk.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\tUStaticMeshComponent<span class=\"token operator\">*</span> Desk<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// An interactive drawer in the desk that the PlayerCharacter can interact with.</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>VisibleAnywhere<span class=\"token punctuation\">,</span> BlueprintReadWrite<span class=\"token punctuation\">)</span>\n\tUStaticMeshComponent<span class=\"token operator\">*</span> DeskDrawer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Called when the game starts or when spawned.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">// Called when the PlayerCharacter interacts with an object in this Actor.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The above should look familiar as it's mostly what we had in the <code>InteractiveActor</code> base script and this is just specialized for the desk.</p>\n<p><strong>InteractiveActor_Desk.cpp</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"InteractiveActor_Desk.h\"</span></span>\n\n<span class=\"token comment\">/**\n * Sets default values.\n */</span>\nAInteractiveActor_Desk<span class=\"token operator\">::</span><span class=\"token function\">AInteractiveActor_Desk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Load the meshes used for the Desk and Drawer.</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UStaticMesh<span class=\"token operator\">></span><span class=\"token function\">DeskMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StaticMesh'/Game/Models/Furniture/Desk/desk_desk.desk_desk'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ConstructorHelpers<span class=\"token operator\">::</span>FObjectFinder<span class=\"token operator\">&lt;</span>UStaticMesh<span class=\"token operator\">></span><span class=\"token function\">DeskDrawerMeshAsset</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StaticMesh'/Game/Models/Furniture/Desk/desk_drawer.desk_drawer'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the component for the Desk, set its mesh and position and then</span>\n\t<span class=\"token comment\">// attach it to the Root.</span>\n\tDesk <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Desk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tDesk<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110.f</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">40.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tDesk<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeRotation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FRotator</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tDesk<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeScale3D</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tDesk<span class=\"token operator\">-></span><span class=\"token function\">SetStaticMesh</span><span class=\"token punctuation\">(</span>DeskMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tDesk<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Create the component for the Drawer, set its mesh and position and</span>\n\t<span class=\"token comment\">// attach it to the Desk.</span>\n\tDeskDrawer <span class=\"token operator\">=</span> CreateDefaultSubobject<span class=\"token operator\">&lt;</span>UStaticMeshComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DeskDrawer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tDeskDrawer<span class=\"token operator\">-></span><span class=\"token function\">SetStaticMesh</span><span class=\"token punctuation\">(</span>DeskDrawerMeshAsset<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tDeskDrawer<span class=\"token operator\">-></span><span class=\"token function\">SetupAttachment</span><span class=\"token punctuation\">(</span>Desk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Called when the game starts or when spawned.\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor_Desk<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">BeginPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Add the DeskDrawer to the `InteractiveObjects` array.</span>\n\tInteractiveObjects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>DeskDrawer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * When this Actor is interacted with we check to see what object it is and\n * perform the interaction for that object.\n */</span>\n<span class=\"token keyword\">void</span> AInteractiveActor_Desk<span class=\"token operator\">::</span><span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tSuper<span class=\"token operator\">::</span><span class=\"token function\">Interact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ObjectCurrentlyBeingLookedAt <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Otherwise if you have multiple interactive objects you can check their name</span>\n\t<span class=\"token comment\">// and perform a different action for each one.</span>\n\tFString InteractiveComponentName <span class=\"token operator\">=</span> ObjectCurrentlyBeingLookedAt<span class=\"token operator\">-></span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>InteractiveComponentName <span class=\"token operator\">==</span> <span class=\"token function\">FString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DeskDrawer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// If the PlayerCharacter is interacting with the desk drawer then we want to</span>\n\t\t<span class=\"token comment\">// move the desk drawer to that it looks like it was opened.</span>\n\t\tFVector CurrentLocation <span class=\"token operator\">=</span> ObjectCurrentlyBeingLookedAt<span class=\"token operator\">-></span><span class=\"token function\">GetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tObjectCurrentlyBeingLookedAt<span class=\"token operator\">-></span><span class=\"token function\">SetRelativeLocation</span><span class=\"token punctuation\">(</span><span class=\"token function\">FVector</span><span class=\"token punctuation\">(</span>CurrentLocation<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">20.0f</span><span class=\"token punctuation\">,</span> CurrentLocation<span class=\"token punctuation\">.</span>Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This should also look familiar, we just moved the Desk and Drawer mesh stuff from <code>InteractiveActor</code> to here. In the <code>BeginPlay</code> we we add the DeskDrawer to the <code>InteractiveObjects</code> array like we did in the other script. The contents of <code>Interact</code> are also the same as before but moved here.</p>\n<p>If you compile and drag out an instance of this script onto the scene and hit play it'll behave the same as before but now you can create as many InteractiveActors as you wish and they can all behave differently.</p>\n<p>You can also override the <code>OnComponentLookedAt</code> and <code>OnComponentLookedAwayFrom</code> if you would like to have different behaviors for those.</p>\n<p>You can also choose to create Blueprints off the base class or even add delegates to know when the PlayerCharacter is looking at or away from the interactive items.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Conclusion</strong></h2>\n<p>Now that you have a working interactive object sample try to expand on it maybe by adding delegates or creating Blueprints based off of the InteractiveActor script. Don't forget to check out the <a href=\"https://github.com/robertcorponoi/unreal-cpp-an-in-depth-guide-to-creating-interactive-actors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> at any point if you get lost or need to see a working example at any time.</p>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/main.07cc2b7.3accf5496b2b93de4960753ddc04482b.png","size":{"width":860,"height":415},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/main.a67b0b2.3accf5496b2b93de4960753ddc04482b.png 480w","/assets/static/main.07cc2b7.3accf5496b2b93de4960753ddc04482b.png 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 415' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b86a1a9b8fc60896e442bb2cbe463cc3'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b86a1a9b8fc60896e442bb2cbe463cc3)' width='860' height='415' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAfCAYAAABXscv8AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAQAUlEQVRYw51Z%2b3Pc9XUV00eCwcav%2bIGMZethy9Zz9VhptaunJdnYQG0MuCkMcYFphtCEOA5JaIHGhEza0gTT1GTCwBBjg40s663VrrTa93slrR7G2MTQlsz03zg9936/39XKNtDpD2e%2bq939fj73nHvuvZ/vquDdd0fw3nujOHt2jHDj/XMTOH/eg/MfeHHhwiT6%2bqbQf8mHy5enMTwUwOhIUDE2GoJ7PIwJd4SIYmIial5jcLsFcXg9CUx6ickkpn0p%2bKcNBANpTMtrfxrBYBqxyAxi0TlMTUVw/Pjfore3F/v3H8Cjjx2DxxNEPDaLaCTD%2b1L8ToLvxeHhPsZeUcYRwfhYWOORuMZGgxgZDmB42I%2bRoWnCh%2bHBKQwNTGLwshf9fRPouzCOCx%2bMouDih%2bP46IIbfRc9uPSRF5cvTWKgfwoDl30YGpzGKBeaGA/COxGCzxvB9GQU01NR%2bKdiCEzHEfInEA4kEQ4KUoiG0wYYsCASNhAlyagSnUUyMadIJ7NIxueQIFLJBQo9jN/97m18cL4PfR8N4tf/9gbO/uFDzGaWKMKMImauKXtEQmmEuG%2bI%2bwcZh98XZ2wx%2bBijxOrzhjHlDWGSInrdwsOP8VEfOU1SEC8G%2bydQIMT7%2b0ziJumRIT/GRgJwjwXhcYcw5Qkr8YAvRsJxEibpYAIRbh4JpRhUGvGoIEPMKBLMWookLSjpeJavs8ik5jFD6DW9kEMmlcVC9ioW56/x%2bgnmZj7mWiJYVsWSz9NJa02%2bH5d9Mrq/xCGJCDE2iTE4HSMkZiZrMkwxhIcI4cfE2DSFmMIYhSgQ4oOXxR5icb9mfJwWco%2bF%2bOWwKumfWkleiEeFeFggGc9oZgwrG%2bQls0agRvCpxDyJEPF5fZ1KLPB9IW2Qn80skvCiKcS83pegYMY9hnDLMEWNz3KvGRVeRIiGU4pIKKkJCgUMIQI%2b4XCrCG6KUDBwOYDBgSCGhkKsmzDrO4qxMakr1pjWcZyWEmuJxZK0fYoLE6zdcDCDcGiGmDUxR3tmafUshRDM07aCBUUstrgCcSIRXyTJRRIikgbkb/ksGiUiC7wu6FoCY%2b05RTTC3hCeIeEZjUViktiCfokzryS8URKPsIzD8IxLcgN0OMubvaFgYDCOoeEEhkdTGB1LY2w8g3F3Bu6JGUx4ZuDxGvBOzrKZzbIJzcLnI6bn2MiybGTz8AfmEQgsIBBcRDC0hFB4GeGI4IqB6MeIRK8SH98GV3IICyIfK0KC8BVdNxji%2bkHZR/bjvv6sxiCxTPnmMDklMWbg9abZKFNskkkmMsGExjE6GsMIkzs0FMHgYJhNPcieE0CBEh9Pk/QM3J5ZTHjnSDbLxea56AIXJ/yLmBYEFkl2Cf7gEoMgQgxMggsbgYaFXOwTRTR%2bjTCuMUHiuiJuXr8Oxv3XcuvJ2gLZR/aTfWV/iUVikth8/gVMMd7JqSw5zJHLrCZSEjo6nsLIaBLDI0lN%2bMBQHP0DURQY5M2M34a8EJcNAkHJwjLZkBnQSsIG0XhS8KkikRL8MYdk%2bktgfpaQ15kbfH3D/OxG7t6bhQlHP9E4gqYohiBXKMaSJs0QYx4echJu7olZTbS4fIRuH6IYBWr5CSP7nnwBrMxL1r8k25YA0djKTMcThgCJ5KdfTzwHg2gkRCK%2bLGuYFud1aiLDOp5DgNm1BL6dCKEVIiytFME3Dy9dIfyEp/C1RMgJMGEJwC/KDbcKYIlwGwEsqyfyHXDdFMDAzWSXsUw%2bM3Md77/fp30mxH4ixAUR7qciMBYR9mYBjNK4%2buUusASQsrAEcFsCuG8SYDJfgIVlAYJLK0ogfJsSiMVvEiD16S1Qq6eWLa%2b25/uz2S/wzjsf4OWX/gmR%2bFVOCWaWokvTTM18ZjRPkrxZAKs/3CyA9gUK4PtaAcZvI4CWwPxKAaQLh79agGh%2bs7vFATeQyhgZT2c%2bQ5qk5LX1nlz9ARl5VzE7/99KOMx9rXIKMg4ptf%2bLAIGbBJB%2b5l3RC1YIwCbIOnN/lQOIryoBQSwnQH7Xv5ZDWEYiEaGIHk%2bMSJAUs8NxFeZ7c/NfILvwBQ9a80jwXj8TMNQf1M%2byC3/S7Ie5t0XeEODa/98B2gNSywKsdACbj890AKGjJlcCV1YIEM0bURKMZEzqWTI6M/ufmJ37Lyxe%2bR%2beHrkuT5fpxBW8deb3%2bPc330I2zeNwNIE4T29vnTmHV0/8At8/fBxPPf4cjj32DB%2bIjuLxx5/F6d%2b8x%2bN5RNfLzH6u%2b%2bTHIOSNJnglrwnmjUURYNJogssCpFcK4NZDz5zOTxVg2hyDpgNUgLAlwNU80lfV3tn5P5H0Z5oZccsEDyP9AwH84f0RnP7tObzyD7/Exd%2bfwdj5d3H2zGmcef1XeOf063jjtVM49cJJHNl/ELZdLrRWdqLT2Q1HSzdaXfvhaj0Ae1MXuvY9hB/9%2bFV8eNGrZTBDYcVlStqMS%2b0fWrq9ALdMAVOA3DnAY/YBU4BJXzZ3DpjOlcBSzgEWJNvvnR3B8z86he8%2b%2bzM8euwZ9Bx4BK72g2hh8I0MvrLGAXu9C0898hiefvQYnjx8FEe6utHV0ARXTR1a6x3ocXahvf4gDjqPoLOtF/aWLq5xP9o6DsHh6kFDUzvqGtvgbL0ff/0338W/vP42iaRUdIlB4ppmSU0HF3PkDQHy7C8HI491MLIEkOOvToJMTgBxgZZAvgusMhABzJOYIENbnnzhNRQVV6Cyuhk1NhfszfvQ1NKj5Jsc%2b0hgP/Z1HcTR3oPodjjR3eSA01YPe1UNaitsOPbw0/jZD17CvroePNxxFF09R3hfF1pJvsVFMZo7ud4%2b/n0QrrYDsFHMqppmfu8wfkjhz54fV1cm05/pVUhbyM%2b%2b8LMaoAgwzJMhBUipHdzmJBCVvGYPsPqA/zZlYCE98zle/Md/RW19GzN2SMnWNTJbDW0UoBMOZy%2banT2oZsCdTS7s3V2N4qI92LK1FPes34a77ilEQ20rHj3yBGwd30N9y1/B4WiHs%2b1%2bkr2f9/eoALKGk%2bRl/Xr%2b3djUgXp7O8VoRWNzF44c/Q5efe0/eMyNsgyvszyvqf09k0ZSDQFmNNHCV3irAGKDMfMoLPCYAqxohIFFtdfKE%2bGyAD958Z/V5hKIEG8maWfbQYWDGSwrr8OdqwtRWFiGDRt3YPWaQtx511Z8YxWvd2/H6g0lsLU3oP3bL%2bLog8fhcnSoAEJaiDaQqDipmeQ7KMKD%2bx5Eo7zHPuFkmcm1utaB8r31dMx%2bluJP8fY7A5p9EUJc7J4wHvJUAHGAJYDlgDH3yka4ogxUhIW8E%2bGS2XSWONM/x4mTp7B7Tz3qGyUrHSqEXEWMkl02rNlQTDDjJLp63Q5s3FjM1/dh/bYNWLd1EzYVFWJH9TY4m6pxqLxYG19LxwNq/0bJPglKP2ljT%2bhhKRyqpJuaO7QniMuaHN0UqQO2hlaWoJPJaFYXPnT4Sbzy8zfRx3EaCPI0GbiiAgyPJoyHopGE4QARYfmByCwDaYa%2b5VqyxmFAe8FiTgCZAC/89FfcvENLQLIutV9b50INsZZk7167A3et3Y5Va7bhG8z8WoqwbvN2bCndjA33FmH1%2biKWwr1Ye89W7NqxB67KathtTSpifWOrOsBOJ%2bxjc%2bymKw7WOnGY4rS0GL3GTnfUk3CNrUWdIFcpjSq6cle5TT974snn8Mab57T2ff4lCjGLQT4VFgxTBaMM0rkyMATI5qaBOGE6dyo0YJy4lrTxnPzJL1HFoOzMhCgvTpBalUmws6yBBEuwZj1Jb9yJLdvKUVxmY5Zc2FFcz/dKCRGpCGs2lqG6sRvtdidc27Yo6QZCSuqBx0%2bgm02vl9ntLq1Bd2UjmiiMiCQCSOOVvUWAWpJX8cQVfL2nsgE7SvaidFc1OrtknL7G8TyhIhSIFawysGpEBNBpoL1gbsWx2BLBOHAs8vH1Bv7%2b%2bZdRttum9hPV5SpBiwi1De0or2jS6SDviSittHdb5wMa6LaivdiwqZjuKMS6b5WoeHZmuYH2rm9waTlJI%2b164Ak8/NB34NxZgZrCErTZHCyxVrV9A8tAHFdZ3ZRDtekCG8tQIJ/vqWhA6e4aClGjYn37ie%2bhQOpAfigQEUbzpoE1Dr2WAKYIPj/dEGQ50P7TlgAcYdoDVPXOnBNEiFqOLAlSRpfVHFs4yx2uA/q3BF9YVIW71%2b3ktVrfk9q2meRq6536t5RBj0ySkmqKUAlXo9H9Za9GZr%2bBZWfYvhkVVY1Kdi9dIkJITyjfW4dde2zaKCuq7Py8kf2pxhIgxTJIIv9UaPSCGRVAyyBPAKsZigPiyT/i%2bROnWO9tSqzZuV%2bvIkQV7SgB1NQ5NdsSpDZIiqOZUXHasHV7lZZJ2R573iht0wzLqJMykE7fwXWat%2b9CXUkFmhtdtHuzNlpZ14L8rQ6obdE9JfPVTISQ3k0BpAxKyqr0KmIUDA7HMTgS184oPxuN5U6FhgjWOMy5YHq5H8hkiCU%2bxQ9O/JybtZsC9DLYXiMYEm00D0VCSqCdWgRhYEJw9172iHVFuJfZb2zu1u8a97ZpduUeO99ztfaih4I1lVShScadvVVJVVbbdT0R0si%2bnZln9ukCSUCN2YyrdTo41BWWENuLdosDYhARRsas3waNaXDzyVBcYDTEbK4XWAI89/2XuXiLZr22rlXVr87rAzK/xRlieyElAUt5iGXlu2V7GvQgpZaXz0yIQ%2bT7dmbfweeDbo4%2bB7u6g6SdduO7QlxHLsWW/iMNb09FvWZXiJbztZ5QRQj2oQq%2b3kkR71m7GQUFf4GCCxfjnIdxnYsj%2bgOp1RDT5q/Cs7kHJOMhyXpKXNRykFPX03/3Y60nUVw2k5qTbEgmhfgyenP9Id8ZMuPlM%2bkXFnkhV21z6GvpE9Lp9/N5oI2EWmqb0KC9oV33MAQwIMJK/St51r1V%2b5Lxbdt34%2b7V3yLxb2LVqvVobTuEgrMfprUEjJ/Gk/rTuHUusMrAmghyrLTGopSCuEGeyZ965qQpQEuuC4sVJTtCWJwhryULIpIEbgki5SIwxNlnzPK8eS6EpGdIPe8lmaIijtGSSrV%2bBWGNPFuDHIvbDEgfYALK2PHvo83Xrb8Xf/bnq1Bwx53Ycm8pjj7yNN787QW6PsPH4fMTGOoPU4SkCmA1RGskWv8fsJpi7ohsChCNXcfxp36I4tIq3VQcoCOIQRi2NBxhuUIbY63DdECvusCCiCBkJOtWdhvNLi/Ns2RXrR6YNm4uNmu90ej0FF7PH7xXBClnhy%2b8z8r2X%2bKOO76J3eX1ePa5l3D2nIc85pnkDPouhdkDznkxeCmIATpAXCD9YHh05dng5qZoiSBXOWuLALt0DHYqJGDJvBAQQSrEFXkiyHvSBO2OHqPG81wi4gkZ%2bcwgbow4mQI7S218ftiM1WsL2Tzrc%2bNOal6uxaXV2LipiMQ34c5VG1SAZq7z8iun9f8Ak75F/QdQHxMu5Pv6I/hflcf3R8FLd38AAAAASUVORK5CYII=' /%3e%3c/svg%3e"}}},"context":{}}