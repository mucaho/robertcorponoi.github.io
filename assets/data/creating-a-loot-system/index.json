{"hash":"85a87da2caa6a3c8ae7647f17d7dfc4c0f704337","data":{"post":{"title":"Creating a Loot System","path":"/creating-a-loot-system/","date":"24. July 2020","timeToRead":23,"tags":[{"id":"godot","title":"godot","path":"/tag/godot/"},{"id":"unity","title":"unity","path":"/tag/unity/"},{"id":"loot","title":"loot","path":"/tag/loot/"}],"description":"Learn how to easily create a loot system for enemies and chests.","content":"<h2 id=\"getting-started\"><a href=\"#getting-started\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Getting Started</h2>\n<p>If you're making a game that involves the player killing and looting enemies or looting chests then you're probably wondering of a good way to create a loot system for it. There's a couple approaches to this. You could of course just have an array of items that the enemy or chest drops but the problem with that everything has the same weight. Imagine that you wanted a monster to drop some coins and maybe a piece of armor but there's varying levels of armor. You want the boss to drop a low level piece of armor most of the time you want to give the player something to work towards if they want to so ever so often you want a monster to drop a higher level piece of armor. In order to accomplish this you'll need to create a loot table with weighted options but it's actually easier than it looks and it can be done in two parts. The completed project can be found on my GitHub at <a href=\"https://github.com/robertcorponoi/godot-loot-system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">robertcorponoi/godot-loot-system</a>. Also this article was inspired by <a href=\"https://www.codeproject.com/Articles/420046/Loot-Tables-Random-Maps-and-Monsters-Part-I\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a> so check it out to see a slightly different approach (in C#).</p>\n<p><strong>Note:</strong> While this article covers how to do it in Godot, this can be easily ported to any other engine as its just 2 simple classes.</p>\n<h2 id=\"part-1---the-items\"><a href=\"#part-1---the-items\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Part 1 - The Items</h2>\n<p>The first things we need to do is create the class for the items that go in the loot tables. For this, we need to decide what basic properties all of our items will need and it can be boiled down to the following:</p>\n<ul>\n<li><strong>probability</strong>: The single most important part of our item is the probability. This is just a number, any number you wish. A probability of 1 is very low and chances are the item won't be rolled often while a probability of 100 me\nans that item will probably be rolled more often. An important thing to note is that this is not a percentage so don't think of it that way. Probability can be 5 or 4500, it's all relative to the probabilities of the other items on the loot table.</li>\n<li><strong>is_unique</strong>: This is used to indicates whether an item is unique or not. If an item is unique then it cannot be rolled twice. For example, if you have a piece of rare armor on your drop table you don't want it to be able to be rolled twice while on the other hand you might a drop of leather boots to drop more than once.</li>\n<li><strong>always_drop</strong>: This indicates whether the item should always be rolled. For example, your monster might drop bones and that would be a drop that always happens.</li>\n<li><strong>is_enabled</strong>: This indicates whether the item is currently able to be rolled or not. This enables you to enable/disable drops whenever you wish.</li>\n<li><strong>item</strong>: The data of the item to put on the loot table. Since there's so many ways to represent the data in your game it all gets set in this property in any way you wish. I personally prefer using a dictionary with the name and stats of the item but you could also just change <code>item</code> to <code>id</code> and use and id that you can check against a database when it's rolled.</li>\n</ul>\n<p>Now that we have our item's properties, let's put them in a <code>LootItem</code> class in a new script named <code>loot_item.gd</code>:</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token keyword\">extends</span> <span class=\"token class-name\">Resource</span>\n\n<span class=\"token comment\"># A LootItem defines an item that goes on a DropTable and it contains an item's</span>\n<span class=\"token comment\"># properties and it's chance of being hit along with other variables that define</span>\n<span class=\"token comment\"># how often it gets hit.</span>\n<span class=\"token keyword\">class_name</span> <span class=\"token class-name\">LootItem</span>\n\n<span class=\"token comment\"># The data that represents the properties of this item.</span>\n<span class=\"token keyword\">var</span> item\n<span class=\"token comment\"># The probability that this item will be selected.</span>\n<span class=\"token keyword\">var</span> probability<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span>\n<span class=\"token comment\"># Indicates whether this item is unique or not. A unique item will only drop</span>\n<span class=\"token comment\"># once per roll.</span>\n<span class=\"token keyword\">var</span> is_unique<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span>\n<span class=\"token comment\"># Indicates whether this item should drop every time or not.</span>\n<span class=\"token keyword\">var</span> should_drop_always<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span>\n<span class=\"token comment\"># Indicates whether this item is eligible to be rolled or not.</span>\n<span class=\"token keyword\">var</span> is_enabled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span>\n\n<span class=\"token comment\"># To create a LootItem we need the item's data, its probability, whether it's</span>\n<span class=\"token comment\"># unique or not, if it should always be rolled, and whether it's currently</span>\n<span class=\"token comment\"># enabled or not.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Arguments:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `u_item` - The data that represents the properties of this item.</span>\n<span class=\"token comment\"># `u_probability` - The probability that this item will be selected.</span>\n<span class=\"token comment\"># `unique` - Indicates whether this item is unique or not. A unique item will only drop once per roll.</span>\n<span class=\"token comment\"># `always` - Indicates whether this item should drop every time or not.</span>\n<span class=\"token comment\"># `enabled` - Indicates whether this item is eligible to be rolled or not.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">_init</span><span class=\"token punctuation\">(</span>u_item<span class=\"token punctuation\">,</span> u_probability<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">,</span> unique<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> always_drop<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\titem <span class=\"token operator\">=</span> u_item\n\tprobability <span class=\"token operator\">=</span> u_probability\n\tis_unique <span class=\"token operator\">=</span> unique\n\tshould_drop_always <span class=\"token operator\">=</span> always_drop\n\tis_enabled <span class=\"token operator\">=</span> enabled</code></pre>\n<p>Just like that, the first part is done. Notice how there's nothing fancy in the <code>LootItem</code> class, it's just a collection of properties that the loot table will use to decide if this item is rolled or not.</p>\n<h2 id=\"part-2---the-table\"><a href=\"#part-2---the-table\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Part 2 - The Table</h2>\n<p>The loot table is what's going to be rolled and will decide which items should be rolled. Let's see what properties we'll need out of our loot tables:</p>\n<ul>\n<li><strong>name</strong>: While this isn't necessary it's nice to give some context to our table (kind of like the item is defined by its item property).</li>\n<li><strong>num_of_items_to_roll</strong>: This is the most important part of the table, this lets the table know how many items that it should roll for.</li>\n<li><strong>table_contents</strong>: This is where all of the items in the table are stored.</li>\n<li><strong>unique_drops</strong>: We need to keep track of which unique drops have been rolled because we do not want a unique drop to be rolled twice.</li>\n</ul>\n<p>Alright that's all of the basic properties of the table to let's set up the basic properties and constructor in a class named <code>LootTable</code> in a file named <code>loot_table.gd</code>:</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token keyword\">extends</span> <span class=\"token class-name\">Resource</span>\n\n<span class=\"token comment\"># A LootTable defines a table that holds one or more LootItems and it</span>\n<span class=\"token comment\"># can roll to return one or more items.</span>\n<span class=\"token keyword\">class_name</span> <span class=\"token class-name\">LootTable</span>\n\n<span class=\"token comment\"># The name of this loot table.</span>\n<span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n<span class=\"token comment\"># Indicates the amount of items that will be rolled off this table.</span>\n<span class=\"token keyword\">var</span> num_of_items_to_roll<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span>\n<span class=\"token comment\"># The LootItems in this table.</span>\n<span class=\"token keyword\">var</span> table_contents<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># Any unique drops are added here when they are hit so that they cannot drop a</span>\n<span class=\"token comment\"># second time.</span>\n<span class=\"token keyword\">var</span> unique_drops<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># To create a new table we need to provide it with a name and specify the amount</span>\n<span class=\"token comment\"># of items within it.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Arguments:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `u_name` - The name of this table.</span>\n<span class=\"token comment\"># `num_items` - The amount of items that this table should roll for.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">_init</span><span class=\"token punctuation\">(</span>u_name<span class=\"token punctuation\">,</span> num_of_items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tname <span class=\"token operator\">=</span> u_name\n\tnum_of_items_to_roll <span class=\"token operator\">=</span> num_of_items</code></pre>\n<p>Simple enough so far right? Well now we need to create a method to add <code>LootItem</code>s to the <code>table_contents</code> array:</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token comment\"># Adds an item onto this table.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Arguments:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `item` - The LootItem to add to this table.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootItem</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttable_contents<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></code></pre>\n<p>All we do above is add an item to the loot table which is really just adding an item to the end of the <code>table_contents</code> array.</p>\n<p>Now that the user can add items to the table, let's get into the more complicated part, rolling for items. Here's an overview of what we need to do when we roll for items:</p>\n<ol>\n<li>We need to create an array to keep track of the items that have been rolled and we need to reset our <code>unique_drops</code> array in case it contains data from previous rolls.</li>\n<li>We need to check the table for items that have <code>should_drop_always</code> set to <code>true</code>. This is because these items need to always drop so we don't need to roll for them.</li>\n<li>Get a count of the amount of items we need to roll for. This isn't just the flat out <code>num_of_items_to_roll</code> because of the step above. We need to get the amount of items to roll for after the always drops have been found. For example, let's say that you have your table set to roll for 4 items. However, in your table, there's 2 items that are set to always. In the step above we set these items aside and now the number of items to roll for is 2 not 4.</li>\n<li>Now's the fun part, we have to do some looping. The first loop is going to run as many times as we have items left to drop. Then inside it we loop through each item and check to see if it's enabled and that it doesn't already exist in the <code>unique_drops</code> array. After we get a list of the items that are eligible to be rolled for, we calculate the <code>hit_probability</code> which is going to be a random number from 0 to the total probability of each item in the list of items that can be rolled. We then loop over all of the items that can be rolled for and keep a running tally of probability while we check to see if the <code>hit_probability</code> value is less than this running value. Let's take this and expand on it to make sure that you fully understand it.</li>\n</ol>\n<p>Let's say that for example you have the following 4 items in your loot table:</p>\n<table>\n<thead>\n<tr>\n<th><strong>Item</strong></th>\n<th><strong>Probability</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sword</td>\n<td>10</td>\n</tr>\n<tr>\n<td>Shield</td>\n<td>5</td>\n</tr>\n<tr>\n<td>Bow</td>\n<td>15</td>\n</tr>\n<tr>\n<td>Boots</td>\n<td>30</td>\n</tr>\n</tbody>\n</table>\n<p>These 4 items have a combined probability of 60. If you run a random number generator to get 2 values from 0 to 60 you might get something like: 42 and 15.</p>\n<p>Now we loop through each of these items and keep a running tally on their probability while checking to see if the hit value is less than this running tally.</p>\n<p>Let's go through the loop:</p>\n<table>\n<thead>\n<tr>\n<th><strong>Loop Item</strong></th>\n<th><strong>Running Probability Tally</strong></th>\n<th><strong>Hit Probability</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sword</td>\n<td>10</td>\n<td>42</td>\n</tr>\n<tr>\n<td>Shield</td>\n<td>15</td>\n<td>42</td>\n</tr>\n<tr>\n<td>Bow</td>\n<td>30</td>\n<td>42</td>\n</tr>\n<tr>\n<td>Boots</td>\n<td>60</td>\n<td>42</td>\n</tr>\n</tbody>\n</table>\n<p>Now if we're checking if <code>hit_probability &#x3C; running_probability_tally</code> we'll check:</p>\n<ol>\n<li><code>42 &#x3C; 10</code> - <code>false</code></li>\n<li><code>42 &#x3C; 15</code> - <code>false</code></li>\n<li><code>42 &#x3C; 30</code> - <code>false</code></li>\n<li><code>42 &#x3C; 60</code> - <code>true</code></li>\n</ol>\n<p>This means that we'll get boots as a drop! Let's run through this again with the other random value, 15.</p>\n<ol>\n<li><code>15 &#x3C; 10</code> - <code>false</code></li>\n<li><code>15 &#x3C; 15</code> - <code>false</code></li>\n<li><code>15 &#x3C; 30</code> - <code>true</code></li>\n</ol>\n<p>Now we get a bow as our drop.</p>\n<p>Let's get into the code and see how it's done now that we got the theory set up. Let's add a new method below our constructor:</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token comment\"># Adds a table within this table. This is the same as adding an item but for</span>\n<span class=\"token comment\"># naming sake it exists as its own method.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add_table</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootTable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttable_contents<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Rolls the table (and any nested tables) for LootItems and adds the rolled</span>\n<span class=\"token comment\"># items into the `results` array.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">roll_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># The list of items that have been rolled. We also reset the unique_drops</span>\n\t<span class=\"token comment\"># array in case it was populated from previous rolls.</span>\n\t<span class=\"token keyword\">var</span> rolled_items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\tunique_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t\n\t<span class=\"token comment\"># First we look for items that are always hit. These items are always</span>\n\t<span class=\"token comment\"># returned and there is a chance that we can break the `count` limit if the</span>\n\t<span class=\"token comment\"># number of always items is greater than the number of items to roll for.</span>\n\t<span class=\"token keyword\">var</span> num_of_items_always_rolled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> loot <span class=\"token keyword\">in</span> table_contents<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> loot<span class=\"token punctuation\">.</span>should_drop_always <span class=\"token keyword\">and</span> loot<span class=\"token punctuation\">.</span>is_enabled<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token function\">add_to_rolled_items</span><span class=\"token punctuation\">(</span>rolled_items<span class=\"token punctuation\">,</span> loot<span class=\"token punctuation\">)</span>\n\t\t\tnum_of_items_always_rolled <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\n\t<span class=\"token comment\"># Now after we got all of the always items, we have to see how many more</span>\n\t<span class=\"token comment\"># items we can roll for.</span>\n\t<span class=\"token keyword\">var</span> real_drop_count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span> <span class=\"token operator\">=</span> num_of_items_to_roll <span class=\"token operator\">-</span> num_of_items_always_rolled\n\t\n\t<span class=\"token comment\"># Roll for more items if we still can.</span>\n\t<span class=\"token keyword\">if</span> real_drop_count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> _i <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>real_drop_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\"># Find the items in the table that are eligible to be rolled and</span>\n\t\t\t<span class=\"token comment\"># were not rolled earlier.</span>\n\t\t\t<span class=\"token keyword\">var</span> loot_that_can_be_rolled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token keyword\">var</span> total_probability <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\t<span class=\"token keyword\">for</span> table_content <span class=\"token keyword\">in</span> table_contents<span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">if</span> table_content<span class=\"token punctuation\">.</span>is_enabled <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> table_content<span class=\"token punctuation\">.</span>should_drop_always<span class=\"token punctuation\">:</span> \n\t\t\t\t\tloot_that_can_be_rolled<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>table_content<span class=\"token punctuation\">)</span>\n\t\t\t\t\ttotal_probability <span class=\"token operator\">+=</span> table_content<span class=\"token punctuation\">.</span>probability\n\t\t\t\n\t\t\t<span class=\"token comment\"># We calculate the the number that we'll compare to the probability</span>\n\t\t\t<span class=\"token comment\"># of the items to decide what item is rolled by picking a random</span>\n\t\t\t<span class=\"token comment\"># float from 0.0 to the total probability of all the items that can be rolled.</span>\n\t\t\t<span class=\"token keyword\">var</span> hit_value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">float</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand_range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> total_probability<span class=\"token punctuation\">)</span>\n\t\t\t\n\t\t\t<span class=\"token comment\"># Now we have to go through the list of items that can be rolled and increase</span>\n\t\t\t<span class=\"token comment\"># the probability until we find an item that meets the hit_value.</span>\n\t\t\t<span class=\"token keyword\">var</span> running_value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\t<span class=\"token keyword\">for</span> loot <span class=\"token keyword\">in</span> loot_that_can_be_rolled<span class=\"token punctuation\">:</span>\n\t\t\t\trunning_value <span class=\"token operator\">+=</span> loot<span class=\"token punctuation\">.</span>probability\n\t\t\t\t<span class=\"token keyword\">if</span> hit_value <span class=\"token operator\">&lt;</span> running_value<span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token function\">add_to_rolled_items</span><span class=\"token punctuation\">(</span>rolled_items<span class=\"token punctuation\">,</span> loot<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span>\n\t\n\t<span class=\"token comment\"># Finally we return the results of the roll.</span>\n\t<span class=\"token keyword\">return</span> rolled_items</code></pre>\n<p>Everything above is what we covered before but you'll notice something missing, what's <code>add_to_rolled_items</code>? This is the method that checks if the item is unique and if so checks the unique items array to see if this item already exists there. Otherwise it adds it to the <code>rolled_items</code> array. You're probably wondering why this method is even separate but we'll add some more advanced functionality later.</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token comment\"># Since we can nest tables we need to perform some checks before we just add</span>\n<span class=\"token comment\"># items to the results.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Arguments:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `rolled_items` - The array to append the loot to.</span>\n<span class=\"token comment\"># `loot` - The LootItem to check.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add_to_rolled_items</span><span class=\"token punctuation\">(</span>rolled_items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">,</span> loot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># First we only want to proceed if them is not unique or if it is unique it</span>\n\t<span class=\"token comment\"># cannot exist in the unique_drops array.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> loot<span class=\"token punctuation\">.</span>is_unique <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> unique_items<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>loot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># If this is a new unique drop then we add it to the unique drops array.</span>\n\t\t<span class=\"token keyword\">if</span> loot<span class=\"token punctuation\">.</span>is_unique<span class=\"token punctuation\">:</span> unique_items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>loot<span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token comment\"># We add the item to the results array and emit the signal for when an </span>\n\t\t<span class=\"token comment\"># item has been hit.</span>\n\t\tadd_to_rolled_items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>loot<span class=\"token punctuation\">)</span></code></pre>\n<p>That's all for the current functionality. With everything we've covered we can create loot items and add them to a loot table and roll for items, which is what we'll do next.</p>\n<h2 id=\"lets-roll\"><a href=\"#lets-roll\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Let's Roll!</h2>\n<p>Alright now that we have the scaffolding let's make a demo. Create a new script named <code>main.gd</code> and let's get started. Here's what we have to do:</p>\n<ol>\n<li>Create an instance of a <code>LootTable</code>.</li>\n<li>Create instances of <code>LootItem</code> for all of the items we want to add to the table created in step 1.</li>\n<li>Roll for items!</li>\n</ol>\n<p>Pretty simple right? Let's get it in code:</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span>\n\n<span class=\"token comment\"># Run this on ready so we can see the results right away.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">_ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># We need to call `randomize()` so that we don't get the same results every # # time because random isn't really random.</span>\n\t<span class=\"token function\">randomize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\n\t<span class=\"token comment\"># Create a loot table named \"Boss\" that's meant to roll 3 items at a time.</span>\n\t<span class=\"token keyword\">var</span> boss_loot_table<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootTable</span> <span class=\"token operator\">=</span> LootTable<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Boss\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\"># Define various items and create LootItem instances of them with the item</span>\n\t<span class=\"token comment\"># data as the first parameter.</span>\n\t<span class=\"token comment\"># None of the items are unique or set to drop always for simplicity.</span>\n\t<span class=\"token keyword\">var</span> sword<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Dictionary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Sword\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"attack\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"defence\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> sword_loot_item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootItem</span> <span class=\"token operator\">=</span> LootItem<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>sword<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">var</span> shield<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Dictionary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Shield\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"attack\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"defence\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> shield_loot_item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootItem</span> <span class=\"token operator\">=</span> LootItem<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>shield<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">var</span> bow<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Dictionary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bow\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"attack\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"defence\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> bow_loot_item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootItem</span> <span class=\"token operator\">=</span> LootItem<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>bow<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">var</span> staff<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Dictionary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Staff\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"attack\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"defence\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> staff_loot_item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootItem</span> <span class=\"token operator\">=</span> LootItem<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>staff<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">var</span> helmet<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Dictionary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Helmet\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"attack\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"defence\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> helmet_loot_item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootItem</span> <span class=\"token operator\">=</span> LootItem<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>helmet<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\"># Add the created items 3</span>\n\tboss_loot_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>sword_loot_item<span class=\"token punctuation\">)</span>\n\tboss_loot_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>shield_loot_item<span class=\"token punctuation\">)</span>\n\tboss_loot_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>bow_loot_item<span class=\"token punctuation\">)</span>\n\tboss_loot_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>staff_loot_item<span class=\"token punctuation\">)</span>\n\tboss_loot_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>helmet_loot_item<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\"># Roll for items.</span>\n\t<span class=\"token keyword\">var</span> roll_results<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">=</span> boss_loot_table<span class=\"token punctuation\">.</span><span class=\"token function\">roll_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\"># Go through each of the rolled items and print out what we got.</span>\n\t<span class=\"token keyword\">for</span> rolled_item <span class=\"token keyword\">in</span> roll_results<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rolled: \"</span><span class=\"token punctuation\">,</span> rolled_item<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre>\n<p>The results of running the above should be something like:</p>\n<ul>\n<li>Helmet</li>\n<li>Bow</li>\n<li>Shield</li>\n</ul>\n<p>Of course, you'll get different results than me and you'll get different results each time you run it (unless you take out <code>randomize</code>, <code>randomize</code> guarantees we get a different number each time from <code>rand_range</code>).</p>\n<h2 id=\"whats-next\"><a href=\"#whats-next\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What's Next?</h2>\n<p>The current setup works just fine for a table with items but what if you wanted to nest tables in tables?</p>\n<p>This might sound strange at first but think about it. Imagine you have a table that has super rare loot but you want people to maybe get lucky and roll this table when they kill a monster. You don't want to put the monster's drops on it because it only has super rare items. The solution is to create a table with a low probability and set it as an item of the monster table. This makes it so that when the monster table is rolled, the super rare table has a chance of being rolled instead of one of the items of the monster.</p>\n<p>Here's a simple diagram to illustrate it:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1123 554' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a4199fa5a489fb291b4449196edc2d22'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a4199fa5a489fb291b4449196edc2d22)' width='1123' height='554' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAFA0lEQVRo3uWZ%2b1MjNwzH%2bf//mbY/tDDD9Eh79EjI3AH36HAc4Q2BkHcIEB5R/dmrUsXYu9k0hA7dGY0fK9mWLH0t7y48Pj4KpM9wOJTX9qATOlJqXWnh4eEh6by/v5dOpyPtdjspu91uQtRtW/ti77PaeeV9/mnmv76%2bHjPCmAFQnOfy8lL29/el0WhIrVZL2q%2bB0AW9UJzNRmlKpcQDeFC81%2bvJa3xOT09HOx4MATVAq9VK6jZeZkn%2b42PPcxBznJycxEPAGoD4nzUQqpKrq7/L8vKylMtlWVpclK/b21IsluSnH36UUqkkN7eDmc6t41DiAb5RtD7CgHq9/mwewNPvXzkDd6TngKnpjH1zc5NQs9lMgErB%2bDkID7C7/r/DgLOzsycGeBICIObR0ZFcXV0loaCkx4rtm4Ss3DTyk4w7CS9evbe3l40Bt7e3o%2bOPcIAYhCPk8PAwGUj7ITwGCrUpz8/PZWdnJ5FjTH1veWLyobaGKGthTXnWo9gWNYC%2bCIEQMaoD5Hnu7u6kWq3OHFRZC2uaJhOMhoA9jmzdPx5DCO/zT2KANLmsh7WwpmlOo1QMAADBABYNaFBeXFxIpVJJYog6fUrHx8cjJOeY0X6VBXm33VGHnPZB8JKicvowhh0zRnY9rIU1%2besJ8Wsd3tQQUBAkblkYSoEJWto6JTwMDMhozLHjlic0xmAwSJRnYeTnGJz5LY9POpYdE0Le74vJHxwcZN8FcCsWl8cV4Uf5fr8/sRzzYWhkAN15p8KpecAILZOYHUp5vShrLlsje9v6%2bCl5Z/kxgM0fNK4/bm1KoVCQd6t/yKaTs/GOF2AAdlBdM5Y8dTotWVl5I6X1snz58tmF1Ff58L4sm1uf5O1vBfn1TUG%2bfdvNTKUnToX9TLDdakr1/OLvI6g9pqQqbj1H32FI3BwXrzearv8fpXBLFLcG8DNPbeMtdReaKIC31GqEaVXana6cuV09chjC2hh6aC47sbtAMBWeNhNESQ0BlJn0YT71AHDnxW%2bDFgNAVxYHwCkhDNk%2beOAla9TkxEdl5bV9yIH88OIJu7u7Y3K8Zy54qMdQPTY%2b6/Dng0dB0H4P0HLBnokgJkoBUIqylD7xHgV0EIvSyhNqa6kXH0Vz7Qcf8CgU4VSxc1p5v0%2bJTbF8Wmcsu/NjeYB1DRuPeTKsaZKS2Byh08HnjbXZ7bTEK/hN0AcOQiLEPKu2D0I%2b8uOBodPBtv3UXYnwsX2%2bwaMgaC2CAWyfnpexVNJ/n9W28syF20O4Kf1git7f9Z19Tz917bM8XJLsO63rpqbeBf6NAUJJRoxfrY%2brc1vEbVFYiaMT0GI3tQ9AAzB1h0mxAUorB2EAvw8%2b%2bm0oRDFgHiGgmMGRm%2bcYBNA0NFAqz5OaCL2kAVQhnpqrk%2bR0yC7ddZdQAAwHzo19bMAT%2bMSGZ2g%2bAn2XuZSuG7vj%2bhuNuguBu9E3wdTvATb7st/nLHMahXhj8moAi/bbf36WpaUll96uyLu1olT2KrL4y89Sb7afGADFUW59veRS7hXZeP8h%2bbC6sbHhyvL3srgmxWLRZY29hD%2b27rmDoBrXGmCSY9emzrh03hCIguBLhoB%2bMGHONEKOq7fyA5IokSWnBLD%2bpzCAkiOKnVG015Rb0VvbSvpdUkHQl7G8tg2velomBugZO688IJS0hP4i2aRHL2%2bT8Of6JjjPPCD0kzLLgDGePAYPtf8CL%2bcrkczavHoAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1123\" alt=\"Nested Tables\" data-srcset=\"/assets/static/nested-tables.82a2fbd.ef0bd9158f1ea3144ac343f58dc0e79e.png 480w, /assets/static/nested-tables.df6d994.ef0bd9158f1ea3144ac343f58dc0e79e.png 1123w\" data-sizes=\"(max-width: 1123px) 100vw, 1123px\" data-src=\"/assets/static/nested-tables.df6d994.ef0bd9158f1ea3144ac343f58dc0e79e.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/nested-tables.df6d994.ef0bd9158f1ea3144ac343f58dc0e79e.png\" width=\"1123\" alt=\"Nested Tables\"></noscript></p>\n<p>You can see that when you roll the monster table you have a chance to get a sword, a shield, or a drop off the rare loot table with the chances being what probabilities you choose to set.</p>\n<p>So, at this point you might be asking how we can implement it? Well it's actually pretty simple, so let's take it one step at a time:</p>\n<ol>\n<li>Copy over the properties from <code>LootItem</code>. The <code>LootTable</code> class now needs its own <code>probability</code>, <code>is_unique</code>, <code>should_drop_always</code>, and <code>is_enabled</code> properties:</li>\n</ol>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token comment\"># The probability that this table will be hit. This is used when this table is</span>\n<span class=\"token comment\"># nested within another table.</span>\n<span class=\"token keyword\">var</span> probability<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span>\n<span class=\"token comment\"># Indicates whether this table is unique or not. This is used if the table is</span>\n<span class=\"token comment\"># nested in another and if it is unique it will only be rolled once.</span>\n<span class=\"token keyword\">var</span> is_unique<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span>\n<span class=\"token comment\"># Indicates whether this table should be rolled every time or not. This is used</span>\n<span class=\"token comment\"># when the table is nested within another table.</span>\n<span class=\"token keyword\">var</span> should_drop_always<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span>\n<span class=\"token comment\"># Indicates whether this table should be rolled for drops or not. This is used</span>\n<span class=\"token comment\"># when the table is nested within another table.</span>\n<span class=\"token keyword\">var</span> is_enabled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span></code></pre>\n<ol start=\"2\">\n<li>Add the properties to the constructor like in <code>LootItem</code>:</li>\n</ol>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token comment\"># To create a new table we need to provide it with a name. If we want to nest</span>\n<span class=\"token comment\"># this table then we'll seed to provide the probability, whether its unique,</span>\n<span class=\"token comment\"># whether it should always roll, and whether it's currently enabled or not.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Arguments:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `u_name` - The name of this table.</span>\n<span class=\"token comment\"># `u_probability` - The probability that this table will be hit. This is used when this table is nested within another table.</span>\n<span class=\"token comment\"># `unique` - Indicates whether this table is unique or not. This is used if the table is nested in another and if it is unique it will only be rolled once.</span>\n<span class=\"token comment\"># `always_drop` - Indicates whether this table should be rolled every time or not. This is used when the table is nested within another table.</span>\n<span class=\"token comment\"># `enabled` - Indicates whether this table should be rolled for drops or not. This is used when the table is nested within another table .</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">_init</span><span class=\"token punctuation\">(</span>u_name<span class=\"token punctuation\">,</span> num_of_items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">,</span> u_probability<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> unique<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> always_drop<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tname <span class=\"token operator\">=</span> u_name\n\tnum_of_items_to_roll <span class=\"token operator\">=</span> num_of_items\n\tprobability <span class=\"token operator\">=</span> u_probability\n\tis_unique <span class=\"token operator\">=</span> unique\n\tshould_drop_always <span class=\"token operator\">=</span> always_drop\n\tis_enabled <span class=\"token operator\">=</span> enabled</code></pre>\n<ol start=\"3\">\n<li>Optionally create a method that does the same thing as <code>add_item</code> but named <code>add_table</code> to be more verbose and easy to read in the code later.</li>\n</ol>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token comment\"># Adds a table within this table. This is the same as adding an item but for</span>\n<span class=\"token comment\"># naming sake it exists as its own method.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add_table</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootTable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttable_contents<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"3\">\n<li>Modify the <code>add_to_rolled_items</code> method to handle tables recursively by checking if the item that's rolled is a table (by having the <code>roll_table</code> method) and if so we call that table's <code>roll_table</code> method and add the rolled item/s to ours.</li>\n</ol>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token comment\"># Since we can nest tables we need to perform some checks before we just add</span>\n<span class=\"token comment\"># items to the results.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Arguments:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `rolled_items` - The array to append the loot to.</span>\n<span class=\"token comment\"># `loot` - The LootItem or LootTable to check.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add_to_rolled_items</span><span class=\"token punctuation\">(</span>rolled_items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">,</span> loot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># First we only want to proceed if them is not unique or if it is unique it</span>\n\t<span class=\"token comment\"># cannot exist in the unique_drops array.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> loot<span class=\"token punctuation\">.</span>is_unique <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> unique_items<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>loot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># If this is a new unique drop then we add it to the unique drops array.</span>\n\t\t<span class=\"token keyword\">if</span> loot<span class=\"token punctuation\">.</span>is_unique<span class=\"token punctuation\">:</span> unique_items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>loot<span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token comment\"># Since we could be rolling a table we want to keep the loot to add in</span>\n\t\t<span class=\"token comment\"># an array so we can loop through and emit signals without extra work.</span>\n\t\t<span class=\"token keyword\">var</span> items_to_add <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>loot<span class=\"token punctuation\">]</span>\n\t\t\n\t\t<span class=\"token comment\"># If the item has a `roll_table` method then it is a LootTable and </span>\n\t\t<span class=\"token comment\"># we need to call `roll_table` recursively and add the results to </span>\n\t\t<span class=\"token comment\"># the array.</span>\n\t\t<span class=\"token keyword\">if</span> loot<span class=\"token punctuation\">.</span><span class=\"token function\">has_method</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"roll_table\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> items_to_add <span class=\"token operator\">=</span> loot<span class=\"token punctuation\">.</span><span class=\"token function\">roll_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token comment\"># For each item rolled we add it to the `rolled_items` array and emit</span>\n\t\t<span class=\"token comment\"># the hit signal.</span>\n\t\t<span class=\"token keyword\">for</span> loot_item <span class=\"token keyword\">in</span> items_to_add<span class=\"token punctuation\">:</span>\n\t\t\trolled_items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>loot_item<span class=\"token punctuation\">)</span>\n\t\t\tloot<span class=\"token punctuation\">.</span><span class=\"token function\">emit_signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hit\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>That's all for nesting tables, the full <code>LootTable</code> class with nested table support can be found below:</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token keyword\">extends</span> <span class=\"token class-name\">Resource</span>\n\n<span class=\"token comment\"># A LootTable defines a table that holds one or more LootItems/LootTables and it</span>\n<span class=\"token comment\"># can roll to return one or more items.</span>\n<span class=\"token keyword\">class_name</span> <span class=\"token class-name\">LootTable</span>\n\n<span class=\"token comment\"># The name of this loot table.</span>\n<span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n<span class=\"token comment\"># The probability that this table will be hit. This is used when this table is</span>\n<span class=\"token comment\"># nested within another table.</span>\n<span class=\"token keyword\">var</span> probability<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span>\n<span class=\"token comment\"># Indicates whether this table is unique or not. This is used if the table is</span>\n<span class=\"token comment\"># nested in another and if it is unique it will only be rolled once.</span>\n<span class=\"token keyword\">var</span> is_unique<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span>\n<span class=\"token comment\"># Indicates whether this table should be rolled every time or not. This is used</span>\n<span class=\"token comment\"># when the table is nested within another table.</span>\n<span class=\"token keyword\">var</span> should_drop_always<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span>\n<span class=\"token comment\"># Indicates whether this table should be rolled for drops or not. This is used</span>\n<span class=\"token comment\"># when the table is nested within another table.</span>\n<span class=\"token keyword\">var</span> is_enabled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span>\n\n<span class=\"token comment\"># Indicates the amount of items that will be rolled off this table.</span>\n<span class=\"token keyword\">var</span> num_of_items_to_roll<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span>\n<span class=\"token comment\"># The LootItems in this table.</span>\n<span class=\"token keyword\">var</span> table_contents<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># Any unique items are added here when they are hit so that they cannot drop a</span>\n<span class=\"token comment\"># second time.</span>\n<span class=\"token keyword\">var</span> unique_items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># To create a new table we need to provide it with a name. If we want to nest</span>\n<span class=\"token comment\"># this table then we'll seed to provide the probability, whether its unique,</span>\n<span class=\"token comment\"># whether it should always roll, and whether it's currently enabled or not.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Arguments:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `u_name` - The name of this table.</span>\n<span class=\"token comment\"># `u_probability` - The probability that this table will be hit. This is used when this table is nested within another table.</span>\n<span class=\"token comment\"># `unique` - Indicates whether this table is unique or not. This is used if the table is nested in another and if it is unique it will only be rolled once.</span>\n<span class=\"token comment\"># `always_drop` - Indicates whether this table should be rolled every time or not. This is used when the table is nested within another table.</span>\n<span class=\"token comment\"># `enabled` - Indicates whether this table should be rolled for drops or not. This is used when the table is nested within another table .</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">_init</span><span class=\"token punctuation\">(</span>u_name<span class=\"token punctuation\">,</span> num_of_items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">,</span> u_probability<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> unique<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> always_drop<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tname <span class=\"token operator\">=</span> u_name\n\tnum_of_items_to_roll <span class=\"token operator\">=</span> num_of_items\n\tprobability <span class=\"token operator\">=</span> u_probability\n\tis_unique <span class=\"token operator\">=</span> unique\n\tshould_drop_always <span class=\"token operator\">=</span> always_drop\n\tis_enabled <span class=\"token operator\">=</span> enabled\n\n<span class=\"token comment\"># Adds an item onto this table.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Arguments:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `item` - The LootItem to add to this table.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootItem</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttable_contents<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Adds a table within this table. This is the same as adding an item but for</span>\n<span class=\"token comment\"># naming sake it exists as its own method.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add_table</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootTable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttable_contents<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Rolls the table (and any nested tables) for LootItems and adds the rolled</span>\n<span class=\"token comment\"># items into the `results` array.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">roll_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># The list of items that have been rolled. We also reset the unique_drops</span>\n\t<span class=\"token comment\"># array in case it was populated from previous rolls.</span>\n\t<span class=\"token keyword\">var</span> rolled_items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\tunique_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t\n\t<span class=\"token comment\"># For each table or item added we now emit the pre-roll signal.</span>\n\t<span class=\"token keyword\">for</span> loot <span class=\"token keyword\">in</span> table_contents<span class=\"token punctuation\">:</span> loot<span class=\"token punctuation\">.</span><span class=\"token function\">emit_signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pre_roll\"</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token comment\"># First we look for items that are always hit. These items are always</span>\n\t<span class=\"token comment\"># returned and there is a chance that we can break the `count` limit if the</span>\n\t<span class=\"token comment\"># number of always items is greater than the number of items to roll for.</span>\n\t<span class=\"token keyword\">var</span> num_of_items_always_rolled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> loot <span class=\"token keyword\">in</span> table_contents<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> loot<span class=\"token punctuation\">.</span>should_drop_always <span class=\"token keyword\">and</span> loot<span class=\"token punctuation\">.</span>is_enabled<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token function\">add_to_rolled_items</span><span class=\"token punctuation\">(</span>rolled_items<span class=\"token punctuation\">,</span> loot<span class=\"token punctuation\">)</span>\n\t\t\tnum_of_items_always_rolled <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\n\t<span class=\"token comment\"># Now after we got all of the always items, we have to see how many more</span>\n\t<span class=\"token comment\"># items we can roll for.</span>\n\t<span class=\"token keyword\">var</span> real_drop_count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span> <span class=\"token operator\">=</span> num_of_items_to_roll <span class=\"token operator\">-</span> num_of_items_always_rolled\n\t\n\t<span class=\"token comment\"># Roll for more items if we still can.</span>\n\t<span class=\"token keyword\">if</span> real_drop_count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> _i <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>real_drop_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\"># Find the items in the table that are eligible to be rolled and</span>\n\t\t\t<span class=\"token comment\"># were not rolled earlier.</span>\n\t\t\t<span class=\"token keyword\">var</span> loot_that_can_be_rolled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token keyword\">var</span> total_probability <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\t<span class=\"token keyword\">for</span> table_content <span class=\"token keyword\">in</span> table_contents<span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">if</span> table_content<span class=\"token punctuation\">.</span>is_enabled <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> table_content<span class=\"token punctuation\">.</span>should_drop_always<span class=\"token punctuation\">:</span> \n\t\t\t\t\tloot_that_can_be_rolled<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>table_content<span class=\"token punctuation\">)</span>\n\t\t\t\t\ttotal_probability <span class=\"token operator\">+=</span> table_content<span class=\"token punctuation\">.</span>probability\n\t\t\t\n\t\t\t<span class=\"token comment\"># We calculate the the number that we'll compare to the probability</span>\n\t\t\t<span class=\"token comment\"># of the items to decide what item is rolled by picking a random</span>\n\t\t\t<span class=\"token comment\"># float from 0.0 to the total probability of all the items that can be rolled.</span>\n\t\t\t<span class=\"token keyword\">var</span> hit_value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">float</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand_range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> total_probability<span class=\"token punctuation\">)</span>\n\t\t\t\n\t\t\t<span class=\"token comment\"># Now we have to go through the list of items that can be rolled and increase</span>\n\t\t\t<span class=\"token comment\"># the probability until we find an item that meets the hit_value.</span>\n\t\t\t<span class=\"token keyword\">var</span> running_value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\t<span class=\"token keyword\">for</span> loot <span class=\"token keyword\">in</span> loot_that_can_be_rolled<span class=\"token punctuation\">:</span>\n\t\t\t\trunning_value <span class=\"token operator\">+=</span> loot<span class=\"token punctuation\">.</span>probability\n\t\t\t\t<span class=\"token keyword\">if</span> hit_value <span class=\"token operator\">&lt;</span> running_value<span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token function\">add_to_rolled_items</span><span class=\"token punctuation\">(</span>rolled_items<span class=\"token punctuation\">,</span> loot<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span>\n\t\n\t<span class=\"token comment\"># Now for each item we rolled we dispatch the post roll signal.</span>\n\t<span class=\"token keyword\">for</span> o <span class=\"token keyword\">in</span> rolled_items<span class=\"token punctuation\">:</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">emit_signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"post_roll\"</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token comment\"># Finally we return the results of the roll.</span>\n\t<span class=\"token keyword\">return</span> rolled_items\n\n<span class=\"token comment\"># Since we can nest tables we need to perform some checks before we just add</span>\n<span class=\"token comment\"># items to the results.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Arguments:</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># `rolled_items` - The array to append the loot to.</span>\n<span class=\"token comment\"># `loot` - The LootItem or LootTable to check.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add_to_rolled_items</span><span class=\"token punctuation\">(</span>rolled_items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">,</span> loot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># First we only want to proceed if them is not unique or if it is unique it</span>\n\t<span class=\"token comment\"># cannot exist in the unique_drops array.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> loot<span class=\"token punctuation\">.</span>is_unique <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> unique_items<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>loot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># If this is a new unique drop then we add it to the unique drops array.</span>\n\t\t<span class=\"token keyword\">if</span> loot<span class=\"token punctuation\">.</span>is_unique<span class=\"token punctuation\">:</span> unique_items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>loot<span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token comment\"># Since we could be rolling a table we want to keep the loot to add in</span>\n\t\t<span class=\"token comment\"># an array so we can loop through and emit signals without extra work.</span>\n\t\t<span class=\"token keyword\">var</span> items_to_add <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>loot<span class=\"token punctuation\">]</span>\n\t\t\n\t\t<span class=\"token comment\"># If the item has a `roll_table` method then it is a LootTable and </span>\n\t\t<span class=\"token comment\"># we need to call `roll_table` recursively and add the results to </span>\n\t\t<span class=\"token comment\"># the array.</span>\n\t\t<span class=\"token keyword\">if</span> loot<span class=\"token punctuation\">.</span><span class=\"token function\">has_method</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"roll_table\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> items_to_add <span class=\"token operator\">=</span> loot<span class=\"token punctuation\">.</span><span class=\"token function\">roll_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token comment\"># For each item rolled we add it to the `rolled_items` array and emit</span>\n\t\t<span class=\"token comment\"># the hit signal.</span>\n\t\t<span class=\"token keyword\">for</span> loot_item <span class=\"token keyword\">in</span> items_to_add<span class=\"token punctuation\">:</span>\n\t\t\trolled_items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>loot_item<span class=\"token punctuation\">)</span>\n\t\t\tloot<span class=\"token punctuation\">.</span><span class=\"token function\">emit_signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hit\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Now let's modify our <code>main.gd</code> so we can test this out:</p>\n<ol>\n<li>Let's start out by creating a couple <code>LootTables</code> that will be nested in our Boss table. We'll give the Common table a 3x greater chance to be hit than the Rare drop table.</li>\n</ol>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\">\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token comment\"># Create our nested tables and add them to the Boss table.</span>\n\t<span class=\"token keyword\">var</span> common_drop_table<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootTable</span> <span class=\"token operator\">=</span> LootTable<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Common\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> rare_drop_table<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootTable</span> <span class=\"token operator\">=</span> LootTable<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rare\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t\n\tboss_loot_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_table</span><span class=\"token punctuation\">(</span>common_drop_table<span class=\"token punctuation\">)</span>\n\tboss_loot_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_table</span><span class=\"token punctuation\">(</span>rare_drop_table<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<ol start=\"2\">\n<li>Instead of adding the items directly to the Boss table, let's split them up onto the two sub-tables.</li>\n</ol>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\">    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\tcommon_drop_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>sword_loot_item<span class=\"token punctuation\">)</span>\n\tcommon_drop_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>shield_loot_item<span class=\"token punctuation\">)</span>\n\tcommon_drop_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>bow_loot_item<span class=\"token punctuation\">)</span>\n\trare_drop_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>staff_loot_item<span class=\"token punctuation\">)</span>\n\trare_drop_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>helmet_loot_item<span class=\"token punctuation\">)</span>\n\trare_drop_table<span class=\"token punctuation\">.</span><span class=\"token function\">add_item</span><span class=\"token punctuation\">(</span>platebody_loot_item<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<ol start=\"3\">\n<li>Now we press play and see the results of the roll! In my demo I set the Boss table to drop 2 items and my 2 ended up being:</li>\n</ol>\n<ul>\n<li>Staff</li>\n<li>\n<p>Bow</p>\n<p>Now this time we actually hit the rare drop table, but in another roll I got:</p>\n</li>\n<li>Bow</li>\n<li>\n<p>Sword</p>\n<p>So that time I hit the common table for both items.</p>\n</li>\n</ul>\n<h2 id=\"bonus\"><a href=\"#bonus\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bonus!</h2>\n<p>In the article that gave me the inspiration for this, the author implements events for the loot items and table and I figured it may be useful to someone so here's a bonus section for it. So an event based system in Godot would involve signals and we're going to create a custom signal that will get emitted when an item on the drop table is it or even when a table within a table is hit. One example of when this could be useful is in a multiplayer game if you want to notify every player when someone gets a super rare drop.</p>\n<p>So this is actually pretty easy. To do this, open up your <code>loot_item</code> class and add the <code>hit</code> signal below the variables.</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">var</span> is_enabled<span class=\"token punctuation\">:</span> <span class=\"token class-name\">bool</span>\n\n<span class=\"token comment\"># The signal that gets emitted when this item is hit on the drop table.</span>\n<span class=\"token keyword\">signal</span> hit\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<p>Now in the <code>loot_table</code> class, we want to go down to our <code>add_to_rolled_items</code> method and right below where we append the the item to the <code>rolled_items</code> array and emit the signal like so:</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token comment\"># For each item rolled we add it to the `rolled_items` array and emit</span>\n<span class=\"token comment\"># the hit signal.</span>\n<span class=\"token keyword\">for</span> loot_item <span class=\"token keyword\">in</span> items_to_add<span class=\"token punctuation\">:</span>\n\trolled_items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>loot_item<span class=\"token punctuation\">)</span>\n\tloot<span class=\"token punctuation\">.</span><span class=\"token function\">emit_signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hit\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Finally, head over to the <code>main.gd</code> file we created to test our loot system and add a signal to one of the items (I picked the shield) like so:</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token keyword\">var</span> shield<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Dictionary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Shield\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"attack\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"defence\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> shield_loot_item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootItem</span> <span class=\"token operator\">=</span> LootItem<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>shield<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Connect the shield's hit signal to a function named \"_on_shield_rolled\".</span>\nshield_loot_item<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hit\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_on_shield_rolled\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># This function is going to print to the console when we roll the shield.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">_on_shield_rolled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We rolled a shield!\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Just make sure you have a function in the <code>main.gd</code> file that you can attach the function to as shown above whenever you roll the shield you should see that message print to the console.</p>\n<p>Of course this means that if you have nested tables then the signal will be emitted twice because the sub table will roll it and then the main table also will so the signal gets emitted twice so you can change the <code>emit_signal</code> to also include the table object like so:</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token comment\"># For each item rolled we add it to the `rolled_items` array and emit</span>\n<span class=\"token comment\"># the hit signal.</span>\n<span class=\"token keyword\">for</span> loot_item <span class=\"token keyword\">in</span> items_to_add<span class=\"token punctuation\">:</span>\n\trolled_items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>loot_item<span class=\"token punctuation\">)</span>\n\tloot<span class=\"token punctuation\">.</span><span class=\"token function\">emit_signal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hit\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Then, in your <code>_on_shield_rolled</code> function you can check to see if the main boss table rolled it like so:</p>\n<pre class=\"language-gdscript\"><code class=\"language-gdscript\"><span class=\"token comment\"># This function is going to print to the console when we roll the shield.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">_on_shield_rolled</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LootTable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> table<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Boss\"</span><span class=\"token punctuation\">:</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"We rolled a shield!\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>There's other ways this could be handled but I'll leave that as a challenge to you, the above gets you 95% of the way there.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p> Now that you have the basic workings of a loot system, the challenge for you is to figure out how to best implement it in your game. You could for example not provide any item definitions when creating items but instead just provide an id of an item that links to an id of a resource somewhere else like a database. Also since the loot items and tables are resources you could make your items into resources in Godot (sword.tres, shield.tres, etc) and on another class you could ask for an export of items/tables so you don't have to do it by code. I might expand on these concepts in a later tutorial but for now let me know if you have any questions and I'll gladly answer them!</p>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/chest.c521340.dec358a6bf7cb7fed011d4e39cb34716.png","size":{"width":850,"height":604},"sizes":"(max-width: 850px) 100vw, 850px","srcset":["/assets/static/chest.a67b0b2.dec358a6bf7cb7fed011d4e39cb34716.png 480w","/assets/static/chest.c521340.dec358a6bf7cb7fed011d4e39cb34716.png 850w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 850 604' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-40af2268e2dfe4871592795e26ffcc9d'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-40af2268e2dfe4871592795e26ffcc9d)' width='850' height='604' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAtCAYAAAAeA21aAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAJaElEQVRo3u2X%2bVMVVxbH%2b3/JhH15G29hExUQtyDiHmURgQfIFozLjGilBjURoqKSMZXJ1ERTxgVxi4JixklMohNnfpjRGsQddSTqVCaymKmo%2bc45t2%2b/1930AzUVmSr94VP33HNvn3O%2bp7vv66fsvdAHA133saerT6K3CVrfLbg/lC4juwx8b2B3Vz8%2b6foXcVvY5vVdpusNsS%2bEQq3PUK%2bsf2%2bXSSPRKlH2dd9Ha3fQoRHcfD%2bAGtDUlCHN6RumSI0BIV40gOyR9/eFEGgUyzcvWK9RaIBuFda9j/YpbTRp44mZC9wYgscnaI5guAYZ7soA3dnbRK%2bwn%2bQaozij0FZLVA1mXW0B%2bgTK/ot92N8dpG0IFs2RqM2xblKr%2bdXSFd0q7vptuqO9wjYLCnn3pDA9VnXpBWroNQrNxAFCOXixHxoHDMiN3SM1SGXfMI3SP1UqLPo20SvsoH/kGG3D1BBKpF6XXu8hbsDhS33QOKSHFg8KQjVI1ySLRg33RO3vHqDXq1fAdlsIYZYxQwgzi9MEHjLpCurtFyhHLvdDz6eXjBwOELpRVs0yc4CKF4h9g2i72Et8K2whxrAeOo6WbyRhZh1mnUclSseVAWi0C/rRflnlqIkhzbJo2NDGcdH3cYRjX3sg7MPijt0WsH2o%2b3uKN4CjVx/QvE9Fd32oHEcuhxamoWlpl/o6TCidVwegcdzEMeZKkA4L2vVctm5e542H2PP3O/jozHV0XP8vjvc8RnvPd8R/cKznETpvPkTruX9jxzc30H71B3Rc%2b2GoACEitJCOK8ZaBRaaOk0of7o2CD2fWXDi2gBOXDXSacFxqyZS0R8easeKDw%2bitnkHNu/Yjq2f7MHmnWTv/Bhbdu7Ce7t2Y3XL%2b6h67wCaPt6L/X%2b9hBM91Ci6diQBnaa6RK2EWYNZ50nm%2biCUL3oeIMggPmeuG/mzBSfNyKDBJAM42UN388Jd1K9ZgaqNH6GuqQUrVi7GsvoaLJeodhWWv7UM1S2tqF5dj9%2b3HcCpXuCzq/3Ggq8NzWtV2%2bcWsDaVoN5ThPL1zQcQ3DDyVQi%2b1NNj5JSOLyjpV7d%2bxLHzt7C0vg7ljX9AZUMTlv2mSsyX1r8hUe0lK2lP0x9RUb8aLTt24My3P1GMAYo1aIhrzqnVEqrer60gvaclytlbD6Dnm2H4y80n58yNQZztfYgT52%2biss6PkjXbULaqAdV1JahaUo6qulKJH9VLyshXgZJ1H6Bo6a%2bx6YP38bc7P%2bH0jQGceYqcos6b1rWfDYFy/t5jnL/3CGK8%2byho83g3aJ%2b7q9tzV87laMU/7jzEP78DTl%2b%2bh/IaP%2ba9sRr5NUtQUrYAJRVF8NdUwF9bgdJqak55AYrLF2L%2bm7/FvFI/frd9O%2bjTgGL8aIip1XEuUKe%2bxscW9er26NYC%2bwnl7Q1b8M7GLeCxcVOLtDeL%2bXqai3Vpr2tqFmvr3pWjnL/9rrQDY7MY16zfiLWNzah9sxZFpfNRXFYgGrCoshx5KzdhQX0z8pc3kD9frC3y5wt7dcM6rOXrGzeKGGIkGtZvIP8mYa9t3CTgPFouzt/wzgZR33qphWlsbsGGLdvI3kr%2brWLUUGbPmom5c2ZjZu50zJ45QzBrxgzMoPnMGblyJB/5p%2bdMQ25OjvDnTMumeQ5yp%2bcIH895L%2b9R13ichuypryG/8HX4KxeitKIQpeUksnoxFqzaQrSgYPka8hWoa5LcXIqXnS2un5atxuI8HJdzcR5eY5/ISbZWL69z/axL882ZPUvVRcybO0fYvMZzZdLkKdDImjgJEydNpnEyjVOQMWEiMjWyJol5emaWGDMyVTudxvEZWRiXPgFjx2cG4Dn708ZlYNbcmSirLKJHvVCILVlcJJqwiCiu9JOvkF4LVTzvyaQ6tBiBmOnqOD5DjcujyJ%2bhkiFqUWtLpzWul3Vw7ROkzZo0H4%2bTp0yFkpQyFt6kMfAlp8GXkgYvjTz3JqXBI/2a7U5MFTaPCb5UuLwpcHqSVchmn1iT6%2byLd/owJWcqNYDEleWRwHwiD6Vl8yULpC9fPB2LSheIXHZ3koghsMjn8mn5xgRq4lHUHtCg2j6JpicpdSySx4wTKBzMIQU4PSlBWybjQmwJKvGuRMS5fIhzqvDcRut2txqD7TjyxdIaw3ZUvBsT6bEsrS1HUWUpvf/%2bkBRX%2bVFQVgwH5Y5xeA1xOL9d1KPWJGpxBmtR98h9tK7X4XCrNjfQod0w1k1%2bhS%2bMl0Vz0mjG7kGUHpsHkTZ1jLZ7ESMTxhJs855IscctR7mf9oZF25E%2buxgFb23D/JXNdPBttmblZuSt2op5y5sQ50lFRFyCLq4W2y18MQ6fyK01m2vW9kbZTLUTvM7atLo1zfHULIXvUCQRZUGkbi2GxMRyYoJtsU5FcqE8ansjtTkLoPmrUQ5kZOeiuG4JCquqsbC6JiRFNbXIr6ikApMQHusyxQvGj9DFjybBsQ61NnEDuQGilgRLXXpNvFfxxnvBeASeAF6bF4n2RCQ6EuElEu0%2bsccd51ER%2b7zDQzFc0QmYOjELi6sL4a/IQ1lFvo48g12%2bmH4hSl5HojNJ5BgxfrwnUA/PfVQjk%2bRQ6/bZgjUHdEm9mmYljDqpEc7d4ceGHymCbfYZ9%2biIGwF%2bAuhOOujAGpdFvwiZE5A2geCTfDKd6NmvCVv4aG0sjSnjMxBhcwdzjZhDxVxjhHwFNS0812vRrlXE4yDfqxjtXSKfloAftwiaB4hzG%2bfDIa8Noya8Eu3ErySvRDoR4bQjIjFN2AG/HAM5nyaXqcZA/fHquSTOLnkW8DkRITUq2gESoRMdbhJtnj8N5mv5IAunAmM9LsSmjqN3XfWNdN2z5jM/MeoN9wYOfCWU6J8rPDQJQnQMNSCGvkHCY3%2bJHE/WDPYpz0f06DRgJF3iFXg%2boodrgPs55h7aEOX5J9c3gM6AmATDgfm8Gb0GuB2ISR5DP0WJJN41KuJHsQH0s5tgR0xSKsJtKaPbgBE/NH4BwugJiKYGRCelIMyWTD4nRqMOcQjq/7w8KdqHU7T25%2bkpUD%2b2fLB5XYinv6VRrjT6b8F/WJ4t3s9F4S%2bkp0L34fQsqB9C9AeGzoDYZHoF7Cn0cfIivQLx6iugnQFhdAaE0xkQHucenVdg1H4F/l8OwVFtAL8CdAi%2bmA3g7wCfD%2bGOsS9qA5z0NUi2K/0Fb4Az/eUT8LIBLxvwsgEvGzBaDfgf0OTBFGlzKt4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"}}},"context":{}}